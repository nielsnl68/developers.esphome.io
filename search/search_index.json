{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ESPHome","text":"<p>Documentation: https://esphome.io/</p> <p>For issues, please go to the issue tracker.</p> <p>For feature requests, please see feature requests.</p>"},{"location":"#contributing-to-esphome","title":"Contributing to ESPHome","text":"<p>For a detailed guide, please see https://esphome.io/guides/contributing.html#contributing-to-esphome</p> <p>Things to note when contributing:</p> <ul> <li>Please test your changes :)</li> <li>If a new feature is added or an existing user-facing feature is changed, you should also    update the docs. See contributing to esphome-docs    for more information.</li> <li>Please also update the tests in the <code>tests/</code> folder. You can do so by just adding a line in one of the YAML files    which checks if your new feature compiles correctly.</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at esphome@nabucasa.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at http://contributor-covenant.org/version/1/4</p>"},{"location":"license/","title":"ESPHome License","text":"<p>Copyright (c) 2019 ESPHome</p> <p>The ESPHome License is made up of two base licenses: MIT and the GNU GENERAL PUBLIC LICENSE. The C++/runtime codebase of the ESPHome project (file extensions .c, .cpp, .h, .hpp, .tcc, .ino) are published under the GPLv3 license. The python codebase and all other parts of this codebase are published under the MIT license.</p> <p>Both MIT and GPLv3 licenses are attached to this document.</p>"},{"location":"license/#mit-license","title":"MIT License","text":"<p>Copyright (c) 2019 ESPHome</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"license/#gplv3-license","title":"GPLv3 License","text":"<pre><code>                GNU GENERAL PUBLIC LICENSE\n                   Version 3, 29 June 2007\n</code></pre> <p>Copyright (C) 2007 Free Software Foundation, Inc. http://fsf.org/  Everyone is permitted to copy and distribute verbatim copies  of this license document, but changing it is not allowed.</p> <pre><code>                        Preamble\n</code></pre> <p>The GNU General Public License is a free, copyleft license for software and other kinds of works.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works.  By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users.  We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors.  You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights.  Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received.  You must make sure that they, too, receive or can get the source code.  And you must show them these terms so they know their rights.</p> <p>Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.</p> <p>For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software.  For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.</p> <p>Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so.  This is fundamentally incompatible with the aim of protecting users' freedom to change the software.  The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable.  Therefore, we have designed this version of the GPL to prohibit the practice for those products.  If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.</p> <p>Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary.  To prevent this, the GPL assures that patents cannot be used to render the program non-free.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p> <pre><code>                   TERMS AND CONDITIONS\n</code></pre> <ol> <li>Definitions.</li> </ol> <p>\"This License\" refers to version 3 of the GNU General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License.  Each licensee is addressed as \"you\".  \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy.  The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy.  Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies.  Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License.  If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p> <ol> <li>Source Code.</li> </ol> <p>The \"source code\" for a work means the preferred form of the work for making modifications to it.  \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form.  A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities.  However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work.  For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p> <ol> <li>Basic Permissions.</li> </ol> <p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met.  This License explicitly affirms your unlimited permission to run the unmodified Program.  The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work.  This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force.  You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright.  Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below.  Sublicensing is not allowed; section 10 makes it unnecessary.</p> <ol> <li>Protecting Users' Legal Rights From Anti-Circumvention Law.</li> </ol> <p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p> <ol> <li>Conveying Verbatim Copies.</li> </ol> <p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p> <ol> <li>Conveying Modified Source Versions.</li> </ol> <p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <pre><code>a) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\n</code></pre> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit.  Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p> <ol> <li>Conveying Non-Source Forms.</li> </ol> <p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <pre><code>a) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\n</code></pre> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling.  In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage.  For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product.  A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source.  The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information.  But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed.  Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p> <ol> <li>Additional Terms.</li> </ol> <p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law.  If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it.  (Additional permissions may be written to require their own removal in certain cases when you modify the work.)  You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <pre><code>a) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\n</code></pre> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10.  If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term.  If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p> <ol> <li>Termination.</li> </ol> <p>You may not propagate or modify a covered work except as expressly provided under this License.  Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License.  If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p> <ol> <li>Acceptance Not Required for Having Copies.</li> </ol> <p>You are not required to accept this License in order to receive or run a copy of the Program.  Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance.  However, nothing other than this License grants you permission to propagate or modify any covered work.  These actions infringe copyright if you do not accept this License.  Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p> <ol> <li>Automatic Licensing of Downstream Recipients.</li> </ol> <p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License.  You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations.  If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License.  For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p> <ol> <li>Patents.</li> </ol> <p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based.  The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version.  For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement).  To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients.  \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License.  You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p> <ol> <li>No Surrender of Others' Freedom.</li> </ol> <p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all.  For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p> <ol> <li>Use with the GNU Affero General Public License.</li> </ol> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work.  The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.</p> <ol> <li>Revised Versions of this License.</li> </ol> <p>The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number.  If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions.  However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p> <ol> <li>Disclaimer of Warranty.</li> </ol> <p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> <ol> <li>Limitation of Liability.</li> </ol> <p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <ol> <li>Interpretation of Sections 15 and 16.</li> </ol> <p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <pre><code>                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs\n</code></pre> <p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program.  It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>&lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n</code></pre> <p>The hypothetical commands <code>show w' and</code>show c' should show the appropriate parts of the General Public License.  Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\".</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see http://www.gnu.org/licenses/.</p> <p>The GNU General Public License does not permit incorporating your program into proprietary programs.  If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library.  If this is what you want to do, use the GNU Lesser General Public License instead of this License.  But first, please read http://www.gnu.org/philosophy/why-not-lgpl.html.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions to the ESPHome suite are very welcome! All the code for the projects is hosted on GitHub and you can find the sources here:</p> <ul> <li>ESPHome: Project Source Code</li> <li>ESPHome-Docs: Project user manual</li> <li>developers.esphome.io: This developers guide.</li> </ul> <p>Best practice Just clone the repository locally, do the changes for your new feature/bug fix and submit a pull request.</p>"},{"location":"contributing/component_creation/","title":"Submitting code","text":""},{"location":"contributing/component_creation/#contributing-to-esphome","title":"Contributing to ESPHome","text":"<p>For a detailed guide, please see contributing-to-esphom</p> <p>Things to note when contributing:</p> <ul> <li>Please test your changes :)</li> <li>If a new feature is added or an existing user-facing feature is changed, you should also update the docs. See contributing to esphome-docs for more information.</li> <li>Please also update the tests in the <code>tests/</code> folder. You can do so by just adding a line in one of the YAML files  which checks if your new feature compiles correctly.</li> <li>Sometimes I will let pull requests linger because I'm not 100% sure about them. Please feel free to ping me after some time.</li> </ul>"},{"location":"contributing/component_creation/clang/","title":"Clang requerements","text":""},{"location":"contributing/component_creation/clang/#full-list-of-current-clang-checks","title":"Full list of current clang checks","text":"<p>We use the congig from github. Above that we have use a list of configuration settings listed below.</p> Configuration List. <pre><code>Language:        Cpp\nAccessModifierOffset: -1\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: DontAlign\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: MultiLine\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  AfterExternBlock: false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     120\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n\n-   foreach\n-   Q_FOREACH\n-   BOOST_FOREACH\n    IncludeBlocks:   Preserve\n    IncludeCategories:\n-   Regex:           '^&amp;lt;ext/.\\*.h&gt;'\n    Priority:        2\n-   Regex:           '^&amp;lt;.\\*.h&gt;'\n    Priority:        1\n-   Regex:           '^&amp;lt;.\\*'\n    Priority:        2\n-   Regex:           '.\\*'\n        Priority:        3\n    IncludeIsMainRegex: '([-\\_](test|unittest))?$'\n    IndentCaseLabels: true\n    IndentPPDirectives: None\n    IndentWidth:     2\n    IndentWrappedFunctionNames: false\n    KeepEmptyLinesAtTheStartOfBlocks: false\n    MacroBlockBegin: ''\n    MacroBlockEnd:   ''\n    MaxEmptyLinesToKeep: 1\n    NamespaceIndentation: None\n    PenaltyBreakAssignment: 2\n    PenaltyBreakBeforeFirstCallParameter: 1\n    PenaltyBreakComment: 300\n    PenaltyBreakFirstLessLess: 120\n    PenaltyBreakString: 1000\n    PenaltyBreakTemplateDeclaration: 10\n    PenaltyExcessCharacter: 1000000\n    PenaltyReturnTypeOnItsOwnLine: 2000\n    PointerAlignment: Right\n    RawStringFormats:\n-   Language:        Cpp\n    Delimiters:\n    -   cc\n    -   CC\n    -   cpp\n    -   Cpp\n    -   CPP\n    -   'c++'\n    -   'C++'\n        CanonicalDelimiter: ''\n        BasedOnStyle:    google\n-   Language:        TextProto\n        Delimiters:\n          - pb\n          - PB\n          - proto\n          - PROTO\n        EnclosingFunctions:\n          - EqualsProto\n          - EquivToProto\n          - PARSE_PARTIAL_TEXT_PROTO\n          - PARSE_TEST_PROTO\n          - PARSE_TEXT_PROTO\n          - ParseTextOrDie\n          - ParseTextProtoOrDie\n        CanonicalDelimiter: ''\n        BasedOnStyle:    google\n    ReflowComments:  true\n    SortIncludes:    false\n    SortUsingDeclarations: false\n    SpaceAfterCStyleCast: true\n    SpaceAfterTemplateKeyword: false\n    SpaceBeforeAssignmentOperators: true\n    SpaceBeforeCpp11BracedList: false\n    SpaceBeforeCtorInitializerColon: true\n    SpaceBeforeInheritanceColon: true\n    SpaceBeforeParens: ControlStatements\n    SpaceBeforeRangeBasedForLoopColon: true\n    SpaceInEmptyParentheses: false\n    SpacesBeforeTrailingComments: 2\n    SpacesInAngles:  false\n    SpacesInContainerLiterals: false\n    SpacesInCStyleCastParentheses: false\n    SpacesInParentheses: false\n    SpacesInSquareBrackets: false\n    Standard:        Auto\n    TabWidth:        2\n    UseTab:          Never\n</code></pre>"},{"location":"contributing/component_creation/ctidy/","title":"CTidy requerements","text":""},{"location":"contributing/component_creation/ctidy/#how-to-setup-vscode-to-make-sure-ctidy-runs-before-commiting-your-changes","title":"how to setup VScode to make sure CTidy runs before commiting your changes","text":""},{"location":"contributing/component_documentation/","title":"ESPHome Docs","text":""},{"location":"contributing/component_documentation/#contributing-to-esphome-docs","title":"Contributing to ESPHome-Docs","text":"<p>The ESPHome documentation is built using sphinx and uses reStructuredText for all source files.</p> <p>If you're not familiar with writing reStructuredText, see :ref:<code>rst-syntax</code> for a quick refresher.</p>"},{"location":"contributing/component_documentation/#local","title":"Local","text":"<p>The easiest way is to use the esphome-docs container image:</p> <p><pre><code>docker run --rm -v \"${PWD}/\":/data/esphomedocs -p 8000:8000 -it ghcr.io/esphome/esphome-docs\n</code></pre>    With <code>PWD</code> referring to the root of the <code>esphome-docs</code> git repository. Then go to <code>&lt;CONTAINER_IP&gt;:8000</code> in your browser.</p> <p>This way, you don't have to install the dependencies to build the documentation.</p> <p>To check your documentation changes locally, you first need install Sphinx (with Python 3).</p> <p><pre><code># in ESPHome-Docs repo:\npip install -r requirements.txt\n</code></pre> Then, use the provided Makefile to build the changes and start a live-updating web server:</p> <pre><code># Start web server on port 8000\nmake live-html\n</code></pre>"},{"location":"contributing/component_documentation/#notes","title":"Notes","text":"<p>Some notes about the docs:</p> <ul> <li>Use the English language (duh...)</li> <li>An image tells a thousand words, please use them wherever possible. But also don't forget to shrink them, for example     I often use tinypng</li> <li>Try to use examples as often as possible (also while it's great to use highly accurate,     and domain-specific lingo, it should not interfere with new users understanding the content)</li> <li>Fixes/improvements for the docs themselves should go to the <code>current</code> branch of the     esphomedocs repository. New features should be added against the <code>next</code> branch.</li> <li>Always create new branches in your fork for each pull request.</li> </ul>"},{"location":"contributing/component_documentation/github/","title":"Through Github","text":"<p>This guide essentially goes over the same material found in [GitHub\\'s Editing files in another user\\'s repository \\&lt;https://docs.github.com/en/repositories/working-with-files/managing-files/editing-files#editing-files-in-another-users-repository&gt;]{.title-ref}__. You may also find that page helpful to read.</p> <p>At the bottom of each page in the docs, there is a \\\"Edit this page on GitHub\\\" link. Click this link and you\\'ll see something like this:</p> <p></p> <p>Click the edit button to start making changes. If you\\'re not sure about some element of syntax, see the quick-start <code>rst-syntax</code> guide.</p> <p>Once you\\'ve made your changes, give them a useful name and press \\\"Propose changes\\\". At this point, you\\'ve made the changes on your own personal copy of the docs in GitHub, but you still need to submit them to us.</p> <p></p> <p>To do that, you need to create a \\\"Pull request\\\":</p> <p></p> <p>Fill out the new pull request form, replacing the [[ ]]{.title-ref} with [[x]]{.title-ref} to indicate that you have followed the instructions.</p> <p></p> <p>After waiting a while, you might see a green or a red mark next to your commit in your pull request:</p> <p></p> <p>This means that there is some error stopping your pull request from being fully processed. Click on the X, click on \\\"Details\\\" next to the lint step, and look and see what\\'s causing your change to fail.</p> <p></p> <p></p> <p>For example, in this case, you\\'d want to go to line 136 of [pzemac.rst]{.title-ref} and adjust the number of [===]{.title-ref} so that it completely underlines the section heading.</p> <p>Once you make that change, the pull request will be built again, and hopefully this time where will be no other errors.</p>"},{"location":"contributing/component_documentation/syntax/","title":"Syntax","text":""},{"location":"contributing/component_documentation/syntax/#restructuredtex-syntax","title":"reStructuredTex Syntax","text":"<p>Here's a quick reStructuredTex (RST) primer:</p> <p>Title hierarchy is based on order of occurrence, not on type of character used to underline it. This documents establish the following character order for better consistency.</p> <p>reStructured text can do a lot more than this, so if you're looking for a more complete guide please have a look at the Sphinx reStructuredText Primer.</p>"},{"location":"contributing/component_documentation/syntax/#headers","title":"Headers","text":"<p>You can write titles like this:</p> <pre><code>My Title\n========\n</code></pre> <p>and section headers like this:</p> <pre><code>My Sub Section\n--------------\n</code></pre> <p>and sub-section headers like this:</p> <pre><code>My Sub-sub Section\n******************\n</code></pre> <p>Note</p> <p>The length of the bar below the text must match the title Text length. Also, titles should be in Title Case</p>"},{"location":"contributing/component_documentation/syntax/#links","title":"Links","text":"<p>To create a link to an external resource (for example https://www.google.com), use <code>\\`Link text &lt;link_url&gt;\\`__</code>. For example:</p> <pre><code>`Google.com &lt;https://www.google.com&gt;`__\n</code></pre> <p>Google.com</p>"},{"location":"contributing/component_documentation/syntax/#references","title":"References","text":"<p>To reference another document, use the <code>:doc:</code> and <code>:ref:</code> roles (references are set up globally and can be used between documents):</p> <pre><code>.. _my-reference-label:\n\nSection to cross-reference\n--------------------------\n\nSee :ref:`my-reference-label`, also see :doc:`/components/switch/gpio`.\n:doc:`Using custom text &lt;/components/switch/gpio&gt;`.\n</code></pre> <p>See :ref:<code>devices</code>, also see :doc:<code>/components/switch/gpio</code>. :doc:<code>Using custom text &lt;/components/switch/gpio&gt;</code>.</p>"},{"location":"contributing/component_documentation/syntax/#inline-code","title":"Inline code","text":"<p>To have text appear <code>like this</code>, use double backticks:</p> <pre><code>    To have text appear ``like this``, use double backticks.\n</code></pre> <p>To have text appear <code>like this</code>, use double backticks.</p>"},{"location":"contributing/component_documentation/syntax/#code-blocks","title":"Code blocks","text":"<p>To show a sample configuration file, use the <code>code-block</code> directive:</p> <pre><code>.. code-block:: yaml\n\n# Sample configuration entry\nswitch:\n    - platform: gpio\n    name: \"Relay #42\"\n    pin: GPIO13\n</code></pre> <pre><code># Sample configuration entry\nswitch:\n    - platform: gpio\n    name: \"Relay #42\"\n    pin: GPIO13\n</code></pre> <p>!!! note::     Please note the empty line after the <code>code-block</code> directive. That is necessary.</p>"},{"location":"contributing/component_documentation/syntax/#images","title":"Images","text":"<p>To show images, use the <code>figure</code> directive:</p> <pre><code>.. figure:: images/dashboard_states.png\n    :align: center\n    :width: 40.0%\n\n    Optional figure caption.\n</code></pre> <p></p> <p>Note</p> <p>All images in the documentation need to be as small as possible to ensure fast page load times. For normal figures the maximum size should be at most about 1000x800 px or so. Additionally, please use online tools like https://tinypng.com/ or https://tinyjpg.com/ to further compress images.</p>"},{"location":"contributing/component_documentation/syntax/#notes-and-warnings","title":"Notes and warnings","text":"<p>You can create simple notes and warnings using the <code>note</code> and <code>warning</code> directives:</p> <pre><code>.. note::\n\n    This is a note.\n\n.. warning::\n\n    This is a warning.\n</code></pre> <p>Note</p> <p>This is a note.</p> <p>Warning</p> <p>This is a warning.</p>"},{"location":"contributing/component_documentation/syntax/#italic-and-boldface-font-families","title":"Italic and boldface font families","text":"<p>To italicize text, use one asterisk around the text.</p> <p>To put a strong emphasis on a piece of text, put two asterisks around it.</p> <pre><code>    *This is italicized.* (A weird word...)\n    **This is very important.**\n</code></pre> <p>This is italicized. (A weird word...) This is very important.</p>"},{"location":"contributing/component_documentation/syntax/#ordered-and-unordered-list","title":"Ordered and unordered list","text":"<p>The syntax for lists in RST is more or less the same as in Markdown:</p> <pre><code>- Unordered item\n  - Unordered sub-item\n- Item with a very long text so that it does not fully fit in a single line and\n    must be split up into multiple lines.\n</code></pre> <ul> <li>Unordered item</li> <li>Unordered sub-item</li> <li>Item with a very long text so that it does not fully fit in a single line and must be split up into multiple lines.</li> </ul> <pre><code>1 Ordered item #1\n  # sub ordered item\n2 Ordered item #2\n</code></pre> <ol> <li>Ordered item #1<ol> <li>sub ordered item</li> </ol> </li> <li>Ordered item #2</li> </ol>"},{"location":"contributing/component_documentation/syntax/#imgtable","title":"imgtable","text":"<p>ESPHome uses a custom RST directive to show the table on the front page (see</p> <p>index.rst. New pages need to be added to the <code>imgtable</code> list. The syntax is CSV with ,  (without RST),  (in top-level images/ directory),  (optional - short text to describe the component). The aspect ratio of these images should be 8:10 (or 10:8) but exceptions are possible. <p>Because these images are served on the main page, they need to be compressed heavily. SVGs are preferred over JPGs and JPGs should be max. 300x300px. If you have imagemagick installed, you can use this command to convert the thumbnail:</p> <pre><code>convert -sampling-factor 4:2:0 -strip -interlace Plane -quality 80% -resize 300x300 in.jpg out.jpg\n</code></pre>"},{"location":"guides/cli/","title":"Command Line Interface","text":""},{"location":"guides/cli/#base-usage","title":"Base Usage","text":"<p>ESPHome's command line interface always has the following format</p> <pre><code>esphome [OPTIONS] &lt;COMMAND&gt; &lt;CONFIGURATION...&gt; [ARGUMENTS]\n</code></pre>"},{"location":"guides/cli/#esphome-base-options","title":"esphome base options","text":""},{"location":"guides/cli/#option-h-or-help","title":"Option <code>-h</code> or <code>--help</code>","text":"<p>Output possible  and [arguments]. <p>Note</p> <p>You can also use <code>--help</code> for any command to get arguments specific to that command.</p> <pre><code>esphome &lt;some_command&gt; --help\n</code></pre>"},{"location":"guides/cli/#option-v-or-verbose","title":"Option <code>-v</code> or <code>--verbose</code>","text":"<p>Enable verbose esphome logs.</p>"},{"location":"guides/cli/#option-q-or-quiet","title":"Option <code>-q</code> or <code>--quiet</code>","text":"<p>Disable all esphome logs.</p>"},{"location":"guides/cli/#option-s-or-substitution-key-value","title":"Option <code>-s</code> or <code>--substitution KEY VALUE</code>","text":"<p>(can be issued multiple times)</p> <p>Defines or overrides substitution KEY with value VALUE.</p> <p>Please see command line substitutions for details.</p>"},{"location":"guides/cli/#esphome-commands","title":"esphome commands","text":"<p>!!note     You can specify multiple configuration files in the command line interface for some commands,     just list all files after the  like so: <pre><code>```console\nesphome run livingroom.yaml kitchen.yaml\n```\n</code></pre>"},{"location":"guides/cli/#run-command","title":"<code>run</code> Command","text":"<p>The <code>esphome run &lt;CONFIG&gt;</code> command is the most common command for ESPHome. It</p> <ul> <li>Validates the configuration</li> <li>Compiles a firmware</li> <li>Uploads the firmware (over OTA or USB)</li> <li>Starts the log view</li> </ul> <pre><code>esphome run [--device UPLOAD_PORT] [--no-logs] [--topic TOPIC] [--username USERNAME] [--password PASSWORD] [--client-id CLIENT_ID] [--host-port HOST_PORT] &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#option-device-upload_port","title":"Option <code>--device UPLOAD_PORT</code>","text":"<p>Manually specify the upload port/IP to use. For example <code>/dev/cu.SLAB_USBtoUART</code>, or <code>192.168.1.176</code> to perform an OTA.</p>"},{"location":"guides/cli/#option-no-logs","title":"Option <code>--no-logs</code>","text":"<p>Disable starting log view.</p>"},{"location":"guides/cli/#option-topic-topic","title":"Option <code>--topic TOPIC</code>","text":"<p>Manually set the topic to subscribe to for MQTT logs (defaults to the one in the configuration).</p>"},{"location":"guides/cli/#option-username-username","title":"Option <code>--username USERNAME</code>","text":"<p>Manually set the username to subscribe with for MQTT logs (defaults to the one in the configuration).</p>"},{"location":"guides/cli/#option-password-password","title":"Option <code>--password PASSWORD</code>","text":"<p>Manually set the password to subscribe with for MQTT logs (defaults to the one in the configuration).</p>"},{"location":"guides/cli/#option-client-id-client_id","title":"Option <code>--client-id CLIENT_ID</code>","text":"<p>Manually set the client ID to subscribe with for MQTT logs (defaults to a randomly chosen one).</p>"},{"location":"guides/cli/#option-host-port-host_port","title":"Option <code>--host-port HOST_PORT</code>","text":"<p>Specify the host port to use for legacy Over the Air uploads.</p>"},{"location":"guides/cli/#config-command","title":"<code>config</code> Command","text":"<p>The <code>esphome config &lt;CONFIG&gt;</code> validates the configuration and displays the validation result.</p> <pre><code>esphome config &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#compile-command","title":"<code>compile</code> Command","text":"<p>The <code>esphome compile &lt;CONFIG&gt;</code> validates the configuration and compiles the firmware.</p> <pre><code>esphome compile [--only-generate] &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#option-only-generate","title":"Option <code>--only-generate</code>","text":"<p>If set, only generates the C++ source code and does not compile the firmware.</p>"},{"location":"guides/cli/#upload-command","title":"<code>upload</code> Command","text":"<p>The <code>esphome upload &lt;CONFIG&gt;</code> validates the configuration and uploads the most recent firmware build.</p> <pre><code>esphome upload [--device UPLOAD_PORT] [--host-port HOST_PORT] &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#option-device-upload_port_1","title":"Option <code>--device UPLOAD_PORT</code>","text":"<p>Manually specify the upload port/IP address to use. For example <code>/dev/cu.SLAB_USBtoUART</code>, or <code>192.168.1.176</code> to perform an OTA.</p>"},{"location":"guides/cli/#option-host-port-host_port_1","title":"Option <code>--host-port HOST_PORT</code>","text":"<p>Specify the host port to use for legacy Over the Air uploads.</p>"},{"location":"guides/cli/#clean-mqtt-command","title":"<code>clean-mqtt</code> Command","text":"<p>The <code>esphome clean-mqtt &lt;CONFIG&gt;</code> cleans retained MQTT discovery messages from the MQTT broker. See .</p> <pre><code>esphome clean-mqtt [--topic TOPIC] [--username USERNAME] [--password PASSWORD] [--client-id CLIENT_ID] &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#option-topic-topic_1","title":"Option <code>--topic TOPIC</code>","text":"<p>Manually set the topic to clean retained messages from (defaults to the MQTT discovery topic of the node).</p>"},{"location":"guides/cli/#option-username-username_1","title":"Option <code>--username USERNAME</code>","text":"<p>Manually set the username to subscribe with.</p>"},{"location":"guides/cli/#option-password-password_1","title":"Option <code>--password PASSWORD</code>","text":"<p>Manually set the password to subscribe with.</p>"},{"location":"guides/cli/#option-client-id-client_id_1","title":"Option <code>--client-id CLIENT_ID</code>","text":"<p>Manually set the client ID to subscribe with.</p>"},{"location":"guides/cli/#wizard-command","title":"<code>wizard</code> Command","text":"<p>The <code>esphome wizard &lt;CONFIG&gt;</code> command starts the ESPHome configuration creation wizard.</p> <pre><code>esphome wizard &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#mqtt-fingerprint-command","title":"<code>mqtt-fingerprint</code> Command","text":"<p>The <code>esphome mqtt-fingerprint &lt;CONFIG&gt;</code> command shows the MQTT SSL fingerprints of the remote used for SSL MQTT connections. See :ref:<code>mqtt-ssl_fingerprints</code>.</p> <pre><code>esphome mqtt-fingerprint &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#version-command","title":"<code>version</code> Command","text":"<p>The <code>esphome version</code> command shows the current ESPHome version and exits.</p> <pre><code>esphome version\n</code></pre>"},{"location":"guides/cli/#clean-command","title":"<code>clean</code> Command","text":"<p>The <code>esphome clean &lt;CONFIG&gt;</code> command cleans all build files and can help with some build issues.</p> <pre><code>esphome clean &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#dashboard-command","title":"<code>dashboard</code> Command","text":"<p>The <code>esphome dashboard &lt;CONFIG&gt;</code> command starts the ESPHome dashboard server for using ESPHome through a graphical user interface. This command accepts a configuration directory instead of a single configuration file.</p> <pre><code>esphome dashboard [--port PORT] [--username USERNAME] [--password PASSWORD] [--open-ui] &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#option-port-port","title":"Option <code>--port PORT</code>","text":"<p>Manually set the HTTP port to open connections on (defaults to 6052)</p>"},{"location":"guides/cli/#option-username-username_2","title":"Option <code>--username USERNAME</code>","text":"<p>The optional username to require for authentication.</p>"},{"location":"guides/cli/#option-password-password_2","title":"Option <code>--password PASSWORD</code>","text":"<p>The optional password to require for authentication.</p>"},{"location":"guides/cli/#option-open-ui","title":"Option <code>--open-ui</code>","text":"<p>If set, opens the dashboard UI in a browser once the server is up and running.</p>"},{"location":"guides/cli/#logs-command","title":"<code>logs</code> Command","text":"<p>The <code>esphome logs &lt;CONFIG&gt;</code> command validates the configuration and shows all logs.</p> <pre><code>esphome logs [--topic TOPIC] [--username USERNAME] [--password PASSWORD] [--client-id CLIENT_ID] [--device SERIAL_PORT] &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#option-topic-topic_2","title":"Option <code>--topic TOPIC</code>","text":"<p>Manually set the topic to subscribe to.</p>"},{"location":"guides/cli/#option-username-username_3","title":"Option <code>--username USERNAME</code>","text":"<p>Manually set the username.</p>"},{"location":"guides/cli/#option-password-password_3","title":"Option <code>--password PASSWORD</code>","text":"<p>Manually set the password.</p>"},{"location":"guides/cli/#option-client-id-client_id_2","title":"Option <code>--client-id CLIENT_ID</code>","text":"<p>Manually set the client id.</p>"},{"location":"guides/cli/#option-device-serial_port","title":"Option <code>--device SERIAL_PORT</code>","text":"<p>Manually specify a serial port/IP to use. For example <code>/dev/cu.SLAB_USBtoUART</code>.</p>"},{"location":"guides/cli/#using-bash-or-zsh-auto-completion","title":"Using Bash or ZSH auto-completion","text":"<p>ESPHome's command line interface provides the ability to use auto-completion features provided by Bash or ZSH.</p> <p>You can register ESPHome for auto-completion by adding the following to your ~/.bashrc file:</p> <pre><code>eval \"$(register-python-argcomplete esphome)\"\n</code></pre> <p>For more information, see argcomplete documentation.</p>"},{"location":"guides/creators/","title":"Sharing devices","text":""},{"location":"guides/creators/#example-configuration","title":"Example configuration","text":"<pre><code>    # These substitutions allow the end user to override certain values\n    substitutions:\n      name: \"project-template\"\n      friendly_name: \"Project Template\"\n\n    esphome:\n      name: \"${name}\"\n      # Friendly names are used where appropriate in Home Assistant\n      friendly_name: \"${friendly_name}\"\n      # Automatically add the mac address to the name\n      # so you can use a single firmware for all devices\n      name_add_mac_suffix: true\n\n      # This will allow for (future) project identification,\n      # configuration and updates.\n      project:\n        name: esphome.project-template\n        version: \"1.0\"\n\n    # To be able to get logs from the device via serial and api.\n    logger:\n\n    # API is a requirement of the dashboard import.\n    api:\n\n    # OTA is required for Over-the-Air updating\n    ota:\n\n    # This should point to the public location of this yaml file.\n    dashboard_import:\n      package_import_url: github://esphome/esphome-project-template/project-template-esp32.yaml@v6\n      import_full_config: false # or true\n\n    wifi:\n      # Set up a wifi access point\n      ap:\n        password: \"12345678\"\n\n    # In combination with the `ap` this allows the user\n    # to provision wifi credentials to the device.\n    captive_portal:\n\n    # Sets up Bluetooth LE (Only on ESP32) to allow the user\n    # to provision wifi credentials to the device.\n    esp32_improv:\n      authorizer: none\n\n    # Sets up the improv via serial client for Wi-Fi provisioning\n    improv_serial:\n      next_url: https://example.com/project-template/manual?ip={{ip_address}}&amp;name={{device_name}}&amp;version={{esphome_version}}\n</code></pre>"},{"location":"guides/creators/#relevant-documentation","title":"Relevant Documentation","text":"<ul> <li><code>name_add_mac_suffix</code> - :ref:<code>esphome-mac_suffix</code></li> <li><code>project</code> - :ref:<code>esphome-creators_project</code></li> <li><code>esp32_improv</code> - :doc:<code>/components/esp32_improv</code></li> <li><code>captive_portal</code> - :doc:<code>/components/captive_portal</code></li> <li><code>wifi</code> -&gt; <code>ap</code> allows you to flash a device that will not contain any   credentials and they must be set by the user via either the <code>ap</code> + <code>captive_portal</code> or   the <code>esp32_improv</code> / <code>improv_serial</code> components.</li> <li> <p><code>dashboard_import</code>     .. note::</p> <pre><code>The :ref:`esphome-creators_project` above is required for adoption to work in the Dashboard.\n</code></pre> <ul> <li><code>package_import_url</code> - This should point to the public repository containing   the configuration for the device so that the user's ESPHome dashboard can autodetect this device and   create a minimal YAML using :ref:<code>config-git_packages</code>.</li> <li><code>import_full_config</code> - This signals if ESPHome should download the entire YAML file as the user's config   YAML instead of referencing the package. Set this to <code>true</code> if you are creating a tutorial to let users   easily tweak the whole configuration or be able to uncomment follow-up tutorial steps.</li> <li><code>improv_serial</code> - :doc:<code>/components/improv_serial</code></li> </ul> </li> </ul>"},{"location":"guides/creators/#see-also","title":"See Also","text":"<ul> <li>:ghedit:<code>Edit</code></li> </ul>"},{"location":"guides/typography/","title":"Heading 1","text":""},{"location":"guides/typography/#heading-2","title":"Heading 2","text":""},{"location":"guides/typography/#heading-3","title":"Heading 3","text":""},{"location":"guides/typography/#heading-4","title":"Heading 4","text":""},{"location":"guides/typography/#heading-5","title":"Heading 5","text":""},{"location":"guides/typography/#heading-6","title":"Heading 6","text":""},{"location":"guides/typography/#typography","title":"Typography","text":"<p>This is an example inline link.  This is bold and italic. While this is <code>code block()</code> and following is a <code>pre</code> tag</p> <pre><code>print 'this is pre tag'\n</code></pre>"},{"location":"guides/typography/#following-is-the-syntax-highlighted-code-block","title":"Following is the syntax highlighted code block","text":"<pre><code>func getCookie(name string, r interface{}) (*http.Cookie, error) {\n    rd := r.(*http.Request)\n    cookie, err := rd.Cookie(name)\n    if err != nil {\n        return nil, err\n    }\n    return cookie, nil\n}\n</code></pre> <pre><code>title: \"Typography - Test for features\"\ndate: 2018-03-18T12:13:38+05:30\ndescription: List of all possibilities of Markdown\nmenu:\n  main:\n    parent: guide\n    weight: 4\n\ntags: typography\n</code></pre>"},{"location":"guides/typography/#blockquotes","title":"blockquotes","text":"<p>This is blockquote, Will make it better now</p> <p>'I want to do with you what spring does with the cherry trees.' cited ~Pablo Neruda*</p> <p>Et harum quidem rerum facilis est et expeditasi distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihilse impedit</p>"},{"location":"guides/typography/#unordered-list","title":"Unordered list","text":"<ul> <li>Red</li> <li>Green</li> <li>Blue</li> </ul> <p>Ordered list</p> <ol> <li>Red</li> <li>Green</li> <li>Blue</li> </ol> <pre><code>        .. _my-reference-label:\n\n        Section to cross-reference\n        --------------------------\n\n        See :ref:`my-reference-label`, also see :doc:`/components/switch/gpio`.\n        :doc:`Using custom text &lt;/components/switch/gpio&gt;`.\n</code></pre> <pre><code>// Markdown extra adds un-indented code blocks too\n\nif (this_is_more_code == true &amp;&amp; !indented) {\n    // tild wrapped code blocks, also not indented\n}\n</code></pre> <p>Text with two trailing spaces (on the right) can be used for things like poems</p>"},{"location":"guides/typography/#horizontal-rules","title":"Horizontal rules","text":"<p>This is a div wrapping some Markdown plus.  Without the DIV attribute, it ignores the block.</p>"},{"location":"guides/typography/#markdown-plus-tables","title":"Markdown plus tables","text":"Header Header Right Cell Cell $10 Cell Cell $20 <ul> <li>Outer pipes on tables are optional</li> <li>Colon used for alignment (right versus left)</li> </ul>"},{"location":"guides/typography/#markdown-plus-definition-lists","title":"Markdown plus definition lists","text":"Bottled water $ 1.25 $ 1.55 (Large) Milk Pop $ 1.75 <ul> <li>Multiple definitions and terms are possible</li> <li>Definitions can include multiple paragraphs too</li> </ul> <p>[ABBR]: Markdown plus abbreviations (produces an  tag) <p>Table (Source: \u4e3a\u4ec0\u4e48\u6709\u4e9b\u6c49\u5b57\u5728\u65e5\u8bed\u4e2d\u4f1a\u8bfb\u6210\u4e24\u62cd)</p> \u6c49\u8bed\u666e\u901a\u8bdd \u7ca4\u8bed \u65e5\u8bed \u5199\u4f5c \u8d1d\u514b\u6c49\u59c6 \u78a7\u54b8 \u30d9\u30c3\u30ab\u30e0 \u8bfb\u4f5c bei ke han mu bik ham Be kka mu"},{"location":"references/components/touchscreen/","title":"Introduction","text":"<p>The renewed touchscreen component makes it easier for touchscreen drivers (touchscreen platform components) to interact with esphome. The driver should only setup the touchscreen controller and read the current touches. All other other task are handled by the touchscreen component.</p> <p>This renewed touchscreen has now a beter management for single and multi touch controller.</p> <p>To create a new touchscreen driver There are 2 methods (functions) to override in the platform component:</p> <p>1 the <code>setup()</code> method: here you set the needed pins and the minimal maximal coordinates that the touchscreen outputs and when an interrupt_pin is used call:     <pre><code>  this-&gt;attach_interrupt_(irq_pin_, esphome::gpio::InterruptType type);\n</code></pre>     and dont forget to set the raw minimal and maximal values that the touchscreen sends out.     <pre><code>  this-&gt;set_calibration(0, controller_max_x, 0, controller_max_y);\n</code></pre></p> <p>2 the <code>update_touches()</code> method: Here you readout the the touches from the touchscreen and add them to the touchscreen component by call:     <pre><code>  this-&gt;set_raw_touch_position_(touch_id, x_raw, y_raw[, z_raw]);\n</code></pre>     Where <code>touch_id</code> is an unique touch reference given by the touchscreen controller. Or 0 by a single touch controller. The <code>z_raw</code> is optional and is used for the touch pressure when available.</p> <p>When the controller is not ready to return the touches you can set <code>this-&gt;skip_update_ = true;</code>, This will notify the touchscreen component that noting will be changed and that it needs to try in next <code>loop()</code>.</p>"},{"location":"references/python%20API%27s/CORE%20API/","title":"CORE API","text":""},{"location":"references/python%20API%27s/CORE%20API/#CORE","title":"CORE","text":""},{"location":"references/python%20API%27s/CORE%20API/#CORE.CORE","title":"CORE  <code>module-attribute</code>","text":"<pre><code>CORE = EsphomeCore()\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.LAMBDA_PROG","title":"LAMBDA_PROG  <code>module-attribute</code>","text":"<pre><code>LAMBDA_PROG = compile(\n    \"id\\\\(\\\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\\\s*\\\\)(\\\\.?)\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.AutoLoad","title":"AutoLoad","text":"<p>             Bases: <code>OrderedDict</code></p>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.Define","title":"Define","text":"<pre><code>Define(name, value=None)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def __init__(self, name, value=None):\n    self.name = name\n    self.value = value\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.Define.as_build_flag","title":"as_build_flag  <code>property</code>","text":"<pre><code>as_build_flag\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.Define.as_macro","title":"as_macro  <code>property</code>","text":"<pre><code>as_macro\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.Define.as_tuple","title":"as_tuple  <code>property</code>","text":"<pre><code>as_tuple\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.Define.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.Define.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value = value\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.DocumentLocation","title":"DocumentLocation","text":"<pre><code>DocumentLocation(document: str, line: int, column: int)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def __init__(self, document: str, line: int, column: int):\n    self.document: str = document\n    self.line: int = line\n    self.column: int = column\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.DocumentLocation.as_line_directive","title":"as_line_directive  <code>property</code>","text":"<pre><code>as_line_directive\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.DocumentLocation.column","title":"column  <code>instance-attribute</code>","text":"<pre><code>column: int = column\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.DocumentLocation.document","title":"document  <code>instance-attribute</code>","text":"<pre><code>document: str = document\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.DocumentLocation.line","title":"line  <code>instance-attribute</code>","text":"<pre><code>line: int = line\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.DocumentLocation.from_mark","title":"from_mark  <code>classmethod</code>","text":"<pre><code>from_mark(mark)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>@classmethod\ndef from_mark(cls, mark):\n    return cls(mark.name, mark.line, mark.column)\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.DocumentRange","title":"DocumentRange","text":"<pre><code>DocumentRange(\n    start_mark: DocumentLocation, end_mark: DocumentLocation\n)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def __init__(self, start_mark: DocumentLocation, end_mark: DocumentLocation):\n    self.start_mark: DocumentLocation = start_mark\n    self.end_mark: DocumentLocation = end_mark\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.DocumentRange.end_mark","title":"end_mark  <code>instance-attribute</code>","text":"<pre><code>end_mark: DocumentLocation = end_mark\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.DocumentRange.start_mark","title":"start_mark  <code>instance-attribute</code>","text":"<pre><code>start_mark: DocumentLocation = start_mark\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.DocumentRange.from_marks","title":"from_marks  <code>classmethod</code>","text":"<pre><code>from_marks(start_mark, end_mark)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>@classmethod\ndef from_marks(cls, start_mark, end_mark):\n    return cls(\n        DocumentLocation.from_mark(start_mark), DocumentLocation.from_mark(end_mark)\n    )\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EnumValue","title":"EnumValue","text":"<p>Special type used by ESPHome to mark enum values for cv.enum.</p>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EnumValue.enum_value","title":"enum_value  <code>property</code> <code>writable</code>","text":"<pre><code>enum_value\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore","title":"EsphomeCore","text":"<pre><code>EsphomeCore()\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def __init__(self):\n    # True if command is run from dashboard\n    self.dashboard = False\n    # True if command is run from vscode api\n    self.vscode = False\n    self.ace = False\n    # The name of the node\n    self.name: Optional[str] = None\n    # The friendly name of the node\n    self.friendly_name: Optional[str] = None\n    # The area / zone of the node\n    self.area: Optional[str] = None\n    # Additional data components can store temporary data in\n    # The first key to this dict should always be the integration name\n    self.data = {}\n    # The relative path to the configuration YAML\n    self.config_path: Optional[str] = None\n    # The relative path to where all build files are stored\n    self.build_path: Optional[str] = None\n    # The validated configuration, this is None until the config has been validated\n    self.config: Optional[\"ConfigType\"] = None\n    # The pending tasks in the task queue (mostly for C++ generation)\n    # This is a priority queue (with heapq)\n    # Each item is a tuple of form: (-priority, unique number, task)\n    self.event_loop = _FakeEventLoop()\n    # Task counter for pending tasks\n    self.task_counter = 0\n    # The variable cache, for each ID this holds a MockObj of the variable obj\n    self.variables: dict[str, \"MockObj\"] = {}\n    # A list of statements that go in the main setup() block\n    self.main_statements: list[\"Statement\"] = []\n    # A list of statements to insert in the global block (includes and global variables)\n    self.global_statements: list[\"Statement\"] = []\n    # A set of platformio libraries to add to the project\n    self.libraries: list[Library] = []\n    # A set of build flags to set in the platformio project\n    self.build_flags: set[str] = set()\n    # A set of defines to set for the compile process in esphome/core/defines.h\n    self.defines: set[\"Define\"] = set()\n    # A map of all platformio options to apply\n    self.platformio_options: dict[str, Union[str, list[str]]] = {}\n    # A set of strings of names of loaded integrations, used to find namespace ID conflicts\n    self.loaded_integrations = set()\n    # A set of component IDs to track what Component subclasses are declared\n    self.component_ids = set()\n    # Whether ESPHome was started in verbose mode\n    self.verbose = False\n    # Whether ESPHome was started in quiet mode\n    self.quiet = False\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.ace","title":"ace  <code>instance-attribute</code>","text":"<pre><code>ace = False\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.address","title":"address  <code>property</code>","text":"<pre><code>address: Optional[str]\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.area","title":"area  <code>instance-attribute</code>","text":"<pre><code>area: Optional[str] = None\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.build_flags","title":"build_flags  <code>instance-attribute</code>","text":"<pre><code>build_flags: set[str] = set()\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.build_path","title":"build_path  <code>instance-attribute</code>","text":"<pre><code>build_path: Optional[str] = None\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.comment","title":"comment  <code>property</code>","text":"<pre><code>comment: Optional[str]\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.component_ids","title":"component_ids  <code>instance-attribute</code>","text":"<pre><code>component_ids = set()\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config: Optional[ConfigType] = None\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.config_dir","title":"config_dir  <code>property</code>","text":"<pre><code>config_dir\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.config_filename","title":"config_filename  <code>property</code>","text":"<pre><code>config_filename\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.config_path","title":"config_path  <code>instance-attribute</code>","text":"<pre><code>config_path: Optional[str] = None\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.cpp_global_section","title":"cpp_global_section  <code>property</code>","text":"<pre><code>cpp_global_section\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.cpp_main_section","title":"cpp_main_section  <code>property</code>","text":"<pre><code>cpp_main_section\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.dashboard","title":"dashboard  <code>instance-attribute</code>","text":"<pre><code>dashboard = False\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data = {}\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.data_dir","title":"data_dir  <code>property</code>","text":"<pre><code>data_dir\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.defines","title":"defines  <code>instance-attribute</code>","text":"<pre><code>defines: set[Define] = set()\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.event_loop","title":"event_loop  <code>instance-attribute</code>","text":"<pre><code>event_loop = FakeEventLoop()\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.firmware_bin","title":"firmware_bin  <code>property</code>","text":"<pre><code>firmware_bin\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.friendly_name","title":"friendly_name  <code>instance-attribute</code>","text":"<pre><code>friendly_name: Optional[str] = None\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.global_statements","title":"global_statements  <code>instance-attribute</code>","text":"<pre><code>global_statements: list[Statement] = []\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.is_bk72xx","title":"is_bk72xx  <code>property</code>","text":"<pre><code>is_bk72xx\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.is_esp32","title":"is_esp32  <code>property</code>","text":"<pre><code>is_esp32\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.is_esp8266","title":"is_esp8266  <code>property</code>","text":"<pre><code>is_esp8266\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.is_host","title":"is_host  <code>property</code>","text":"<pre><code>is_host\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.is_libretiny","title":"is_libretiny  <code>property</code>","text":"<pre><code>is_libretiny\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.is_rp2040","title":"is_rp2040  <code>property</code>","text":"<pre><code>is_rp2040\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.is_rtl87xx","title":"is_rtl87xx  <code>property</code>","text":"<pre><code>is_rtl87xx\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.libraries","title":"libraries  <code>instance-attribute</code>","text":"<pre><code>libraries: list[Library] = []\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.loaded_integrations","title":"loaded_integrations  <code>instance-attribute</code>","text":"<pre><code>loaded_integrations = set()\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.main_statements","title":"main_statements  <code>instance-attribute</code>","text":"<pre><code>main_statements: list[Statement] = []\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: Optional[str] = None\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.platformio_options","title":"platformio_options  <code>instance-attribute</code>","text":"<pre><code>platformio_options: dict[str, Union[str, list[str]]] = {}\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.quiet","title":"quiet  <code>instance-attribute</code>","text":"<pre><code>quiet = False\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.target_framework","title":"target_framework  <code>property</code>","text":"<pre><code>target_framework\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.target_platform","title":"target_platform  <code>property</code>","text":"<pre><code>target_platform\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.task_counter","title":"task_counter  <code>instance-attribute</code>","text":"<pre><code>task_counter = 0\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.using_arduino","title":"using_arduino  <code>property</code>","text":"<pre><code>using_arduino\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.using_esp_idf","title":"using_esp_idf  <code>property</code>","text":"<pre><code>using_esp_idf\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.variables","title":"variables  <code>instance-attribute</code>","text":"<pre><code>variables: dict[str, MockObj] = {}\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.verbose","title":"verbose  <code>instance-attribute</code>","text":"<pre><code>verbose = False\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.vscode","title":"vscode  <code>instance-attribute</code>","text":"<pre><code>vscode = False\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.web_port","title":"web_port  <code>property</code>","text":"<pre><code>web_port: Optional[int]\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.add","title":"add","text":"<pre><code>add(expression)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def add(self, expression):\n    from esphome.cpp_generator import Expression, Statement, statement\n\n    if isinstance(expression, Expression):\n        expression = statement(expression)\n    if not isinstance(expression, Statement):\n        raise ValueError(\n            f\"Add '{expression}' must be expression or statement, not {type(expression)}\"\n        )\n\n    self.main_statements.append(expression)\n    _LOGGER.debug(\"Adding: %s\", expression)\n    return expression\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.add_build_flag","title":"add_build_flag","text":"<pre><code>add_build_flag(build_flag)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def add_build_flag(self, build_flag):\n    self.build_flags.add(build_flag)\n    _LOGGER.debug(\"Adding build flag: %s\", build_flag)\n    return build_flag\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.add_define","title":"add_define","text":"<pre><code>add_define(define)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def add_define(self, define):\n    if isinstance(define, str):\n        define = Define(define)\n    elif isinstance(define, Define):\n        pass\n    else:\n        raise ValueError(\n            f\"Define {define} must be string or Define, not {type(define)}\"\n        )\n    self.defines.add(define)\n    _LOGGER.debug(\"Adding define: %s\", define)\n    return define\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.add_global","title":"add_global","text":"<pre><code>add_global(expression)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def add_global(self, expression):\n    from esphome.cpp_generator import Expression, Statement, statement\n\n    if isinstance(expression, Expression):\n        expression = statement(expression)\n    if not isinstance(expression, Statement):\n        raise ValueError(\n            f\"Add '{expression}' must be expression or statement, not {type(expression)}\"\n        )\n    self.global_statements.append(expression)\n    _LOGGER.debug(\"Adding global: %s\", expression)\n    return expression\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.add_job","title":"add_job","text":"<pre><code>add_job(func, *args, **kwargs)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def add_job(self, func, *args, **kwargs):\n    self.event_loop.add_job(func, *args, **kwargs)\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.add_library","title":"add_library","text":"<pre><code>add_library(library)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def add_library(self, library):\n    if not isinstance(library, Library):\n        raise ValueError(\n            f\"Library {library} must be instance of Library, not {type(library)}\"\n        )\n    for other in self.libraries[:]:\n        if other.name is None or library.name is None:\n            continue\n        library_name = (\n            library.name if \"/\" not in library.name else library.name.split(\"/\")[1]\n        )\n        other_name = (\n            other.name if \"/\" not in other.name else other.name.split(\"/\")[1]\n        )\n        if other_name != library_name:\n            continue\n        if other.repository is not None:\n            if library.repository is None or other.repository == library.repository:\n                # Other is using a/the same repository, takes precedence\n                break\n            raise ValueError(\n                f\"Adding named Library with repository failed! Libraries {library} and {other} \"\n                \"requested with conflicting repositories!\"\n            )\n\n        if library.repository is not None:\n            # This is more specific since its using a repository\n            self.libraries.remove(other)\n            continue\n\n        if library.version is None:\n            # Other requirement is more specific\n            break\n        if other.version is None:\n            # Found more specific version requirement\n            self.libraries.remove(other)\n            continue\n        if other.version == library.version:\n            break\n\n        raise ValueError(\n            f\"Version pinning failed! Libraries {library} and {other} \"\n            \"requested with conflicting versions!\"\n        )\n    else:\n        _LOGGER.debug(\"Adding library: %s\", library)\n        self.libraries.append(library)\n    return library\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.add_platformio_option","title":"add_platformio_option","text":"<pre><code>add_platformio_option(\n    key: str, value: Union[str, list[str]]\n) -&gt; None\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def add_platformio_option(self, key: str, value: Union[str, list[str]]) -&gt; None:\n    new_val = value\n    old_val = self.platformio_options.get(key)\n    if isinstance(old_val, list):\n        assert isinstance(value, list)\n        new_val = old_val + value\n    self.platformio_options[key] = new_val\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.flush_tasks","title":"flush_tasks","text":"<pre><code>flush_tasks()\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def flush_tasks(self):\n    try:\n        self.event_loop.flush_tasks()\n    except RuntimeError as e:\n        raise EsphomeError(str(e)) from e\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.get_variable","title":"get_variable  <code>async</code>","text":"<pre><code>get_variable(id) -&gt; MockObj\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>async def get_variable(self, id) -&gt; \"MockObj\":\n    if not isinstance(id, ID):\n        raise ValueError(f\"ID {id!r} must be of type ID!\")\n    # Fast path, check if already registered without awaiting\n    if id in self.variables:\n        return self.variables[id]\n    return await _FakeAwaitable(self._get_variable_generator(id))\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.get_variable_with_full_id","title":"get_variable_with_full_id  <code>async</code>","text":"<pre><code>get_variable_with_full_id(id: ID) -&gt; tuple[ID, MockObj]\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>async def get_variable_with_full_id(self, id: ID) -&gt; tuple[ID, \"MockObj\"]:\n    if not isinstance(id, ID):\n        raise ValueError(f\"ID {id!r} must be of type ID!\")\n    return await _FakeAwaitable(self._get_variable_with_full_id_generator(id))\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.has_id","title":"has_id","text":"<pre><code>has_id(id)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def has_id(self, id):\n    return id in self.variables\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.register_variable","title":"register_variable","text":"<pre><code>register_variable(id, obj)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def register_variable(self, id, obj):\n    if id in self.variables:\n        raise EsphomeError(f\"ID {id} is already registered\")\n    _LOGGER.debug(\"Registered variable %s of type %s\", id.id, id.type)\n    self.variables[id] = obj\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.relative_build_path","title":"relative_build_path","text":"<pre><code>relative_build_path(*path)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def relative_build_path(self, *path):\n    path_ = os.path.expanduser(os.path.join(*path))\n    return os.path.join(self.build_path, path_)\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.relative_config_path","title":"relative_config_path","text":"<pre><code>relative_config_path(*path)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def relative_config_path(self, *path):\n    path_ = os.path.expanduser(os.path.join(*path))\n    return os.path.join(self.config_dir, path_)\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.relative_internal_path","title":"relative_internal_path","text":"<pre><code>relative_internal_path(*path: str) -&gt; str\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def relative_internal_path(self, *path: str) -&gt; str:\n    return os.path.join(self.data_dir, *path)\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.relative_pioenvs_path","title":"relative_pioenvs_path","text":"<pre><code>relative_pioenvs_path(*path)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def relative_pioenvs_path(self, *path):\n    return self.relative_build_path(\".pioenvs\", *path)\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.relative_piolibdeps_path","title":"relative_piolibdeps_path","text":"<pre><code>relative_piolibdeps_path(*path)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def relative_piolibdeps_path(self, *path):\n    return self.relative_build_path(\".piolibdeps\", *path)\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.relative_src_path","title":"relative_src_path","text":"<pre><code>relative_src_path(*path)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def relative_src_path(self, *path):\n    return self.relative_build_path(\"src\", *path)\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeCore.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def reset(self):\n    from esphome.pins import PIN_SCHEMA_REGISTRY\n\n    self.dashboard = False\n    self.name = None\n    self.friendly_name = None\n    self.area = None\n    self.data = {}\n    self.config_path = None\n    self.build_path = None\n    self.config = None\n    self.event_loop = _FakeEventLoop()\n    self.task_counter = 0\n    self.variables = {}\n    self.main_statements = []\n    self.global_statements = []\n    self.libraries = []\n    self.build_flags = set()\n    self.defines = set()\n    self.platformio_options = {}\n    self.loaded_integrations = set()\n    self.component_ids = set()\n    PIN_SCHEMA_REGISTRY.reset()\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.EsphomeError","title":"EsphomeError","text":"<p>             Bases: <code>Exception</code></p> <p>General ESPHome exception occurred.</p>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.HexInt","title":"HexInt","text":"<p>             Bases: <code>int</code></p>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.ID","title":"ID","text":"<pre><code>ID(id, is_declaration=False, type=None, is_manual=None)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def __init__(self, id, is_declaration=False, type=None, is_manual=None):\n    self.id = id\n    if is_manual is None:\n        self.is_manual = id is not None\n    else:\n        self.is_manual = is_manual\n    self.is_declaration = is_declaration\n    self.type: Optional[\"MockObjClass\"] = type\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.ID.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id = id\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.ID.is_declaration","title":"is_declaration  <code>instance-attribute</code>","text":"<pre><code>is_declaration = is_declaration\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.ID.is_manual","title":"is_manual  <code>instance-attribute</code>","text":"<pre><code>is_manual = id is not None\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.ID.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: Optional[MockObjClass] = type\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.ID.copy","title":"copy","text":"<pre><code>copy()\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def copy(self):\n    return ID(\n        self.id,\n        is_declaration=self.is_declaration,\n        type=self.type,\n        is_manual=self.is_manual,\n    )\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.ID.resolve","title":"resolve","text":"<pre><code>resolve(registered_ids)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def resolve(self, registered_ids):\n    from esphome.config_validation import RESERVED_IDS\n\n    if self.id is None:\n        base = str(self.type).replace(\"::\", \"_\").lower()\n        name = \"\".join(c for c in base if c.isalnum() or c == \"_\")\n        used = set(registered_ids) | set(RESERVED_IDS) | CORE.loaded_integrations\n        self.id = ensure_unique_string(name, used)\n    return self.id\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.IPAddress","title":"IPAddress","text":"<pre><code>IPAddress(*args)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def __init__(self, *args):\n    if len(args) != 4:\n        raise ValueError(\"IPAddress must consist of 4 items\")\n    self.args = args\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.IPAddress.args","title":"args  <code>instance-attribute</code>","text":"<pre><code>args = args\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.Lambda","title":"Lambda","text":"<pre><code>Lambda(value)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def __init__(self, value):\n    # pylint: disable=protected-access\n    if isinstance(value, Lambda):\n        self._value = value._value\n    else:\n        self._value = value\n    self._parts = None\n    self._requires_ids = None\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.Lambda.parts","title":"parts  <code>property</code>","text":"<pre><code>parts\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.Lambda.requires_ids","title":"requires_ids  <code>property</code>","text":"<pre><code>requires_ids\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.Lambda.value","title":"value  <code>property</code> <code>writable</code>","text":"<pre><code>value\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.Lambda.comment_remover","title":"comment_remover","text":"<pre><code>comment_remover(text)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def comment_remover(self, text):\n    def replacer(match):\n        s = match.group(0)\n        if s.startswith(\"/\"):\n            return \" \"  # note: a space and not an empty string\n        return s\n\n    pattern = re.compile(\n        r'//.*?$|/\\*.*?\\*/|\\'(?:\\\\.|[^\\\\\\'])*\\'|\"(?:\\\\.|[^\\\\\"])*\"',\n        re.DOTALL | re.MULTILINE,\n    )\n    return re.sub(pattern, replacer, text)\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.Library","title":"Library","text":"<pre><code>Library(name, version, repository=None)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def __init__(self, name, version, repository=None):\n    self.name = name\n    self.version = version\n    self.repository = repository\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.Library.as_lib_dep","title":"as_lib_dep  <code>property</code>","text":"<pre><code>as_lib_dep\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.Library.as_tuple","title":"as_tuple  <code>property</code>","text":"<pre><code>as_tuple\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.Library.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.Library.repository","title":"repository  <code>instance-attribute</code>","text":"<pre><code>repository = repository\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.Library.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version = version\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.MACAddress","title":"MACAddress","text":"<pre><code>MACAddress(*parts)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def __init__(self, *parts):\n    if len(parts) != 6:\n        raise ValueError(\"MAC Address must consist of 6 items\")\n    self.parts = parts\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.MACAddress.as_hex","title":"as_hex  <code>property</code>","text":"<pre><code>as_hex\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.MACAddress.parts","title":"parts  <code>instance-attribute</code>","text":"<pre><code>parts = parts\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriod","title":"TimePeriod","text":"<pre><code>TimePeriod(\n    nanoseconds=None,\n    microseconds=None,\n    milliseconds=None,\n    seconds=None,\n    minutes=None,\n    hours=None,\n    days=None,\n)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def __init__(\n    self,\n    nanoseconds=None,\n    microseconds=None,\n    milliseconds=None,\n    seconds=None,\n    minutes=None,\n    hours=None,\n    days=None,\n):\n    if days is not None:\n        if not is_approximately_integer(days):\n            frac_days, days = math.modf(days)\n            hours = (hours or 0) + frac_days * 24\n        self.days = int(round(days))\n    else:\n        self.days = None\n\n    if hours is not None:\n        if not is_approximately_integer(hours):\n            frac_hours, hours = math.modf(hours)\n            minutes = (minutes or 0) + frac_hours * 60\n        self.hours = int(round(hours))\n    else:\n        self.hours = None\n\n    if minutes is not None:\n        if not is_approximately_integer(minutes):\n            frac_minutes, minutes = math.modf(minutes)\n            seconds = (seconds or 0) + frac_minutes * 60\n        self.minutes = int(round(minutes))\n    else:\n        self.minutes = None\n\n    if seconds is not None:\n        if not is_approximately_integer(seconds):\n            frac_seconds, seconds = math.modf(seconds)\n            milliseconds = (milliseconds or 0) + frac_seconds * 1000\n        self.seconds = int(round(seconds))\n    else:\n        self.seconds = None\n\n    if milliseconds is not None:\n        if not is_approximately_integer(milliseconds):\n            frac_milliseconds, milliseconds = math.modf(milliseconds)\n            microseconds = (microseconds or 0) + frac_milliseconds * 1000\n        self.milliseconds = int(round(milliseconds))\n    else:\n        self.milliseconds = None\n\n    if microseconds is not None:\n        if not is_approximately_integer(microseconds):\n            frac_microseconds, microseconds = math.modf(microseconds)\n            nanoseconds = (nanoseconds or 0) + frac_microseconds * 1000\n        self.microseconds = int(round(microseconds))\n    else:\n        self.microseconds = None\n\n    if nanoseconds is not None:\n        if not is_approximately_integer(nanoseconds):\n            raise ValueError(\"Maximum precision is nanoseconds\")\n        self.nanoseconds = int(round(nanoseconds))\n    else:\n        self.nanoseconds = None\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriod.days","title":"days  <code>instance-attribute</code>","text":"<pre><code>days = int(round(days))\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriod.hours","title":"hours  <code>instance-attribute</code>","text":"<pre><code>hours = int(round(hours))\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriod.microseconds","title":"microseconds  <code>instance-attribute</code>","text":"<pre><code>microseconds = int(round(microseconds))\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriod.milliseconds","title":"milliseconds  <code>instance-attribute</code>","text":"<pre><code>milliseconds = int(round(milliseconds))\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriod.minutes","title":"minutes  <code>instance-attribute</code>","text":"<pre><code>minutes = int(round(minutes))\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriod.nanoseconds","title":"nanoseconds  <code>instance-attribute</code>","text":"<pre><code>nanoseconds = int(round(nanoseconds))\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriod.seconds","title":"seconds  <code>instance-attribute</code>","text":"<pre><code>seconds = int(round(seconds))\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriod.total_days","title":"total_days  <code>property</code>","text":"<pre><code>total_days\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriod.total_hours","title":"total_hours  <code>property</code>","text":"<pre><code>total_hours\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriod.total_microseconds","title":"total_microseconds  <code>property</code>","text":"<pre><code>total_microseconds\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriod.total_milliseconds","title":"total_milliseconds  <code>property</code>","text":"<pre><code>total_milliseconds\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriod.total_minutes","title":"total_minutes  <code>property</code>","text":"<pre><code>total_minutes\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriod.total_nanoseconds","title":"total_nanoseconds  <code>property</code>","text":"<pre><code>total_nanoseconds\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriod.total_seconds","title":"total_seconds  <code>property</code>","text":"<pre><code>total_seconds\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriod.as_dict","title":"as_dict","text":"<pre><code>as_dict()\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def as_dict(self):\n    out = OrderedDict()\n    if self.nanoseconds is not None:\n        out[\"nanoseconds\"] = self.nanoseconds\n    if self.microseconds is not None:\n        out[\"microseconds\"] = self.microseconds\n    if self.milliseconds is not None:\n        out[\"milliseconds\"] = self.milliseconds\n    if self.seconds is not None:\n        out[\"seconds\"] = self.seconds\n    if self.minutes is not None:\n        out[\"minutes\"] = self.minutes\n    if self.hours is not None:\n        out[\"hours\"] = self.hours\n    if self.days is not None:\n        out[\"days\"] = self.days\n    return out\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriodMicroseconds","title":"TimePeriodMicroseconds","text":"<pre><code>TimePeriodMicroseconds(\n    nanoseconds=None,\n    microseconds=None,\n    milliseconds=None,\n    seconds=None,\n    minutes=None,\n    hours=None,\n    days=None,\n)\n</code></pre> <p>             Bases: <code>TimePeriod</code></p> Source code in <code>CORE\\__init__.py</code> <pre><code>def __init__(\n    self,\n    nanoseconds=None,\n    microseconds=None,\n    milliseconds=None,\n    seconds=None,\n    minutes=None,\n    hours=None,\n    days=None,\n):\n    if days is not None:\n        if not is_approximately_integer(days):\n            frac_days, days = math.modf(days)\n            hours = (hours or 0) + frac_days * 24\n        self.days = int(round(days))\n    else:\n        self.days = None\n\n    if hours is not None:\n        if not is_approximately_integer(hours):\n            frac_hours, hours = math.modf(hours)\n            minutes = (minutes or 0) + frac_hours * 60\n        self.hours = int(round(hours))\n    else:\n        self.hours = None\n\n    if minutes is not None:\n        if not is_approximately_integer(minutes):\n            frac_minutes, minutes = math.modf(minutes)\n            seconds = (seconds or 0) + frac_minutes * 60\n        self.minutes = int(round(minutes))\n    else:\n        self.minutes = None\n\n    if seconds is not None:\n        if not is_approximately_integer(seconds):\n            frac_seconds, seconds = math.modf(seconds)\n            milliseconds = (milliseconds or 0) + frac_seconds * 1000\n        self.seconds = int(round(seconds))\n    else:\n        self.seconds = None\n\n    if milliseconds is not None:\n        if not is_approximately_integer(milliseconds):\n            frac_milliseconds, milliseconds = math.modf(milliseconds)\n            microseconds = (microseconds or 0) + frac_milliseconds * 1000\n        self.milliseconds = int(round(milliseconds))\n    else:\n        self.milliseconds = None\n\n    if microseconds is not None:\n        if not is_approximately_integer(microseconds):\n            frac_microseconds, microseconds = math.modf(microseconds)\n            nanoseconds = (nanoseconds or 0) + frac_microseconds * 1000\n        self.microseconds = int(round(microseconds))\n    else:\n        self.microseconds = None\n\n    if nanoseconds is not None:\n        if not is_approximately_integer(nanoseconds):\n            raise ValueError(\"Maximum precision is nanoseconds\")\n        self.nanoseconds = int(round(nanoseconds))\n    else:\n        self.nanoseconds = None\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriodMilliseconds","title":"TimePeriodMilliseconds","text":"<pre><code>TimePeriodMilliseconds(\n    nanoseconds=None,\n    microseconds=None,\n    milliseconds=None,\n    seconds=None,\n    minutes=None,\n    hours=None,\n    days=None,\n)\n</code></pre> <p>             Bases: <code>TimePeriod</code></p> Source code in <code>CORE\\__init__.py</code> <pre><code>def __init__(\n    self,\n    nanoseconds=None,\n    microseconds=None,\n    milliseconds=None,\n    seconds=None,\n    minutes=None,\n    hours=None,\n    days=None,\n):\n    if days is not None:\n        if not is_approximately_integer(days):\n            frac_days, days = math.modf(days)\n            hours = (hours or 0) + frac_days * 24\n        self.days = int(round(days))\n    else:\n        self.days = None\n\n    if hours is not None:\n        if not is_approximately_integer(hours):\n            frac_hours, hours = math.modf(hours)\n            minutes = (minutes or 0) + frac_hours * 60\n        self.hours = int(round(hours))\n    else:\n        self.hours = None\n\n    if minutes is not None:\n        if not is_approximately_integer(minutes):\n            frac_minutes, minutes = math.modf(minutes)\n            seconds = (seconds or 0) + frac_minutes * 60\n        self.minutes = int(round(minutes))\n    else:\n        self.minutes = None\n\n    if seconds is not None:\n        if not is_approximately_integer(seconds):\n            frac_seconds, seconds = math.modf(seconds)\n            milliseconds = (milliseconds or 0) + frac_seconds * 1000\n        self.seconds = int(round(seconds))\n    else:\n        self.seconds = None\n\n    if milliseconds is not None:\n        if not is_approximately_integer(milliseconds):\n            frac_milliseconds, milliseconds = math.modf(milliseconds)\n            microseconds = (microseconds or 0) + frac_milliseconds * 1000\n        self.milliseconds = int(round(milliseconds))\n    else:\n        self.milliseconds = None\n\n    if microseconds is not None:\n        if not is_approximately_integer(microseconds):\n            frac_microseconds, microseconds = math.modf(microseconds)\n            nanoseconds = (nanoseconds or 0) + frac_microseconds * 1000\n        self.microseconds = int(round(microseconds))\n    else:\n        self.microseconds = None\n\n    if nanoseconds is not None:\n        if not is_approximately_integer(nanoseconds):\n            raise ValueError(\"Maximum precision is nanoseconds\")\n        self.nanoseconds = int(round(nanoseconds))\n    else:\n        self.nanoseconds = None\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriodMinutes","title":"TimePeriodMinutes","text":"<pre><code>TimePeriodMinutes(\n    nanoseconds=None,\n    microseconds=None,\n    milliseconds=None,\n    seconds=None,\n    minutes=None,\n    hours=None,\n    days=None,\n)\n</code></pre> <p>             Bases: <code>TimePeriod</code></p> Source code in <code>CORE\\__init__.py</code> <pre><code>def __init__(\n    self,\n    nanoseconds=None,\n    microseconds=None,\n    milliseconds=None,\n    seconds=None,\n    minutes=None,\n    hours=None,\n    days=None,\n):\n    if days is not None:\n        if not is_approximately_integer(days):\n            frac_days, days = math.modf(days)\n            hours = (hours or 0) + frac_days * 24\n        self.days = int(round(days))\n    else:\n        self.days = None\n\n    if hours is not None:\n        if not is_approximately_integer(hours):\n            frac_hours, hours = math.modf(hours)\n            minutes = (minutes or 0) + frac_hours * 60\n        self.hours = int(round(hours))\n    else:\n        self.hours = None\n\n    if minutes is not None:\n        if not is_approximately_integer(minutes):\n            frac_minutes, minutes = math.modf(minutes)\n            seconds = (seconds or 0) + frac_minutes * 60\n        self.minutes = int(round(minutes))\n    else:\n        self.minutes = None\n\n    if seconds is not None:\n        if not is_approximately_integer(seconds):\n            frac_seconds, seconds = math.modf(seconds)\n            milliseconds = (milliseconds or 0) + frac_seconds * 1000\n        self.seconds = int(round(seconds))\n    else:\n        self.seconds = None\n\n    if milliseconds is not None:\n        if not is_approximately_integer(milliseconds):\n            frac_milliseconds, milliseconds = math.modf(milliseconds)\n            microseconds = (microseconds or 0) + frac_milliseconds * 1000\n        self.milliseconds = int(round(milliseconds))\n    else:\n        self.milliseconds = None\n\n    if microseconds is not None:\n        if not is_approximately_integer(microseconds):\n            frac_microseconds, microseconds = math.modf(microseconds)\n            nanoseconds = (nanoseconds or 0) + frac_microseconds * 1000\n        self.microseconds = int(round(microseconds))\n    else:\n        self.microseconds = None\n\n    if nanoseconds is not None:\n        if not is_approximately_integer(nanoseconds):\n            raise ValueError(\"Maximum precision is nanoseconds\")\n        self.nanoseconds = int(round(nanoseconds))\n    else:\n        self.nanoseconds = None\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriodNanoseconds","title":"TimePeriodNanoseconds","text":"<pre><code>TimePeriodNanoseconds(\n    nanoseconds=None,\n    microseconds=None,\n    milliseconds=None,\n    seconds=None,\n    minutes=None,\n    hours=None,\n    days=None,\n)\n</code></pre> <p>             Bases: <code>TimePeriod</code></p> Source code in <code>CORE\\__init__.py</code> <pre><code>def __init__(\n    self,\n    nanoseconds=None,\n    microseconds=None,\n    milliseconds=None,\n    seconds=None,\n    minutes=None,\n    hours=None,\n    days=None,\n):\n    if days is not None:\n        if not is_approximately_integer(days):\n            frac_days, days = math.modf(days)\n            hours = (hours or 0) + frac_days * 24\n        self.days = int(round(days))\n    else:\n        self.days = None\n\n    if hours is not None:\n        if not is_approximately_integer(hours):\n            frac_hours, hours = math.modf(hours)\n            minutes = (minutes or 0) + frac_hours * 60\n        self.hours = int(round(hours))\n    else:\n        self.hours = None\n\n    if minutes is not None:\n        if not is_approximately_integer(minutes):\n            frac_minutes, minutes = math.modf(minutes)\n            seconds = (seconds or 0) + frac_minutes * 60\n        self.minutes = int(round(minutes))\n    else:\n        self.minutes = None\n\n    if seconds is not None:\n        if not is_approximately_integer(seconds):\n            frac_seconds, seconds = math.modf(seconds)\n            milliseconds = (milliseconds or 0) + frac_seconds * 1000\n        self.seconds = int(round(seconds))\n    else:\n        self.seconds = None\n\n    if milliseconds is not None:\n        if not is_approximately_integer(milliseconds):\n            frac_milliseconds, milliseconds = math.modf(milliseconds)\n            microseconds = (microseconds or 0) + frac_milliseconds * 1000\n        self.milliseconds = int(round(milliseconds))\n    else:\n        self.milliseconds = None\n\n    if microseconds is not None:\n        if not is_approximately_integer(microseconds):\n            frac_microseconds, microseconds = math.modf(microseconds)\n            nanoseconds = (nanoseconds or 0) + frac_microseconds * 1000\n        self.microseconds = int(round(microseconds))\n    else:\n        self.microseconds = None\n\n    if nanoseconds is not None:\n        if not is_approximately_integer(nanoseconds):\n            raise ValueError(\"Maximum precision is nanoseconds\")\n        self.nanoseconds = int(round(nanoseconds))\n    else:\n        self.nanoseconds = None\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.TimePeriodSeconds","title":"TimePeriodSeconds","text":"<pre><code>TimePeriodSeconds(\n    nanoseconds=None,\n    microseconds=None,\n    milliseconds=None,\n    seconds=None,\n    minutes=None,\n    hours=None,\n    days=None,\n)\n</code></pre> <p>             Bases: <code>TimePeriod</code></p> Source code in <code>CORE\\__init__.py</code> <pre><code>def __init__(\n    self,\n    nanoseconds=None,\n    microseconds=None,\n    milliseconds=None,\n    seconds=None,\n    minutes=None,\n    hours=None,\n    days=None,\n):\n    if days is not None:\n        if not is_approximately_integer(days):\n            frac_days, days = math.modf(days)\n            hours = (hours or 0) + frac_days * 24\n        self.days = int(round(days))\n    else:\n        self.days = None\n\n    if hours is not None:\n        if not is_approximately_integer(hours):\n            frac_hours, hours = math.modf(hours)\n            minutes = (minutes or 0) + frac_hours * 60\n        self.hours = int(round(hours))\n    else:\n        self.hours = None\n\n    if minutes is not None:\n        if not is_approximately_integer(minutes):\n            frac_minutes, minutes = math.modf(minutes)\n            seconds = (seconds or 0) + frac_minutes * 60\n        self.minutes = int(round(minutes))\n    else:\n        self.minutes = None\n\n    if seconds is not None:\n        if not is_approximately_integer(seconds):\n            frac_seconds, seconds = math.modf(seconds)\n            milliseconds = (milliseconds or 0) + frac_seconds * 1000\n        self.seconds = int(round(seconds))\n    else:\n        self.seconds = None\n\n    if milliseconds is not None:\n        if not is_approximately_integer(milliseconds):\n            frac_milliseconds, milliseconds = math.modf(milliseconds)\n            microseconds = (microseconds or 0) + frac_milliseconds * 1000\n        self.milliseconds = int(round(milliseconds))\n    else:\n        self.milliseconds = None\n\n    if microseconds is not None:\n        if not is_approximately_integer(microseconds):\n            frac_microseconds, microseconds = math.modf(microseconds)\n            nanoseconds = (nanoseconds or 0) + frac_microseconds * 1000\n        self.microseconds = int(round(microseconds))\n    else:\n        self.microseconds = None\n\n    if nanoseconds is not None:\n        if not is_approximately_integer(nanoseconds):\n            raise ValueError(\"Maximum precision is nanoseconds\")\n        self.nanoseconds = int(round(nanoseconds))\n    else:\n        self.nanoseconds = None\n</code></pre>"},{"location":"references/python%20API%27s/CORE%20API/#CORE.is_approximately_integer","title":"is_approximately_integer","text":"<pre><code>is_approximately_integer(value)\n</code></pre> Source code in <code>CORE\\__init__.py</code> <pre><code>def is_approximately_integer(value):\n    if isinstance(value, int):\n        return True\n    return abs(value - round(value)) &lt; 0.001\n</code></pre>"},{"location":"references/python%20API%27s/generator/","title":"Generator","text":""},{"location":"references/python%20API%27s/generator/#cpp_generator","title":"cpp_generator","text":""},{"location":"references/python%20API%27s/generator/#cpp_generator.SafeExpType","title":"SafeExpType  <code>module-attribute</code>","text":"<pre><code>SafeExpType = Union[\n    Expression,\n    bool,\n    str,\n    str,\n    int,\n    float,\n    TimePeriod,\n    type[bool],\n    type[int],\n    type[float],\n    Sequence[Any],\n]\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.ArrayInitializer","title":"ArrayInitializer","text":"<pre><code>ArrayInitializer(*args: Any, multiline: bool = False)\n</code></pre> <p>             Bases: <code>Expression</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, *args: Any, multiline: bool = False):\n    self.multiline = multiline\n    self.args = []\n    for arg in args:\n        if arg is None:\n            continue\n        exp = safe_exp(arg)\n        self.args.append(exp)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.ArrayInitializer.args","title":"args  <code>instance-attribute</code>","text":"<pre><code>args = []\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.ArrayInitializer.multiline","title":"multiline  <code>instance-attribute</code>","text":"<pre><code>multiline = multiline\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.AssignmentExpression","title":"AssignmentExpression","text":"<pre><code>AssignmentExpression(type_, modifier, name, rhs)\n</code></pre> <p>             Bases: <code>Expression</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, type_, modifier, name, rhs):\n    self.type = type_\n    self.modifier = modifier\n    self.name = name\n    self.rhs = safe_exp(rhs)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.AssignmentExpression.modifier","title":"modifier  <code>instance-attribute</code>","text":"<pre><code>modifier = modifier\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.AssignmentExpression.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.AssignmentExpression.rhs","title":"rhs  <code>instance-attribute</code>","text":"<pre><code>rhs = safe_exp(rhs)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.AssignmentExpression.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type = type_\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.BinOpExpression","title":"BinOpExpression","text":"<pre><code>BinOpExpression(\n    lhs: SafeExpType, op: str, rhs: SafeExpType\n)\n</code></pre> <p>             Bases: <code>Expression</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, lhs: SafeExpType, op: str, rhs: SafeExpType):\n    self.lhs = safe_exp(lhs)\n    self.op = op\n    self.rhs = safe_exp(rhs)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.BinOpExpression.lhs","title":"lhs  <code>instance-attribute</code>","text":"<pre><code>lhs = safe_exp(lhs)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.BinOpExpression.op","title":"op  <code>instance-attribute</code>","text":"<pre><code>op = op\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.BinOpExpression.rhs","title":"rhs  <code>instance-attribute</code>","text":"<pre><code>rhs = safe_exp(rhs)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.BoolLiteral","title":"BoolLiteral","text":"<pre><code>BoolLiteral(binary: bool)\n</code></pre> <p>             Bases: <code>Literal</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, binary: bool):\n    super().__init__()\n    self.binary = binary\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.BoolLiteral.binary","title":"binary  <code>instance-attribute</code>","text":"<pre><code>binary = binary\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.CallExpression","title":"CallExpression","text":"<pre><code>CallExpression(base: Expression, *args: SafeExpType)\n</code></pre> <p>             Bases: <code>Expression</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, base: Expression, *args: SafeExpType):\n    self.base = base\n    if args and isinstance(args[0], TemplateArguments):\n        self.template_args = args[0]\n        args = args[1:]\n    else:\n        self.template_args = None\n    self.args = ExpressionList(*args)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.CallExpression.args","title":"args  <code>instance-attribute</code>","text":"<pre><code>args = ExpressionList(*args)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.CallExpression.base","title":"base  <code>instance-attribute</code>","text":"<pre><code>base = base\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.CallExpression.template_args","title":"template_args  <code>instance-attribute</code>","text":"<pre><code>template_args = args[0]\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.Expression","title":"Expression","text":"<p>             Bases: <code>ABC</code></p>"},{"location":"references/python%20API%27s/generator/#cpp_generator.ExpressionList","title":"ExpressionList","text":"<pre><code>ExpressionList(*args: Optional[SafeExpType])\n</code></pre> <p>             Bases: <code>Expression</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, *args: Optional[SafeExpType]):\n    # Remove every None on end\n    args = list(args)\n    while args and args[-1] is None:\n        args.pop()\n    self.args = [safe_exp(arg) for arg in args]\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.ExpressionList.args","title":"args  <code>instance-attribute</code>","text":"<pre><code>args = [safe_exp(arg) for arg in args]\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.ExpressionStatement","title":"ExpressionStatement","text":"<pre><code>ExpressionStatement(expression)\n</code></pre> <p>             Bases: <code>Statement</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, expression):\n    self.expression = safe_exp(expression)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.ExpressionStatement.expression","title":"expression  <code>instance-attribute</code>","text":"<pre><code>expression = safe_exp(expression)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.FloatLiteral","title":"FloatLiteral","text":"<pre><code>FloatLiteral(value: float)\n</code></pre> <p>             Bases: <code>Literal</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, value: float):\n    super().__init__()\n    self.f = value\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.FloatLiteral.f","title":"f  <code>instance-attribute</code>","text":"<pre><code>f = value\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.HexIntLiteral","title":"HexIntLiteral","text":"<pre><code>HexIntLiteral(i: int)\n</code></pre> <p>             Bases: <code>Literal</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, i: int):\n    super().__init__()\n    self.i = HexInt(i)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.HexIntLiteral.i","title":"i  <code>instance-attribute</code>","text":"<pre><code>i = HexInt(i)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.IntLiteral","title":"IntLiteral","text":"<pre><code>IntLiteral(i: int)\n</code></pre> <p>             Bases: <code>Literal</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, i: int):\n    super().__init__()\n    self.i = i\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.IntLiteral.i","title":"i  <code>instance-attribute</code>","text":"<pre><code>i = i\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.LambdaExpression","title":"LambdaExpression","text":"<pre><code>LambdaExpression(\n    parts,\n    parameters,\n    capture: str = \"=\",\n    return_type=None,\n    source=None,\n)\n</code></pre> <p>             Bases: <code>Expression</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(\n    self, parts, parameters, capture: str = \"=\", return_type=None, source=None\n):\n    self.parts = parts\n    if not isinstance(parameters, ParameterListExpression):\n        parameters = ParameterListExpression(*parameters)\n    self.parameters = parameters\n    self.source = source\n    self.capture = capture\n    self.return_type = safe_exp(return_type) if return_type is not None else None\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.LambdaExpression.capture","title":"capture  <code>instance-attribute</code>","text":"<pre><code>capture = capture\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.LambdaExpression.content","title":"content  <code>property</code>","text":"<pre><code>content\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.LambdaExpression.parameters","title":"parameters  <code>instance-attribute</code>","text":"<pre><code>parameters = parameters\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.LambdaExpression.parts","title":"parts  <code>instance-attribute</code>","text":"<pre><code>parts = parts\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.LambdaExpression.return_type","title":"return_type  <code>instance-attribute</code>","text":"<pre><code>return_type = (\n    safe_exp(return_type)\n    if return_type is not None\n    else None\n)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.LambdaExpression.source","title":"source  <code>instance-attribute</code>","text":"<pre><code>source = source\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.LineComment","title":"LineComment","text":"<pre><code>LineComment(value: str)\n</code></pre> <p>             Bases: <code>Statement</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, value: str):\n    self.value = value\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.LineComment.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value = value\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.Literal","title":"Literal","text":"<p>             Bases: <code>Expression</code></p>"},{"location":"references/python%20API%27s/generator/#cpp_generator.MockObj","title":"MockObj","text":"<pre><code>MockObj(base, op='.')\n</code></pre> <p>             Bases: <code>Expression</code></p> <p>A general expression that can be used to represent any value.</p> <p>Mostly consists of magic methods that allow ESPHome's codegen syntax.</p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, base, op=\".\"):\n    self.base = base\n    self.op = op\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.MockObj.base","title":"base  <code>instance-attribute</code>","text":"<pre><code>base = base\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.MockObj.new","title":"new  <code>property</code>","text":"<pre><code>new: MockObj\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.MockObj.op","title":"op  <code>instance-attribute</code>","text":"<pre><code>op = op\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.MockObj.using","title":"using  <code>property</code>","text":"<pre><code>using: MockObj\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.MockObj.class_","title":"class_","text":"<pre><code>class_(name: str, *parents: MockObjClass) -&gt; MockObjClass\n</code></pre> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def class_(self, name: str, *parents: \"MockObjClass\") -&gt; \"MockObjClass\":\n    op = \"\" if self.op == \"\" else \"::\"\n    return MockObjClass(f\"{self.base}{op}{name}\", \".\", parents=parents)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.MockObj.enum","title":"enum","text":"<pre><code>enum(name: str, is_class: bool = False) -&gt; MockObj\n</code></pre> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def enum(self, name: str, is_class: bool = False) -&gt; \"MockObj\":\n    return MockObjEnum(enum=name, is_class=is_class, base=self.base, op=self.op)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.MockObj.namespace","title":"namespace","text":"<pre><code>namespace(name: str) -&gt; MockObj\n</code></pre> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def namespace(self, name: str) -&gt; \"MockObj\":\n    return MockObj(f\"{self._}{name}\", \"::\")\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.MockObj.operator","title":"operator","text":"<pre><code>operator(name: str) -&gt; MockObj\n</code></pre> <p>Various other operations.</p> <p>Named operator because it's a C++ keyword and can't occur in valid code.</p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def operator(self, name: str) -&gt; \"MockObj\":\n    \"\"\"Various other operations.\n\n    Named operator because it's a C++ keyword and can't occur in valid code.\n    \"\"\"\n    if name == \"ref\":\n        return MockObj(f\"{self.base} &amp;\", \"\")\n    if name == \"ptr\":\n        return MockObj(f\"{self.base} *\", \"\")\n    if name == \"const_ptr\":\n        return MockObj(f\"{self.base} *const\", \"\")\n    if name == \"const\":\n        return MockObj(f\"const {self.base}\", \"\")\n    raise ValueError(\"Expected one of ref, ptr, const_ptr, const.\")\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.MockObj.struct","title":"struct","text":"<pre><code>struct(name: str) -&gt; MockObjClass\n</code></pre> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def struct(self, name: str) -&gt; \"MockObjClass\":\n    return self.class_(name)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.MockObj.template","title":"template","text":"<pre><code>template(*args: SafeExpType) -&gt; MockObj\n</code></pre> <p>Apply template parameters to this object.</p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def template(self, *args: SafeExpType) -&gt; \"MockObj\":\n    \"\"\"Apply template parameters to this object.\"\"\"\n    if len(args) != 1 or not isinstance(args[0], TemplateArguments):\n        args = TemplateArguments(*args)\n    else:\n        args = args[0]\n    return MockObj(f\"{self.base}{args}\")\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.MockObjClass","title":"MockObjClass","text":"<pre><code>MockObjClass(*args, **kwargs)\n</code></pre> <p>             Bases: <code>MockObj</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    parens = kwargs.pop(\"parents\")\n    MockObj.__init__(self, *args, **kwargs)\n    self._parents = []\n    for paren in parens:\n        if not isinstance(paren, MockObjClass):\n            raise ValueError\n        self._parents.append(paren)\n        # pylint: disable=protected-access\n        self._parents += paren._parents\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.MockObjClass.inherits_from","title":"inherits_from","text":"<pre><code>inherits_from(other: MockObjClass) -&gt; bool\n</code></pre> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def inherits_from(self, other: \"MockObjClass\") -&gt; bool:\n    if str(self) == str(other):\n        return True\n    for parent in self._parents:\n        if str(parent) == str(other):\n            return True\n    return False\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.MockObjClass.template","title":"template","text":"<pre><code>template(*args: SafeExpType) -&gt; MockObjClass\n</code></pre> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def template(self, *args: SafeExpType) -&gt; \"MockObjClass\":\n    if len(args) != 1 or not isinstance(args[0], TemplateArguments):\n        args = TemplateArguments(*args)\n    else:\n        args = args[0]\n    new_parents = self._parents[:]\n    new_parents.append(self)\n    return MockObjClass(f\"{self.base}{args}\", parents=new_parents)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.MockObjEnum","title":"MockObjEnum","text":"<pre><code>MockObjEnum(*args, **kwargs)\n</code></pre> <p>             Bases: <code>MockObj</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    self._enum = kwargs.pop(\"enum\")\n    self._is_class = kwargs.pop(\"is_class\")\n    base = kwargs.pop(\"base\")\n    if self._is_class:\n        base = f\"{base}::{self._enum}\"\n    kwargs[\"op\"] = \"::\"\n    kwargs[\"base\"] = base\n    MockObj.__init__(self, *args, **kwargs)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.ParameterExpression","title":"ParameterExpression","text":"<pre><code>ParameterExpression(type_, id_)\n</code></pre> <p>             Bases: <code>Expression</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, type_, id_):\n    self.type = safe_exp(type_)\n    self.id = id_\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.ParameterExpression.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id = id_\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.ParameterExpression.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type = safe_exp(type_)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.ParameterListExpression","title":"ParameterListExpression","text":"<pre><code>ParameterListExpression(\n    *parameters: Union[\n        ParameterExpression, tuple[SafeExpType, str]\n    ]\n)\n</code></pre> <p>             Bases: <code>Expression</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(\n    self, *parameters: Union[ParameterExpression, tuple[SafeExpType, str]]\n):\n    self.parameters = []\n    for parameter in parameters:\n        if not isinstance(parameter, ParameterExpression):\n            parameter = ParameterExpression(*parameter)\n        self.parameters.append(parameter)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.ParameterListExpression.parameters","title":"parameters  <code>instance-attribute</code>","text":"<pre><code>parameters = []\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.ProgmemAssignmentExpression","title":"ProgmemAssignmentExpression","text":"<pre><code>ProgmemAssignmentExpression(type_, name, rhs)\n</code></pre> <p>             Bases: <code>AssignmentExpression</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, type_, name, rhs):\n    super().__init__(type_, \"\", name, rhs)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.RawExpression","title":"RawExpression","text":"<pre><code>RawExpression(text: str)\n</code></pre> <p>             Bases: <code>Expression</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, text: str):\n    self.text = text\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.RawExpression.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text = text\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.RawStatement","title":"RawStatement","text":"<pre><code>RawStatement(text: str)\n</code></pre> <p>             Bases: <code>Statement</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, text: str):\n    self.text = text\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.RawStatement.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text = text\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.Statement","title":"Statement","text":"<p>             Bases: <code>ABC</code></p>"},{"location":"references/python%20API%27s/generator/#cpp_generator.StaticConstAssignmentExpression","title":"StaticConstAssignmentExpression","text":"<pre><code>StaticConstAssignmentExpression(type_, name, rhs)\n</code></pre> <p>             Bases: <code>AssignmentExpression</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, type_, name, rhs):\n    super().__init__(type_, \"\", name, rhs)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.StringLiteral","title":"StringLiteral","text":"<pre><code>StringLiteral(string: str)\n</code></pre> <p>             Bases: <code>Literal</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, string: str):\n    super().__init__()\n    self.string = string\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.StringLiteral.string","title":"string  <code>instance-attribute</code>","text":"<pre><code>string = string\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.StructInitializer","title":"StructInitializer","text":"<pre><code>StructInitializer(\n    base: Expression,\n    *args: tuple[str, Optional[SafeExpType]]\n)\n</code></pre> <p>             Bases: <code>Expression</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, base: Expression, *args: tuple[str, Optional[SafeExpType]]):\n    self.base = base\n    # TODO: args is always a Tuple, is this check required?\n    if not isinstance(args, OrderedDict):\n        args = OrderedDict(args)\n    self.args = OrderedDict()\n    for key, value in args.items():\n        if value is None:\n            continue\n        exp = safe_exp(value)\n        self.args[key] = exp\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.StructInitializer.args","title":"args  <code>instance-attribute</code>","text":"<pre><code>args = OrderedDict()\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.StructInitializer.base","title":"base  <code>instance-attribute</code>","text":"<pre><code>base = base\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.TemplateArguments","title":"TemplateArguments","text":"<pre><code>TemplateArguments(*args: SafeExpType)\n</code></pre> <p>             Bases: <code>Expression</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, *args: SafeExpType):\n    self.args = ExpressionList(*args)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.TemplateArguments.args","title":"args  <code>instance-attribute</code>","text":"<pre><code>args = ExpressionList(*args)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.UnaryOpExpression","title":"UnaryOpExpression","text":"<pre><code>UnaryOpExpression(op: str, exp: SafeExpType)\n</code></pre> <p>             Bases: <code>Expression</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, op: str, exp: SafeExpType):\n    self.op = op\n    self.exp = safe_exp(exp)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.UnaryOpExpression.exp","title":"exp  <code>instance-attribute</code>","text":"<pre><code>exp = safe_exp(exp)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.UnaryOpExpression.op","title":"op  <code>instance-attribute</code>","text":"<pre><code>op = op\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.VariableDeclarationExpression","title":"VariableDeclarationExpression","text":"<pre><code>VariableDeclarationExpression(type_, modifier, name)\n</code></pre> <p>             Bases: <code>Expression</code></p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def __init__(self, type_, modifier, name):\n    self.type = type_\n    self.modifier = modifier\n    self.name = name\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.VariableDeclarationExpression.modifier","title":"modifier  <code>instance-attribute</code>","text":"<pre><code>modifier = modifier\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.VariableDeclarationExpression.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.VariableDeclarationExpression.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type = type_\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.Pvariable","title":"Pvariable","text":"<pre><code>Pvariable(\n    id_: ID, rhs: SafeExpType, type_: MockObj = None\n) -&gt; MockObj\n</code></pre> <p>Declare a new pointer variable in the code generation.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>ID</code> <p>The ID used to declare the variable.</p> required <code>rhs</code> <code>SafeExpType</code> <p>The expression to place on the right hand side of the assignment.</p> required <code>type_</code> <code>MockObj</code> <p>Manually define a type for the variable, only use this when it's not possible to do so during config validation phase (for example because of template arguments).</p> <code>None</code> <p>Returns:</p> Type Description <code>MockObj</code> <p>The new variable as a MockObj.</p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def Pvariable(id_: ID, rhs: SafeExpType, type_: \"MockObj\" = None) -&gt; \"MockObj\":\n    \"\"\"Declare a new pointer variable in the code generation.\n\n    :param id_: The ID used to declare the variable.\n    :param rhs: The expression to place on the right hand side of the assignment.\n    :param type_: Manually define a type for the variable, only use this when it's not possible\n      to do so during config validation phase (for example because of template arguments).\n\n    :return: The new variable as a MockObj.\n    \"\"\"\n    rhs = safe_exp(rhs)\n    obj = MockObj(id_, \"-&gt;\")\n    if type_ is not None:\n        id_.type = type_\n    decl = VariableDeclarationExpression(id_.type, \"*\", id_)\n    CORE.add_global(decl)\n    assignment = AssignmentExpression(None, None, id_, rhs)\n    CORE.add(assignment)\n    CORE.register_variable(id_, obj)\n    return obj\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.add","title":"add","text":"<pre><code>add(expression: Union[Expression, Statement])\n</code></pre> <p>Add an expression to the codegen section.</p> <p>After this is called, the given given expression will show up in the setup() function after this has been called.</p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def add(expression: Union[Expression, Statement]):\n    \"\"\"Add an expression to the codegen section.\n\n    After this is called, the given given expression will\n    show up in the setup() function after this has been called.\n    \"\"\"\n    CORE.add(expression)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.add_build_flag","title":"add_build_flag","text":"<pre><code>add_build_flag(build_flag: str)\n</code></pre> <p>Add a global build flag to the compiler flags.</p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def add_build_flag(build_flag: str):\n    \"\"\"Add a global build flag to the compiler flags.\"\"\"\n    CORE.add_build_flag(build_flag)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.add_define","title":"add_define","text":"<pre><code>add_define(name: str, value: SafeExpType = None)\n</code></pre> <p>Add a global define to the auto-generated defines.h file.</p> <p>Optionally define a value to set this define to.</p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def add_define(name: str, value: SafeExpType = None):\n    \"\"\"Add a global define to the auto-generated defines.h file.\n\n    Optionally define a value to set this define to.\n    \"\"\"\n    if value is None:\n        CORE.add_define(Define(name))\n    else:\n        CORE.add_define(Define(name, safe_exp(value)))\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.add_global","title":"add_global","text":"<pre><code>add_global(expression: Union[SafeExpType, Statement])\n</code></pre> <p>Add an expression to the codegen global storage (above setup()).</p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def add_global(expression: Union[SafeExpType, Statement]):\n    \"\"\"Add an expression to the codegen global storage (above setup()).\"\"\"\n    CORE.add_global(expression)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.add_library","title":"add_library","text":"<pre><code>add_library(\n    name: str,\n    version: Optional[str],\n    repository: Optional[str] = None,\n)\n</code></pre> <p>Add a library to the codegen library storage.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the library (for example 'AsyncTCP')</p> required <code>version</code> <code>Optional[str]</code> <p>The version of the library, may be None.</p> required Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def add_library(name: str, version: Optional[str], repository: Optional[str] = None):\n    \"\"\"Add a library to the codegen library storage.\n\n    :param name: The name of the library (for example 'AsyncTCP')\n    :param version: The version of the library, may be None.\n    \"\"\"\n    CORE.add_library(Library(name, version, repository))\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.add_platformio_option","title":"add_platformio_option","text":"<pre><code>add_platformio_option(\n    key: str, value: Union[str, list[str]]\n)\n</code></pre> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def add_platformio_option(key: str, value: Union[str, list[str]]):\n    CORE.add_platformio_option(key, value)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.get_variable","title":"get_variable  <code>async</code>","text":"<pre><code>get_variable(id_: ID) -&gt; MockObj\n</code></pre> <p>Wait for the given ID to be defined in the code generation and return it as a MockObj.</p> <p>This is a coroutine, you need to await it with a 'await' expression!</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>ID</code> <p>The ID to retrieve</p> required <p>Returns:</p> Type Description <code>MockObj</code> <p>The variable as a MockObj.</p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>async def get_variable(id_: ID) -&gt; \"MockObj\":\n    \"\"\"\n    Wait for the given ID to be defined in the code generation and\n    return it as a MockObj.\n\n    This is a coroutine, you need to await it with a 'await' expression!\n\n    :param id_: The ID to retrieve\n    :return: The variable as a MockObj.\n    \"\"\"\n    return await CORE.get_variable(id_)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.get_variable_with_full_id","title":"get_variable_with_full_id  <code>async</code>","text":"<pre><code>get_variable_with_full_id(id_: ID) -&gt; tuple[ID, MockObj]\n</code></pre> <p>Wait for the given ID to be defined in the code generation and return it as a MockObj.</p> <p>This is a coroutine, you need to await it with a 'await' expression!</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>ID</code> <p>The ID to retrieve</p> required <p>Returns:</p> Type Description <code>tuple[ID, MockObj]</code> <p>The variable as a MockObj.</p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>async def get_variable_with_full_id(id_: ID) -&gt; tuple[ID, \"MockObj\"]:\n    \"\"\"\n    Wait for the given ID to be defined in the code generation and\n    return it as a MockObj.\n\n    This is a coroutine, you need to await it with a 'await' expression!\n\n    :param id_: The ID to retrieve\n    :return: The variable as a MockObj.\n    \"\"\"\n    return await CORE.get_variable_with_full_id(id_)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.is_template","title":"is_template","text":"<pre><code>is_template(value)\n</code></pre> <p>Return if value is a lambda expression.</p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def is_template(value):\n    \"\"\"Return if value is a lambda expression.\"\"\"\n    return isinstance(value, Lambda)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.new_Pvariable","title":"new_Pvariable","text":"<pre><code>new_Pvariable(id_: ID, *args: SafeExpType) -&gt; Pvariable\n</code></pre> <p>Declare a new pointer variable in the code generation by calling it's constructor with the given arguments.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>ID</code> <p>The ID used to declare the variable (also specifies the type).</p> required <code>args</code> <code>SafeExpType</code> <p>The values to pass to the constructor.</p> <code>()</code> <p>Returns:</p> Type Description <code>Pvariable</code> <p>The new variable as a MockObj.</p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def new_Pvariable(id_: ID, *args: SafeExpType) -&gt; Pvariable:\n    \"\"\"Declare a new pointer variable in the code generation by calling it's constructor\n    with the given arguments.\n\n    :param id_: The ID used to declare the variable (also specifies the type).\n    :param args: The values to pass to the constructor.\n\n    :return: The new variable as a MockObj.\n    \"\"\"\n    if args and isinstance(args[0], TemplateArguments):\n        id_ = id_.copy()\n        id_.type = id_.type.template(args[0])\n        args = args[1:]\n    rhs = id_.type.new(*args)\n    return Pvariable(id_, rhs)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.new_variable","title":"new_variable","text":"<pre><code>new_variable(\n    id_: ID, rhs: SafeExpType, type_: MockObj = None\n) -&gt; MockObj\n</code></pre> <p>Declare and define a new variable, not pointer type, in the code generation.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>ID</code> <p>The ID used to declare the variable.</p> required <code>rhs</code> <code>SafeExpType</code> <p>The expression to place on the right hand side of the assignment.</p> required <code>type_</code> <code>MockObj</code> <p>Manually define a type for the variable, only use this when it's not possible to do so during config validation phase (for example because of template arguments).</p> <code>None</code> <p>Returns:</p> Type Description <code>MockObj</code> <p>The new variable as a MockObj.</p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def new_variable(id_: ID, rhs: SafeExpType, type_: \"MockObj\" = None) -&gt; \"MockObj\":\n    \"\"\"Declare and define a new variable, not pointer type, in the code generation.\n\n    :param id_: The ID used to declare the variable.\n    :param rhs: The expression to place on the right hand side of the assignment.\n    :param type_: Manually define a type for the variable, only use this when it's not possible\n      to do so during config validation phase (for example because of template arguments).\n\n    :return: The new variable as a MockObj.\n    \"\"\"\n    assert isinstance(id_, ID)\n    rhs = safe_exp(rhs)\n    obj = MockObj(id_, \".\")\n    if type_ is not None:\n        id_.type = type_\n    decl = VariableDeclarationExpression(id_.type, \"\", id_)\n    CORE.add_global(decl)\n    assignment = AssignmentExpression(None, \"\", id_, rhs)\n    CORE.add(assignment)\n    CORE.register_variable(id_, obj)\n    return obj\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.process_lambda","title":"process_lambda  <code>async</code>","text":"<pre><code>process_lambda(\n    value: Lambda,\n    parameters: list[tuple[SafeExpType, str]],\n    capture: str = \"=\",\n    return_type: SafeExpType = None,\n) -&gt; Generator[LambdaExpression, None, None]\n</code></pre> <p>Process the given lambda value into a LambdaExpression.</p> <p>This is a coroutine because lambdas can depend on other IDs, you need to await it with 'await'!</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Lambda</code> <p>The lambda to process.</p> required <code>parameters</code> <code>list[tuple[SafeExpType, str]]</code> <p>The parameters to pass to the Lambda, list of tuples</p> required <code>capture</code> <code>str</code> <p>The capture expression for the lambda, usually ''.</p> <code>'='</code> <code>return_type</code> <code>SafeExpType</code> <p>The return type of the lambda.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[LambdaExpression, None, None]</code> <p>The generated lambda expression.</p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>async def process_lambda(\n    value: Lambda,\n    parameters: list[tuple[SafeExpType, str]],\n    capture: str = \"=\",\n    return_type: SafeExpType = None,\n) -&gt; Generator[LambdaExpression, None, None]:\n    \"\"\"Process the given lambda value into a LambdaExpression.\n\n    This is a coroutine because lambdas can depend on other IDs,\n    you need to await it with 'await'!\n\n    :param value: The lambda to process.\n    :param parameters: The parameters to pass to the Lambda, list of tuples\n    :param capture: The capture expression for the lambda, usually ''.\n    :param return_type: The return type of the lambda.\n    :return: The generated lambda expression.\n    \"\"\"\n    from esphome.components.globals import (\n        GlobalsComponent,\n        RestoringGlobalsComponent,\n        RestoringGlobalStringComponent,\n    )\n\n    if value is None:\n        return\n    parts = value.parts[:]\n    for i, id in enumerate(value.requires_ids):\n        full_id, var = await get_variable_with_full_id(id)\n        if (\n            full_id is not None\n            and isinstance(full_id.type, MockObjClass)\n            and (\n                full_id.type.inherits_from(GlobalsComponent)\n                or full_id.type.inherits_from(RestoringGlobalsComponent)\n                or full_id.type.inherits_from(RestoringGlobalStringComponent)\n            )\n        ):\n            parts[i * 3 + 1] = var.value()\n            continue\n\n        if parts[i * 3 + 2] == \".\":\n            parts[i * 3 + 1] = var._\n        else:\n            parts[i * 3 + 1] = var\n        parts[i * 3 + 2] = \"\"\n\n    if isinstance(value, ESPHomeDataBase) and value.esp_range is not None:\n        location = value.esp_range.start_mark\n        location.line += value.content_offset\n    else:\n        location = None\n    return LambdaExpression(parts, parameters, capture, return_type, location)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.progmem_array","title":"progmem_array","text":"<pre><code>progmem_array(id_, rhs) -&gt; MockObj\n</code></pre> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def progmem_array(id_, rhs) -&gt; \"MockObj\":\n    rhs = safe_exp(rhs)\n    obj = MockObj(id_, \".\")\n    assignment = ProgmemAssignmentExpression(id_.type, id_, rhs)\n    CORE.add(assignment)\n    CORE.register_variable(id_, obj)\n    return obj\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.safe_exp","title":"safe_exp","text":"<pre><code>safe_exp(obj: SafeExpType) -&gt; Expression\n</code></pre> <p>Try to convert obj to an expression by automatically converting native python types to expressions/literals.</p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def safe_exp(obj: SafeExpType) -&gt; Expression:\n    \"\"\"Try to convert obj to an expression by automatically converting native python types to\n    expressions/literals.\n    \"\"\"\n    from esphome.cpp_types import bool_, float_, int32\n\n    if isinstance(obj, Expression):\n        return obj\n    if isinstance(obj, EnumValue):\n        return safe_exp(obj.enum_value)\n    if isinstance(obj, bool):\n        return BoolLiteral(obj)\n    if isinstance(obj, str):\n        return StringLiteral(obj)\n    if isinstance(obj, HexInt):\n        return HexIntLiteral(obj)\n    if isinstance(obj, int):\n        return IntLiteral(obj)\n    if isinstance(obj, float):\n        return FloatLiteral(obj)\n    if isinstance(obj, TimePeriodNanoseconds):\n        return IntLiteral(int(obj.total_nanoseconds))\n    if isinstance(obj, TimePeriodMicroseconds):\n        return IntLiteral(int(obj.total_microseconds))\n    if isinstance(obj, TimePeriodMilliseconds):\n        return IntLiteral(int(obj.total_milliseconds))\n    if isinstance(obj, TimePeriodSeconds):\n        return IntLiteral(int(obj.total_seconds))\n    if isinstance(obj, TimePeriodMinutes):\n        return IntLiteral(int(obj.total_minutes))\n    if isinstance(obj, (tuple, list)):\n        return ArrayInitializer(*[safe_exp(o) for o in obj])\n    if obj is bool:\n        return bool_\n    if obj is int:\n        return int32\n    if obj is float:\n        return float_\n    if isinstance(obj, ID):\n        raise ValueError(\n            f\"Object {obj} is an ID. Did you forget to register the variable?\"\n        )\n    if inspect.isgenerator(obj):\n        raise ValueError(\n            f\"Object {obj} is a coroutine. Did you forget to await the expression with 'await'?\"\n        )\n    raise ValueError(\"Object is not an expression\", obj)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.statement","title":"statement","text":"<pre><code>statement(\n    expression: Union[Expression, Statement]\n) -&gt; Statement\n</code></pre> <p>Convert expression into a statement unless is already a statement.</p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def statement(expression: Union[Expression, Statement]) -&gt; Statement:\n    \"\"\"Convert expression into a statement unless is already a statement.\"\"\"\n    if isinstance(expression, Statement):\n        return expression\n    return ExpressionStatement(expression)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.static_const_array","title":"static_const_array","text":"<pre><code>static_const_array(id_, rhs) -&gt; MockObj\n</code></pre> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def static_const_array(id_, rhs) -&gt; \"MockObj\":\n    rhs = safe_exp(rhs)\n    obj = MockObj(id_, \".\")\n    assignment = StaticConstAssignmentExpression(id_.type, id_, rhs)\n    CORE.add(assignment)\n    CORE.register_variable(id_, obj)\n    return obj\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.templatable","title":"templatable  <code>async</code>","text":"<pre><code>templatable(\n    value: Any,\n    args: list[tuple[SafeExpType, str]],\n    output_type: Optional[SafeExpType],\n    to_exp: Any = None,\n)\n</code></pre> <p>Generate code for a templatable config option.</p> <p>If <code>value</code> is a templated value, the lambda expression is returned. Otherwise the value is returned as-is (optionally process with to_exp).</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to process.</p> required <code>args</code> <code>list[tuple[SafeExpType, str]]</code> <p>The arguments for the lambda expression.</p> required <code>output_type</code> <code>Optional[SafeExpType]</code> <p>The output type of the lambda expression.</p> required <code>to_exp</code> <code>Any</code> <p>An optional callable to use for converting non-templated values.</p> <code>None</code> <p>Returns:</p> Type Description <p>The potentially templated value.</p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>async def templatable(\n    value: Any,\n    args: list[tuple[SafeExpType, str]],\n    output_type: Optional[SafeExpType],\n    to_exp: Any = None,\n):\n    \"\"\"Generate code for a templatable config option.\n\n    If `value` is a templated value, the lambda expression is returned.\n    Otherwise the value is returned as-is (optionally process with to_exp).\n\n    :param value: The value to process.\n    :param args: The arguments for the lambda expression.\n    :param output_type: The output type of the lambda expression.\n    :param to_exp: An optional callable to use for converting non-templated values.\n    :return: The potentially templated value.\n    \"\"\"\n    if is_template(value):\n        return await process_lambda(value, args, return_type=output_type)\n    if to_exp is None:\n        return value\n    if isinstance(to_exp, dict):\n        return to_exp[value]\n    return to_exp(value)\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.variable","title":"variable","text":"<pre><code>variable(\n    id_: ID,\n    rhs: SafeExpType,\n    type_: MockObj = None,\n    register=True,\n) -&gt; MockObj\n</code></pre> <p>Declare a new variable, not pointer type, in the code generation.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>ID</code> <p>The ID used to declare the variable.</p> required <code>rhs</code> <code>SafeExpType</code> <p>The expression to place on the right hand side of the assignment.</p> required <code>type_</code> <code>MockObj</code> <p>Manually define a type for the variable, only use this when it's not possible to do so during config validation phase (for example because of template arguments).</p> <code>None</code> <p>Returns:</p> Type Description <code>MockObj</code> <p>The new variable as a MockObj.</p> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def variable(\n    id_: ID, rhs: SafeExpType, type_: \"MockObj\" = None, register=True\n) -&gt; \"MockObj\":\n    \"\"\"Declare a new variable, not pointer type, in the code generation.\n\n    :param id_: The ID used to declare the variable.\n    :param rhs: The expression to place on the right hand side of the assignment.\n    :param type_: Manually define a type for the variable, only use this when it's not possible\n      to do so during config validation phase (for example because of template arguments).\n\n    :return: The new variable as a MockObj.\n    \"\"\"\n    assert isinstance(id_, ID)\n    rhs = safe_exp(rhs)\n    obj = MockObj(id_, \".\")\n    if type_ is not None:\n        id_.type = type_\n    assignment = AssignmentExpression(id_.type, \"\", id_, rhs)\n    CORE.add(assignment)\n    if register:\n        CORE.register_variable(id_, obj)\n    return obj\n</code></pre>"},{"location":"references/python%20API%27s/generator/#cpp_generator.with_local_variable","title":"with_local_variable","text":"<pre><code>with_local_variable(\n    id_: ID,\n    rhs: SafeExpType,\n    callback: Callable[[MockObj], None],\n    *args\n) -&gt; None\n</code></pre> <p>Declare a new variable, not pointer type, in the code generation, within a scoped block The variable is only usable within the callback The callback cannot be async.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>ID</code> <p>The ID used to declare the variable.</p> required <code>rhs</code> <code>SafeExpType</code> <p>The expression to place on the right hand side of the assignment.</p> required <code>callback</code> <code>Callable[[MockObj], None]</code> <p>The function to invoke that will receive the temporary variable</p> required <code>args</code> <p>args to pass to the callback in addition to the temporary variable</p> <code>()</code> Source code in <code>esphome\\cpp_generator.py</code> <pre><code>def with_local_variable(\n    id_: ID, rhs: SafeExpType, callback: Callable[[\"MockObj\"], None], *args\n) -&gt; None:\n    \"\"\"Declare a new variable, not pointer type, in the code generation, within a scoped block\n    The variable is only usable within the callback\n    The callback cannot be async.\n\n    :param id_: The ID used to declare the variable.\n    :param rhs: The expression to place on the right hand side of the assignment.\n    :param callback: The function to invoke that will receive the temporary variable\n    :param args: args to pass to the callback in addition to the temporary variable\n\n    \"\"\"\n\n    # throw if the callback is async:\n    assert not inspect.iscoroutinefunction(\n        callback\n    ), \"with_local_variable() callback cannot be async!\"\n\n    CORE.add(RawStatement(\"{\"))  # output opening curly brace\n    obj = variable(id_, rhs, None, True)\n    # invoke user-provided callback to generate code with this local variable\n    callback(obj, *args)\n    CORE.add(RawStatement(\"}\"))  # output closing curly brace\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/","title":"Generator helpers","text":""},{"location":"references/python%20API%27s/generator_helpers/#cpp_helpers","title":"cpp_helpers","text":""},{"location":"references/python%20API%27s/generator_helpers/#cpp_helpers.build_registry_entry","title":"build_registry_entry  <code>async</code>","text":"<pre><code>build_registry_entry(registry, full_config)\n</code></pre> Source code in <code>esphome\\cpp_helpers.py</code> <pre><code>async def build_registry_entry(registry, full_config):\n    registry_entry, config = extract_registry_entry_config(registry, full_config)\n    type_id = full_config[CONF_TYPE_ID]\n    builder = registry_entry.coroutine_fun\n    return await builder(config, type_id)\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_helpers.build_registry_list","title":"build_registry_list  <code>async</code>","text":"<pre><code>build_registry_list(registry, config)\n</code></pre> Source code in <code>esphome\\cpp_helpers.py</code> <pre><code>async def build_registry_list(registry, config):\n    actions = []\n    for conf in config:\n        action = await build_registry_entry(registry, conf)\n        actions.append(action)\n    return actions\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_helpers.extract_registry_entry_config","title":"extract_registry_entry_config","text":"<pre><code>extract_registry_entry_config(\n    registry: Registry, full_config: ConfigType\n) -&gt; tuple[RegistryEntry, ConfigFragmentType]\n</code></pre> Source code in <code>esphome\\cpp_helpers.py</code> <pre><code>def extract_registry_entry_config(\n    registry: Registry,\n    full_config: ConfigType,\n) -&gt; tuple[RegistryEntry, ConfigFragmentType]:\n    key, config = next((k, v) for k, v in full_config.items() if k in registry)\n    return registry[key], config\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_helpers.gpio_pin_expression","title":"gpio_pin_expression  <code>async</code>","text":"<pre><code>gpio_pin_expression(conf)\n</code></pre> <p>Generate an expression for the given pin option.</p> <p>This is a coroutine, you must await it with a 'await' expression!</p> Source code in <code>esphome\\cpp_helpers.py</code> <pre><code>async def gpio_pin_expression(conf):\n    \"\"\"Generate an expression for the given pin option.\n\n    This is a coroutine, you must await it with a 'await' expression!\n    \"\"\"\n    if conf is None:\n        return None\n    from esphome import pins\n\n    for key, (func, _, _) in pins.PIN_SCHEMA_REGISTRY.items():\n        if key in conf:\n            return await coroutine(func)(conf)\n    return await coroutine(pins.PIN_SCHEMA_REGISTRY[CORE.target_platform][0])(conf)\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_helpers.past_safe_mode","title":"past_safe_mode  <code>async</code>","text":"<pre><code>past_safe_mode()\n</code></pre> Source code in <code>esphome\\cpp_helpers.py</code> <pre><code>async def past_safe_mode():\n    safe_mode_enabled = (\n        CONF_OTA in CORE.config and CORE.config[CONF_OTA][CONF_SAFE_MODE]\n    )\n    if not safe_mode_enabled:\n        return\n\n    def _safe_mode_generator():\n        while True:\n            if CORE.data.get(CONF_OTA, {}).get(KEY_PAST_SAFE_MODE, False):\n                return\n            yield\n\n    return await FakeAwaitable(_safe_mode_generator())\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_helpers.register_component","title":"register_component  <code>async</code>","text":"<pre><code>register_component(var, config)\n</code></pre> <p>Register the given obj as a component.</p> <p>This is a coroutine, you must await it with a 'await' expression!</p> <p>Parameters:</p> Name Type Description Default <code>var</code> <p>The variable representing the component.</p> required <code>config</code> <p>The configuration for the component.</p> required Source code in <code>esphome\\cpp_helpers.py</code> <pre><code>async def register_component(var, config):\n    \"\"\"Register the given obj as a component.\n\n    This is a coroutine, you must await it with a 'await' expression!\n\n    :param var: The variable representing the component.\n    :param config: The configuration for the component.\n    \"\"\"\n    import inspect\n\n    id_ = str(var.base)\n    if id_ not in CORE.component_ids:\n        raise ValueError(\n            f\"Component ID {id_} was not declared to inherit from Component, or was registered twice. Please create a bug report with your configuration.\"\n        )\n    CORE.component_ids.remove(id_)\n    if CONF_SETUP_PRIORITY in config:\n        add(var.set_setup_priority(config[CONF_SETUP_PRIORITY]))\n    if CONF_UPDATE_INTERVAL in config:\n        add(var.set_update_interval(config[CONF_UPDATE_INTERVAL]))\n\n    # Set component source by inspecting the stack and getting the callee module\n    # https://stackoverflow.com/a/1095621\n    name = None\n    try:\n        for frm in inspect.stack()[1:]:\n            mod = inspect.getmodule(frm[0])\n            if mod is None:\n                continue\n            name = mod.__name__\n            if name.startswith(\"esphome.components.\"):\n                name = name[len(\"esphome.components.\") :]\n                break\n            if name == \"esphome.automation\":\n                name = \"automation\"\n                # continue looking further up in stack in case we find a better one\n            if name == \"esphome.coroutine\":\n                # Only works for async-await coroutine syntax\n                break\n    except (KeyError, AttributeError, IndexError) as e:\n        _LOGGER.warning(\n            \"Error while finding name of component, please report this\", exc_info=e\n        )\n    if name is not None:\n        add(var.set_component_source(name))\n\n    add(App.register_component(var))\n    return var\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_helpers.register_parented","title":"register_parented  <code>async</code>","text":"<pre><code>register_parented(var, value)\n</code></pre> Source code in <code>esphome\\cpp_helpers.py</code> <pre><code>async def register_parented(var, value):\n    if isinstance(value, ID):\n        paren = await get_variable(value)\n    else:\n        paren = value\n    add(var.set_parent(paren))\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_helpers.setup_entity","title":"setup_entity  <code>async</code>","text":"<pre><code>setup_entity(var, config)\n</code></pre> <p>Set up generic properties of an Entity</p> Source code in <code>esphome\\cpp_helpers.py</code> <pre><code>async def setup_entity(var, config):\n    \"\"\"Set up generic properties of an Entity\"\"\"\n    add(var.set_name(config[CONF_NAME]))\n    if not config[CONF_NAME]:\n        add(var.set_object_id(sanitize(snake_case(CORE.friendly_name))))\n    else:\n        add(var.set_object_id(sanitize(snake_case(config[CONF_NAME]))))\n    add(var.set_disabled_by_default(config[CONF_DISABLED_BY_DEFAULT]))\n    if CONF_INTERNAL in config:\n        add(var.set_internal(config[CONF_INTERNAL]))\n    if CONF_ICON in config:\n        add(var.set_icon(config[CONF_ICON]))\n    if CONF_ENTITY_CATEGORY in config:\n        add(var.set_entity_category(config[CONF_ENTITY_CATEGORY]))\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types","title":"cpp_types","text":""},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.App","title":"App  <code>module-attribute</code>","text":"<pre><code>App = App\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.Application","title":"Application  <code>module-attribute</code>","text":"<pre><code>Application = class_('Application')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.Component","title":"Component  <code>module-attribute</code>","text":"<pre><code>Component = class_('Component')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.ComponentPtr","title":"ComponentPtr  <code>module-attribute</code>","text":"<pre><code>ComponentPtr = operator('ptr')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.Controller","title":"Controller  <code>module-attribute</code>","text":"<pre><code>Controller = class_('Controller')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.EntityBase","title":"EntityBase  <code>module-attribute</code>","text":"<pre><code>EntityBase = class_('EntityBase')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.EntityCategory","title":"EntityCategory  <code>module-attribute</code>","text":"<pre><code>EntityCategory = enum('EntityCategory')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.GPIOPin","title":"GPIOPin  <code>module-attribute</code>","text":"<pre><code>GPIOPin = class_('GPIOPin')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.InternalGPIOPin","title":"InternalGPIOPin  <code>module-attribute</code>","text":"<pre><code>InternalGPIOPin = class_('InternalGPIOPin', GPIOPin)\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.JsonObject","title":"JsonObject  <code>module-attribute</code>","text":"<pre><code>JsonObject = class_('JsonObject')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.JsonObjectConst","title":"JsonObjectConst  <code>module-attribute</code>","text":"<pre><code>JsonObjectConst = class_('JsonObjectConst')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.NAN","title":"NAN  <code>module-attribute</code>","text":"<pre><code>NAN = namespace('NAN')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.Parented","title":"Parented  <code>module-attribute</code>","text":"<pre><code>Parented = class_('Parented')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.PollingComponent","title":"PollingComponent  <code>module-attribute</code>","text":"<pre><code>PollingComponent = class_('PollingComponent', Component)\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.arduino_json_ns","title":"arduino_json_ns  <code>module-attribute</code>","text":"<pre><code>arduino_json_ns = namespace('ArduinoJson')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.bool_","title":"bool_  <code>module-attribute</code>","text":"<pre><code>bool_ = namespace('bool')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.const_char_ptr","title":"const_char_ptr  <code>module-attribute</code>","text":"<pre><code>const_char_ptr = namespace('const char *')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.double","title":"double  <code>module-attribute</code>","text":"<pre><code>double = namespace('double')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.esphome_ns","title":"esphome_ns  <code>module-attribute</code>","text":"<pre><code>esphome_ns = global_ns\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.float_","title":"float_  <code>module-attribute</code>","text":"<pre><code>float_ = namespace('float')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.global_ns","title":"global_ns  <code>module-attribute</code>","text":"<pre><code>global_ns = MockObj('', '')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.gpio_Flags","title":"gpio_Flags  <code>module-attribute</code>","text":"<pre><code>gpio_Flags = enum('Flags', is_class=True)\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.gpio_ns","title":"gpio_ns  <code>module-attribute</code>","text":"<pre><code>gpio_ns = namespace('gpio')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.int16","title":"int16  <code>module-attribute</code>","text":"<pre><code>int16 = namespace('int16_t')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.int32","title":"int32  <code>module-attribute</code>","text":"<pre><code>int32 = namespace('int32_t')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.int64","title":"int64  <code>module-attribute</code>","text":"<pre><code>int64 = namespace('int64_t')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.int_","title":"int_  <code>module-attribute</code>","text":"<pre><code>int_ = namespace('int')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.nullptr","title":"nullptr  <code>module-attribute</code>","text":"<pre><code>nullptr = namespace('nullptr')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.optional","title":"optional  <code>module-attribute</code>","text":"<pre><code>optional = class_('optional')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.size_t","title":"size_t  <code>module-attribute</code>","text":"<pre><code>size_t = namespace('size_t')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.std_ns","title":"std_ns  <code>module-attribute</code>","text":"<pre><code>std_ns = namespace('std')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.std_string","title":"std_string  <code>module-attribute</code>","text":"<pre><code>std_string = class_('string')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.std_vector","title":"std_vector  <code>module-attribute</code>","text":"<pre><code>std_vector = class_('vector')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.uint16","title":"uint16  <code>module-attribute</code>","text":"<pre><code>uint16 = namespace('uint16_t')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.uint32","title":"uint32  <code>module-attribute</code>","text":"<pre><code>uint32 = namespace('uint32_t')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.uint64","title":"uint64  <code>module-attribute</code>","text":"<pre><code>uint64 = namespace('uint64_t')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.uint8","title":"uint8  <code>module-attribute</code>","text":"<pre><code>uint8 = namespace('uint8_t')\n</code></pre>"},{"location":"references/python%20API%27s/generator_helpers/#cpp_types.void","title":"void  <code>module-attribute</code>","text":"<pre><code>void = namespace('void')\n</code></pre>"},{"location":"references/python%20API%27s/validation/","title":"Validation","text":""},{"location":"references/python%20API%27s/validation/#config_validation","title":"config_validation","text":"<p>Helpers for config validation using voluptuous.</p>"},{"location":"references/python%20API%27s/validation/#config_validation.ALLOW_EXTRA","title":"ALLOW_EXTRA  <code>module-attribute</code>","text":"<pre><code>ALLOW_EXTRA = ALLOW_EXTRA\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.All","title":"All  <code>module-attribute</code>","text":"<pre><code>All = All\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.Any","title":"Any  <code>module-attribute</code>","text":"<pre><code>Any = Any\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.COMPONENT_SCHEMA","title":"COMPONENT_SCHEMA  <code>module-attribute</code>","text":"<pre><code>COMPONENT_SCHEMA = Schema(\n    {Optional(CONF_SETUP_PRIORITY): float_}\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.Coerce","title":"Coerce  <code>module-attribute</code>","text":"<pre><code>Coerce = Coerce\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.ENTITY_BASE_SCHEMA","title":"ENTITY_BASE_SCHEMA  <code>module-attribute</code>","text":"<pre><code>ENTITY_BASE_SCHEMA = Schema(\n    {\n        Optional(CONF_NAME): Any(\n            All(\n                none,\n                requires_friendly_name(\n                    \"Name cannot be None when esphome-&gt;friendly_name is not set!\"\n                ),\n            ),\n            string,\n        ),\n        Optional(CONF_INTERNAL): boolean,\n        Optional(\n            CONF_DISABLED_BY_DEFAULT, default=False\n        ): boolean,\n        Optional(CONF_ICON): icon,\n        Optional(CONF_ENTITY_CATEGORY): entity_category,\n    }\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.ENTITY_CATEGORIES","title":"ENTITY_CATEGORIES  <code>module-attribute</code>","text":"<pre><code>ENTITY_CATEGORIES = {\n    ENTITY_CATEGORY_NONE: ENTITY_CATEGORY_NONE,\n    ENTITY_CATEGORY_CONFIG: ENTITY_CATEGORY_CONFIG,\n    ENTITY_CATEGORY_DIAGNOSTIC: ENTITY_CATEGORY_DIAGNOSTIC,\n}\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.ENTITY_ID_CHARACTERS","title":"ENTITY_ID_CHARACTERS  <code>module-attribute</code>","text":"<pre><code>ENTITY_ID_CHARACTERS = (\n    \"abcdefghijklmnopqrstuvwxyz0123456789_\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.Exclusive","title":"Exclusive  <code>module-attribute</code>","text":"<pre><code>Exclusive = Exclusive\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.GIT_SCHEMA","title":"GIT_SCHEMA  <code>module-attribute</code>","text":"<pre><code>GIT_SCHEMA = Schema(\n    {\n        Required(CONF_URL): url,\n        Optional(CONF_REF): git_ref,\n        Optional(CONF_USERNAME): string,\n        Optional(CONF_PASSWORD): string,\n    }\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.Inclusive","title":"Inclusive  <code>module-attribute</code>","text":"<pre><code>Inclusive = Inclusive\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.Invalid","title":"Invalid  <code>module-attribute</code>","text":"<pre><code>Invalid = Invalid\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.LAMBDA_ENTITY_ID_PROG","title":"LAMBDA_ENTITY_ID_PROG  <code>module-attribute</code>","text":"<pre><code>LAMBDA_ENTITY_ID_PROG = compile(\n    \"\\\\Wid\\\\(\\\\s*([a-zA-Z0-9_]+\\\\.[.a-zA-Z0-9_]+)\\\\s*\\\\)\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.LOCAL_SCHEMA","title":"LOCAL_SCHEMA  <code>module-attribute</code>","text":"<pre><code>LOCAL_SCHEMA = Schema({Required(CONF_PATH): directory})\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.Length","title":"Length  <code>module-attribute</code>","text":"<pre><code>Length = Length\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.Lower","title":"Lower  <code>module-attribute</code>","text":"<pre><code>Lower = Lower\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.METRIC_SUFFIXES","title":"METRIC_SUFFIXES  <code>module-attribute</code>","text":"<pre><code>METRIC_SUFFIXES = {\n    \"E\": 1e18,\n    \"P\": 1000000000000000.0,\n    \"T\": 1000000000000.0,\n    \"G\": 1000000000.0,\n    \"M\": 1000000.0,\n    \"k\": 1000.0,\n    \"da\": 10,\n    \"d\": 0.1,\n    \"c\": 0.01,\n    \"m\": 0.001,\n    \"\u00b5\": 1e-06,\n    \"u\": 1e-06,\n    \"n\": 1e-09,\n    \"p\": 1e-12,\n    \"f\": 1e-15,\n    \"a\": 1e-18,\n    \"\": 1,\n}\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.MQTT_COMMAND_COMPONENT_SCHEMA","title":"MQTT_COMMAND_COMPONENT_SCHEMA  <code>module-attribute</code>","text":"<pre><code>MQTT_COMMAND_COMPONENT_SCHEMA = extend(\n    {\n        Optional(CONF_COMMAND_TOPIC): All(\n            requires_component(\"mqtt\"), subscribe_topic\n        ),\n        Optional(CONF_COMMAND_RETAIN): All(\n            requires_component(\"mqtt\"), boolean\n        ),\n    }\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.MQTT_COMPONENT_AVAILABILITY_SCHEMA","title":"MQTT_COMPONENT_AVAILABILITY_SCHEMA  <code>module-attribute</code>","text":"<pre><code>MQTT_COMPONENT_AVAILABILITY_SCHEMA = Schema(\n    {\n        Required(CONF_TOPIC): subscribe_topic,\n        Optional(\n            CONF_PAYLOAD_AVAILABLE, default=\"online\"\n        ): mqtt_payload,\n        Optional(\n            CONF_PAYLOAD_NOT_AVAILABLE, default=\"offline\"\n        ): mqtt_payload,\n    }\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.MQTT_COMPONENT_SCHEMA","title":"MQTT_COMPONENT_SCHEMA  <code>module-attribute</code>","text":"<pre><code>MQTT_COMPONENT_SCHEMA = Schema(\n    {\n        Optional(CONF_RETAIN): All(\n            requires_component(\"mqtt\"), boolean\n        ),\n        Optional(CONF_DISCOVERY): All(\n            requires_component(\"mqtt\"), boolean\n        ),\n        Optional(CONF_STATE_TOPIC): All(\n            requires_component(\"mqtt\"), publish_topic\n        ),\n        Optional(CONF_AVAILABILITY): All(\n            requires_component(\"mqtt\"),\n            Any(None, MQTT_COMPONENT_AVAILABILITY_SCHEMA),\n        ),\n    }\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.MultipleInvalid","title":"MultipleInvalid  <code>module-attribute</code>","text":"<pre><code>MultipleInvalid = MultipleInvalid\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.RESERVED_IDS","title":"RESERVED_IDS  <code>module-attribute</code>","text":"<pre><code>RESERVED_IDS = [\n    \"alarm\",\n    \"alignas\",\n    \"alignof\",\n    \"and\",\n    \"and_eq\",\n    \"asm\",\n    \"auto\",\n    \"bitand\",\n    \"bitor\",\n    \"bool\",\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"char\",\n    \"char16_t\",\n    \"char32_t\",\n    \"class\",\n    \"clock\",\n    \"compl\",\n    \"concept\",\n    \"const\",\n    \"constexpr\",\n    \"const_cast\",\n    \"continue\",\n    \"decltype\",\n    \"default\",\n    \"delete\",\n    \"do\",\n    \"double\",\n    \"dynamic_cast\",\n    \"else\",\n    \"enum\",\n    \"explicit\",\n    \"export\",\n    \"export\",\n    \"extern\",\n    \"false\",\n    \"float\",\n    \"for\",\n    \"friend\",\n    \"goto\",\n    \"if\",\n    \"inline\",\n    \"int\",\n    \"long\",\n    \"mutable\",\n    \"namespace\",\n    \"new\",\n    \"noexcept\",\n    \"not\",\n    \"not_eq\",\n    \"nullptr\",\n    \"operator\",\n    \"or\",\n    \"or_eq\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"register\",\n    \"reinterpret_cast\",\n    \"requires\",\n    \"return\",\n    \"short\",\n    \"signed\",\n    \"sizeof\",\n    \"static\",\n    \"static_assert\",\n    \"static_cast\",\n    \"struct\",\n    \"switch\",\n    \"template\",\n    \"text\",\n    \"this\",\n    \"thread_local\",\n    \"throw\",\n    \"true\",\n    \"try\",\n    \"typedef\",\n    \"typeid\",\n    \"typename\",\n    \"union\",\n    \"unsigned\",\n    \"using\",\n    \"virtual\",\n    \"void\",\n    \"volatile\",\n    \"wchar_t\",\n    \"while\",\n    \"xor\",\n    \"xor_eq\",\n    \"App\",\n    \"pinMode\",\n    \"delay\",\n    \"delayMicroseconds\",\n    \"digitalRead\",\n    \"digitalWrite\",\n    \"INPUT\",\n    \"OUTPUT\",\n    \"uint8_t\",\n    \"uint16_t\",\n    \"uint32_t\",\n    \"uint64_t\",\n    \"int8_t\",\n    \"int16_t\",\n    \"int32_t\",\n    \"int64_t\",\n    \"close\",\n    \"pause\",\n    \"sleep\",\n    \"open\",\n    \"setup\",\n    \"loop\",\n    \"uart0\",\n    \"uart1\",\n    \"uart2\",\n]\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.ROOT_CONFIG_PATH","title":"ROOT_CONFIG_PATH  <code>module-attribute</code>","text":"<pre><code>ROOT_CONFIG_PATH = object()\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.Range","title":"Range  <code>module-attribute</code>","text":"<pre><code>Range = Range\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.RequiredFieldInvalid","title":"RequiredFieldInvalid  <code>module-attribute</code>","text":"<pre><code>RequiredFieldInvalid = RequiredFieldInvalid\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.SOURCE_SCHEMA","title":"SOURCE_SCHEMA  <code>module-attribute</code>","text":"<pre><code>SOURCE_SCHEMA = Any(\n    validate_source_shorthand,\n    typed_schema(\n        {TYPE_GIT: GIT_SCHEMA, TYPE_LOCAL: LOCAL_SCHEMA}\n    ),\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.Schema","title":"Schema  <code>module-attribute</code>","text":"<pre><code>Schema = _Schema\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.TIME_PERIOD_ERROR","title":"TIME_PERIOD_ERROR  <code>module-attribute</code>","text":"<pre><code>TIME_PERIOD_ERROR = \"Time period {} should be format number + unit, for example 5ms, 5s, 5min, 5h\"\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.UNDEFINED","title":"UNDEFINED  <code>module-attribute</code>","text":"<pre><code>UNDEFINED = UNDEFINED\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.Upper","title":"Upper  <code>module-attribute</code>","text":"<pre><code>Upper = Upper\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.VARIABLE_PROG","title":"VARIABLE_PROG  <code>module-attribute</code>","text":"<pre><code>VARIABLE_PROG = compile(\n    format(VALID_SUBSTITUTIONS_CHARACTERS)\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.angle","title":"angle  <code>module-attribute</code>","text":"<pre><code>angle = float_with_unit(\n    \"angle\", \"(\u00b0|deg)\", optional_unit=True\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.current","title":"current  <code>module-attribute</code>","text":"<pre><code>current = float_with_unit(\n    \"current\", \"(a|A|amp|Amp|amps|Amps|ampere|Ampere)?\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.decibel","title":"decibel  <code>module-attribute</code>","text":"<pre><code>decibel = float_with_unit(\n    \"decibel\", \"(dB|dBm|db|dbm)\", optional_unit=True\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.distance","title":"distance  <code>module-attribute</code>","text":"<pre><code>distance = float_with_unit('distance', '(m)')\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.float_","title":"float_  <code>module-attribute</code>","text":"<pre><code>float_ = Coerce(float)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.framerate","title":"framerate  <code>module-attribute</code>","text":"<pre><code>framerate = float_with_unit(\n    \"framerate\", \"(FPS|fps|Fps|FpS|Hz)\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.frequency","title":"frequency  <code>module-attribute</code>","text":"<pre><code>frequency = float_with_unit('frequency', '(Hz|HZ|hz)?')\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.hex_uint16_t","title":"hex_uint16_t  <code>module-attribute</code>","text":"<pre><code>hex_uint16_t = hex_int_range(min=0, max=65535)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.hex_uint32_t","title":"hex_uint32_t  <code>module-attribute</code>","text":"<pre><code>hex_uint32_t = hex_int_range(min=0, max=4294967295)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.hex_uint64_t","title":"hex_uint64_t  <code>module-attribute</code>","text":"<pre><code>hex_uint64_t = hex_int_range(\n    min=0, max=18446744073709551615\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.hex_uint8_t","title":"hex_uint8_t  <code>module-attribute</code>","text":"<pre><code>hex_uint8_t = hex_int_range(min=0, max=255)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.i2c_address","title":"i2c_address  <code>module-attribute</code>","text":"<pre><code>i2c_address = hex_uint8_t\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.negative_one_to_one_float","title":"negative_one_to_one_float  <code>module-attribute</code>","text":"<pre><code>negative_one_to_one_float = float_range(min=-1, max=1)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.only_on_esp32","title":"only_on_esp32  <code>module-attribute</code>","text":"<pre><code>only_on_esp32 = only_on(PLATFORM_ESP32)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.only_on_esp8266","title":"only_on_esp8266  <code>module-attribute</code>","text":"<pre><code>only_on_esp8266 = only_on(PLATFORM_ESP8266)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.only_on_rp2040","title":"only_on_rp2040  <code>module-attribute</code>","text":"<pre><code>only_on_rp2040 = only_on(PLATFORM_RP2040)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.only_with_arduino","title":"only_with_arduino  <code>module-attribute</code>","text":"<pre><code>only_with_arduino = only_with_framework('arduino')\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.only_with_esp_idf","title":"only_with_esp_idf  <code>module-attribute</code>","text":"<pre><code>only_with_esp_idf = only_with_framework('esp-idf')\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.port","title":"port  <code>module-attribute</code>","text":"<pre><code>port = int_range(min=1, max=65535)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.positive_float","title":"positive_float  <code>module-attribute</code>","text":"<pre><code>positive_float = float_range(min=0)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.positive_int","title":"positive_int  <code>module-attribute</code>","text":"<pre><code>positive_int = int_range(min=0)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.positive_not_null_int","title":"positive_not_null_int  <code>module-attribute</code>","text":"<pre><code>positive_not_null_int = int_range(min=0, min_included=False)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.positive_not_null_time_period","title":"positive_not_null_time_period  <code>module-attribute</code>","text":"<pre><code>positive_not_null_time_period = All(\n    time_period, Range(min=TimePeriod(), min_included=False)\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.positive_time_period","title":"positive_time_period  <code>module-attribute</code>","text":"<pre><code>positive_time_period = All(\n    time_period, Range(min=TimePeriod())\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.positive_time_period_microseconds","title":"positive_time_period_microseconds  <code>module-attribute</code>","text":"<pre><code>positive_time_period_microseconds = All(\n    positive_time_period, time_period_in_microseconds_\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.positive_time_period_milliseconds","title":"positive_time_period_milliseconds  <code>module-attribute</code>","text":"<pre><code>positive_time_period_milliseconds = All(\n    positive_time_period, time_period_in_milliseconds_\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.positive_time_period_minutes","title":"positive_time_period_minutes  <code>module-attribute</code>","text":"<pre><code>positive_time_period_minutes = All(\n    positive_time_period, time_period_in_minutes_\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.positive_time_period_nanoseconds","title":"positive_time_period_nanoseconds  <code>module-attribute</code>","text":"<pre><code>positive_time_period_nanoseconds = All(\n    positive_time_period, time_period_in_nanoseconds_\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.positive_time_period_seconds","title":"positive_time_period_seconds  <code>module-attribute</code>","text":"<pre><code>positive_time_period_seconds = All(\n    positive_time_period, time_period_in_seconds_\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.pressure","title":"pressure  <code>module-attribute</code>","text":"<pre><code>pressure = float_with_unit(\n    \"pressure\", \"(bar|Bar)\", optional_unit=True\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.resistance","title":"resistance  <code>module-attribute</code>","text":"<pre><code>resistance = float_with_unit(\n    \"resistance\", \"(\u2126|\u03a9|ohm|Ohm|OHM)?\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.time_period","title":"time_period  <code>module-attribute</code>","text":"<pre><code>time_period = Any(\n    time_period_str_unit,\n    time_period_str_colon,\n    time_period_dict,\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.time_period_dict","title":"time_period_dict  <code>module-attribute</code>","text":"<pre><code>time_period_dict = All(\n    Schema(\n        {\n            Optional(\"days\"): float_,\n            Optional(\"hours\"): float_,\n            Optional(\"minutes\"): float_,\n            Optional(\"seconds\"): float_,\n            Optional(\"milliseconds\"): float_,\n            Optional(\"microseconds\"): float_,\n        }\n    ),\n    has_at_least_one_key(\n        \"days\",\n        \"hours\",\n        \"minutes\",\n        \"seconds\",\n        \"milliseconds\",\n        \"microseconds\",\n    ),\n    lambda: TimePeriod(**value),\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.time_period_microseconds","title":"time_period_microseconds  <code>module-attribute</code>","text":"<pre><code>time_period_microseconds = All(\n    time_period, time_period_in_microseconds_\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.uint16_t","title":"uint16_t  <code>module-attribute</code>","text":"<pre><code>uint16_t = int_range(min=0, max=65535)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.uint32_t","title":"uint32_t  <code>module-attribute</code>","text":"<pre><code>uint32_t = int_range(min=0, max=4294967295)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.uint64_t","title":"uint64_t  <code>module-attribute</code>","text":"<pre><code>uint64_t = int_range(min=0, max=18446744073709551615)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.uint8_t","title":"uint8_t  <code>module-attribute</code>","text":"<pre><code>uint8_t = int_range(min=0, max=255)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.voltage","title":"voltage  <code>module-attribute</code>","text":"<pre><code>voltage = float_with_unit('voltage', '(v|V|volt|Volts)?')\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.zero_to_one_float","title":"zero_to_one_float  <code>module-attribute</code>","text":"<pre><code>zero_to_one_float = float_range(min=0, max=1)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.GenerateID","title":"GenerateID","text":"<pre><code>GenerateID(key=CONF_ID)\n</code></pre> <p>             Bases: <code>Optional</code></p> <p>Mark this key as being an auto-generated ID key.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def __init__(self, key=CONF_ID):\n    super().__init__(key, default=lambda: None)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.OnlyWith","title":"OnlyWith","text":"<pre><code>OnlyWith(key, component, default=None)\n</code></pre> <p>             Bases: <code>Optional</code></p> <p>Set the default value only if the given component is loaded.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def __init__(self, key, component, default=None):\n    super().__init__(key)\n    self._component = component\n    self._default = vol.default_factory(default)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.OnlyWith.default","title":"default  <code>property</code> <code>writable</code>","text":"<pre><code>default\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.Optional","title":"Optional","text":"<pre><code>Optional(key, default=UNDEFINED)\n</code></pre> <p>             Bases: <code>Optional</code></p> <p>Mark a field as optional and optionally define a default for the field.</p> <p>When no default is defined, the validated config will not contain the key. You can check if the key is defined with 'CONF_ in config'. Or to access the key and return None if it does not exist, call config.get(CONF_) <p>If a default is set, the resulting validated config will always contain the default value. You can therefore directly access the value using the 'config[CONF_]' syntax. <p>In ESPHome, all configuration defaults should be defined with the Optional class during config validation - specifically not in the C++ code or the code generation phase.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def __init__(self, key, default=UNDEFINED):\n    super().__init__(key, default=default)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.Required","title":"Required","text":"<pre><code>Required(key, msg=None)\n</code></pre> <p>             Bases: <code>Required</code></p> <p>Define a field to be required to be set. The validated configuration is guaranteed to contain this key.</p> <p>All required values should be acceessed with the <code>config[CONF_&lt;KEY&gt;]</code> syntax in code - not the <code>config.get(CONF_&lt;KEY&gt;)</code> syntax.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def __init__(self, key, msg=None):\n    super().__init__(key, msg=msg)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.SplitDefault","title":"SplitDefault","text":"<pre><code>SplitDefault(\n    key,\n    esp8266=vol.UNDEFINED,\n    esp32=vol.UNDEFINED,\n    esp32_arduino=vol.UNDEFINED,\n    esp32_idf=vol.UNDEFINED,\n    esp32_s2=vol.UNDEFINED,\n    esp32_s2_arduino=vol.UNDEFINED,\n    esp32_s2_idf=vol.UNDEFINED,\n    esp32_s3=vol.UNDEFINED,\n    esp32_s3_arduino=vol.UNDEFINED,\n    esp32_s3_idf=vol.UNDEFINED,\n    esp32_c3=vol.UNDEFINED,\n    esp32_c3_arduino=vol.UNDEFINED,\n    esp32_c3_idf=vol.UNDEFINED,\n    rp2040=vol.UNDEFINED,\n    bk72xx=vol.UNDEFINED,\n    rtl87xx=vol.UNDEFINED,\n    host=vol.UNDEFINED,\n)\n</code></pre> <p>             Bases: <code>Optional</code></p> <p>Mark this key to have a split default for ESP8266/ESP32.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def __init__(\n    self,\n    key,\n    esp8266=vol.UNDEFINED,\n    esp32=vol.UNDEFINED,\n    esp32_arduino=vol.UNDEFINED,\n    esp32_idf=vol.UNDEFINED,\n    esp32_s2=vol.UNDEFINED,\n    esp32_s2_arduino=vol.UNDEFINED,\n    esp32_s2_idf=vol.UNDEFINED,\n    esp32_s3=vol.UNDEFINED,\n    esp32_s3_arduino=vol.UNDEFINED,\n    esp32_s3_idf=vol.UNDEFINED,\n    esp32_c3=vol.UNDEFINED,\n    esp32_c3_arduino=vol.UNDEFINED,\n    esp32_c3_idf=vol.UNDEFINED,\n    rp2040=vol.UNDEFINED,\n    bk72xx=vol.UNDEFINED,\n    rtl87xx=vol.UNDEFINED,\n    host=vol.UNDEFINED,\n):\n    super().__init__(key)\n    self._esp8266_default = vol.default_factory(esp8266)\n    self._esp32_arduino_default = vol.default_factory(\n        _get_priority_default(esp32_arduino, esp32)\n    )\n    self._esp32_idf_default = vol.default_factory(\n        _get_priority_default(esp32_idf, esp32)\n    )\n    self._esp32_s2_arduino_default = vol.default_factory(\n        _get_priority_default(esp32_s2_arduino, esp32_s2, esp32_arduino, esp32)\n    )\n    self._esp32_s2_idf_default = vol.default_factory(\n        _get_priority_default(esp32_s2_idf, esp32_s2, esp32_idf, esp32)\n    )\n    self._esp32_s3_arduino_default = vol.default_factory(\n        _get_priority_default(esp32_s3_arduino, esp32_s3, esp32_arduino, esp32)\n    )\n    self._esp32_s3_idf_default = vol.default_factory(\n        _get_priority_default(esp32_s3_idf, esp32_s3, esp32_idf, esp32)\n    )\n    self._esp32_c3_arduino_default = vol.default_factory(\n        _get_priority_default(esp32_c3_arduino, esp32_c3, esp32_arduino, esp32)\n    )\n    self._esp32_c3_idf_default = vol.default_factory(\n        _get_priority_default(esp32_c3_idf, esp32_c3, esp32_idf, esp32)\n    )\n    self._rp2040_default = vol.default_factory(rp2040)\n    self._bk72xx_default = vol.default_factory(bk72xx)\n    self._rtl87xx_default = vol.default_factory(rtl87xx)\n    self._host_default = vol.default_factory(host)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.SplitDefault.default","title":"default  <code>property</code> <code>writable</code>","text":"<pre><code>default\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.Version","title":"Version  <code>dataclass</code>","text":""},{"location":"references/python%20API%27s/validation/#config_validation.Version.major","title":"major  <code>instance-attribute</code>","text":"<pre><code>major: int\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.Version.minor","title":"minor  <code>instance-attribute</code>","text":"<pre><code>minor: int\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.Version.patch","title":"patch  <code>instance-attribute</code>","text":"<pre><code>patch: int\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.Version.parse","title":"parse  <code>classmethod</code>","text":"<pre><code>parse(value: str) -&gt; Version\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>@classmethod\ndef parse(cls, value: str) -&gt; \"Version\":\n    match = re.match(r\"^(\\d+).(\\d+).(\\d+)-?\\w*$\", value)\n    if match is None:\n        raise ValueError(f\"Not a valid version number {value}\")\n    major = int(match[1])\n    minor = int(match[2])\n    patch = int(match[3])\n    return Version(major=major, minor=minor, patch=patch)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.alphanumeric","title":"alphanumeric","text":"<pre><code>alphanumeric(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def alphanumeric(value):\n    if value is None:\n        raise Invalid(\"string value is None\")\n    value = str(value)\n    if not value.isalnum():\n        raise Invalid(f\"{value} is not alphanumeric\")\n    return value\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.bind_key","title":"bind_key","text":"<pre><code>bind_key(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def bind_key(value):\n    value = string_strict(value)\n    parts = [value[i : i + 2] for i in range(0, len(value), 2)]\n    if len(parts) != 16:\n        raise Invalid(\"Bind key must consist of 16 hexadecimal numbers\")\n    parts_int = []\n    if any(len(part) != 2 for part in parts):\n        raise Invalid(\"Bind key must be format XX\")\n    for part in parts:\n        try:\n            parts_int.append(int(part, 16))\n        except ValueError:\n            # pylint: disable=raise-missing-from\n            raise Invalid(\"Bind key must be hex values from 00 to FF\")\n\n    return \"\".join(f\"{part:02X}\" for part in parts_int)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.boolean","title":"boolean","text":"<pre><code>boolean(value)\n</code></pre> <p>Validate the given config option to be a boolean.</p> <p>This option allows a bunch of different ways of expressing boolean values:  - instance of boolean  - 'true'/'false'  - 'yes'/'no'  - 'enable'/disable</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def boolean(value):\n    \"\"\"Validate the given config option to be a boolean.\n\n    This option allows a bunch of different ways of expressing boolean values:\n     - instance of boolean\n     - 'true'/'false'\n     - 'yes'/'no'\n     - 'enable'/disable\n    \"\"\"\n    check_not_templatable(value)\n    if isinstance(value, bool):\n        return value\n    if isinstance(value, str):\n        value = value.lower()\n        if value in (\"true\", \"yes\", \"on\", \"enable\"):\n            return True\n        if value in (\"false\", \"no\", \"off\", \"disable\"):\n            return False\n    raise Invalid(\n        f\"Expected boolean value, but cannot convert {value} to a boolean. Please use 'true' or 'false'\"\n    )\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.check_not_templatable","title":"check_not_templatable","text":"<pre><code>check_not_templatable(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def check_not_templatable(value):\n    if isinstance(value, Lambda):\n        raise Invalid(\"This option is not templatable!\")\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.color_temperature","title":"color_temperature","text":"<pre><code>color_temperature(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def color_temperature(value):\n    try:\n        val = _color_temperature_mireds(value)\n    except Invalid:\n        val = 1000000.0 / _color_temperature_kelvin(value)\n    if val &lt; 0:\n        raise Invalid(\"Color temperature cannot be negative\")\n    return val\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.declare_id","title":"declare_id","text":"<pre><code>declare_id(type)\n</code></pre> <p>Declare that this configuration option should be used to declare a variable ID with the given type.</p> <p>If two IDs with the same name exist, a validation error is thrown.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def declare_id(type):\n    \"\"\"Declare that this configuration option should be used to declare a variable ID\n    with the given type.\n\n    If two IDs with the same name exist, a validation error is thrown.\n    \"\"\"\n\n    @schema_extractor(\"declare_id\")\n    def validator(value):\n        if value == SCHEMA_EXTRACT:\n            return type\n\n        check_not_templatable(value)\n        if value is None:\n            return core.ID(None, is_declaration=True, type=type)\n\n        if isinstance(value, Extend):\n            raise Invalid(f\"Source for extension of ID '{value.value}' was not found.\")\n\n        if isinstance(value, Remove):\n            raise Invalid(f\"Source for Removal of ID '{value.value}' was not found.\")\n\n        return core.ID(validate_id_name(value), is_declaration=True, type=type)\n\n    return validator\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.dimensions","title":"dimensions","text":"<pre><code>dimensions(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def dimensions(value):\n    if isinstance(value, list):\n        if len(value) != 2:\n            raise Invalid(f\"Dimensions must have a length of two, not {len(value)}\")\n        try:\n            width, height = int(value[0]), int(value[1])\n        except ValueError:\n            # pylint: disable=raise-missing-from\n            raise Invalid(\"Width and height dimensions must be integers\")\n        if width &lt;= 0 or height &lt;= 0:\n            raise Invalid(\"Width and height must at least be 1\")\n        return [width, height]\n    value = string(value)\n    match = re.match(r\"\\s*([0-9]+)\\s*[xX]\\s*([0-9]+)\\s*\", value)\n    if not match:\n        raise Invalid(\n            \"Invalid value '{}' for dimensions. Only WIDTHxHEIGHT is allowed.\"\n        )\n    return dimensions([match.group(1), match.group(2)])\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.directory","title":"directory","text":"<pre><code>directory(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def directory(value):\n    import json\n\n    value = string(value)\n    path = CORE.relative_config_path(value)\n\n    if CORE.vscode and (\n        not CORE.ace or os.path.abspath(path) == os.path.abspath(CORE.config_path)\n    ):\n        print(\n            json.dumps(\n                {\n                    \"type\": \"check_directory_exists\",\n                    \"path\": path,\n                }\n            )\n        )\n        data = json.loads(input())\n        assert data[\"type\"] == \"directory_exists_response\"\n        if data[\"content\"]:\n            return value\n        raise Invalid(\n            f\"Could not find directory '{path}'. Please make sure it exists (full path: {os.path.abspath(path)}).\"\n        )\n\n    if not os.path.exists(path):\n        raise Invalid(\n            f\"Could not find directory '{path}'. Please make sure it exists (full path: {os.path.abspath(path)}).\"\n        )\n    if not os.path.isdir(path):\n        raise Invalid(\n            f\"Path '{path}' is not a directory (full path: {os.path.abspath(path)}).\"\n        )\n    return value\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.domain","title":"domain","text":"<pre><code>domain(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def domain(value):\n    value = string(value)\n    if re.match(vol.DOMAIN_REGEX, value) is not None:\n        return value\n    try:\n        return str(ipv4(value))\n    except Invalid as err:\n        raise Invalid(f\"Invalid domain: {value}\") from err\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.domain_name","title":"domain_name","text":"<pre><code>domain_name(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def domain_name(value):\n    value = string_strict(value)\n    if not value:\n        return value\n    if not value.startswith(\".\"):\n        raise Invalid(\"Domain name must start with .\")\n    if value.startswith(\"..\"):\n        raise Invalid(\"Domain name must start with single .\")\n    for c in value:\n        if not (c.isalnum() or c in \"._-\"):\n            raise Invalid(\n                \"Domain name can only have alphanumeric characters and _ or -\"\n            )\n    return value\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.ensure_list","title":"ensure_list","text":"<pre><code>ensure_list(*validators)\n</code></pre> <p>Validate this configuration option to be a list.</p> <p>If the config value is not a list, it is automatically converted to a single-item list.</p> <p>None and empty dictionaries are converted to empty lists.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>@schema_extractor_list\ndef ensure_list(*validators):\n    \"\"\"Validate this configuration option to be a list.\n\n    If the config value is not a list, it is automatically converted to a\n    single-item list.\n\n    None and empty dictionaries are converted to empty lists.\n    \"\"\"\n    user = All(*validators)\n    list_schema = Schema([user])\n\n    def validator(value):\n        check_not_templatable(value)\n        if value is None or (isinstance(value, dict) and not value):\n            return []\n        if not isinstance(value, list):\n            return [user(value)]\n        return list_schema(value)\n\n    return validator\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.ensure_schema","title":"ensure_schema","text":"<pre><code>ensure_schema(schema)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def ensure_schema(schema):\n    if not isinstance(schema, vol.Schema):\n        return Schema(schema)\n    return schema\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.entity_category","title":"entity_category","text":"<pre><code>entity_category(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def entity_category(value):\n    return enum(ENTITY_CATEGORIES, lower=True)(value)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.entity_id","title":"entity_id","text":"<pre><code>entity_id(value)\n</code></pre> <p>Validate that this option represents a valid Home Assistant entity id.</p> <p>Should only be used for 'homeassistant' platforms.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def entity_id(value):\n    \"\"\"Validate that this option represents a valid Home Assistant entity id.\n\n    Should only be used for 'homeassistant' platforms.\n    \"\"\"\n    value = string_strict(value).lower()\n    if value.count(\".\") != 1:\n        raise Invalid(\"Entity ID must have exactly one dot in it\")\n    for x in value.split(\".\"):\n        for c in x:\n            if c not in ENTITY_ID_CHARACTERS:\n                raise Invalid(f\"Invalid character for entity ID: {c}\")\n    return value\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.enum","title":"enum","text":"<pre><code>enum(mapping, **kwargs)\n</code></pre> <p>Validate this config option against an enum mapping.</p> <p>The mapping should be a dictionary with the key representing the config value name and a value representing the expression to set during code generation.</p> <p>Accepts all kwargs of one_of.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def enum(mapping, **kwargs):\n    \"\"\"Validate this config option against an enum mapping.\n\n    The mapping should be a dictionary with the key representing the config value name and\n    a value representing the expression to set during code generation.\n\n    Accepts all kwargs of one_of.\n    \"\"\"\n    assert isinstance(mapping, dict)\n    one_of_validator = one_of(*mapping, **kwargs)\n\n    @schema_extractor(\"enum\")\n    def validator(value):\n        if value == SCHEMA_EXTRACT:\n            return mapping\n\n        value = one_of_validator(value)\n        value = add_class_to_obj(value, core.EnumValue)\n        value.enum_value = mapping[value]\n        return value\n\n    return validator\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.extract_keys","title":"extract_keys","text":"<pre><code>extract_keys(schema)\n</code></pre> <p>Extract the names of the keys from the given schema.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def extract_keys(schema):\n    \"\"\"Extract the names of the keys from the given schema.\"\"\"\n    if isinstance(schema, Schema):\n        schema = schema.schema\n    assert isinstance(schema, dict)\n    keys = []\n    for skey in list(schema.keys()):\n        if isinstance(skey, str):\n            keys.append(skey)\n        elif isinstance(skey, vol.Marker) and isinstance(skey.schema, str):\n            keys.append(skey.schema)\n        else:\n            raise ValueError()\n    keys.sort()\n    return keys\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.file_","title":"file_","text":"<pre><code>file_(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def file_(value):\n    import json\n\n    value = string(value)\n    path = CORE.relative_config_path(value)\n\n    if CORE.vscode and (\n        not CORE.ace or os.path.abspath(path) == os.path.abspath(CORE.config_path)\n    ):\n        print(\n            json.dumps(\n                {\n                    \"type\": \"check_file_exists\",\n                    \"path\": path,\n                }\n            )\n        )\n        data = json.loads(input())\n        assert data[\"type\"] == \"file_exists_response\"\n        if data[\"content\"]:\n            return value\n        raise Invalid(\n            f\"Could not find file '{path}'. Please make sure it exists (full path: {os.path.abspath(path)}).\"\n        )\n\n    if not os.path.exists(path):\n        raise Invalid(\n            f\"Could not find file '{path}'. Please make sure it exists (full path: {os.path.abspath(path)}).\"\n        )\n    if not os.path.isfile(path):\n        raise Invalid(\n            f\"Path '{path}' is not a file (full path: {os.path.abspath(path)}).\"\n        )\n    return value\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.float_range","title":"float_range","text":"<pre><code>float_range(\n    min=None, max=None, min_included=True, max_included=True\n)\n</code></pre> <p>Validate that the config option is a floating point number in the given range.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def float_range(min=None, max=None, min_included=True, max_included=True):\n    \"\"\"Validate that the config option is a floating point number in the given range.\"\"\"\n    if min is not None:\n        assert isinstance(min, (int, float))\n    if max is not None:\n        assert isinstance(max, (int, float))\n    return All(\n        float_,\n        Range(min=min, max=max, min_included=min_included, max_included=max_included),\n    )\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.float_with_unit","title":"float_with_unit","text":"<pre><code>float_with_unit(\n    quantity, regex_suffix, optional_unit=False\n)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def float_with_unit(quantity, regex_suffix, optional_unit=False):\n    pattern = re.compile(\n        f\"^([-+]?[0-9]*\\\\.?[0-9]*)\\\\s*(\\\\w*?){regex_suffix}$\", re.UNICODE\n    )\n\n    def validator(value):\n        if optional_unit:\n            try:\n                return float_(value)\n            except Invalid:\n                pass\n        match = pattern.match(string(value))\n\n        if match is None:\n            raise Invalid(f\"Expected {quantity} with unit, got {value}\")\n\n        mantissa = float(match.group(1))\n        if match.group(2) not in METRIC_SUFFIXES:\n            raise Invalid(f\"Invalid {quantity} suffix {match.group(2)}\")\n\n        multiplier = METRIC_SUFFIXES[match.group(2)]\n        return mantissa * multiplier\n\n    return validator\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.git_ref","title":"git_ref","text":"<pre><code>git_ref(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def git_ref(value):\n    if re.match(r\"[a-zA-Z0-9\\-_.\\./]+\", value) is None:\n        raise Invalid(\"Not a valid git ref\")\n    return value\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.has_at_least_one_key","title":"has_at_least_one_key","text":"<pre><code>has_at_least_one_key(*keys)\n</code></pre> <p>Validate that at least one of the given keys exist in the config.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def has_at_least_one_key(*keys):\n    \"\"\"Validate that at least one of the given keys exist in the config.\"\"\"\n\n    def validate(obj):\n        \"\"\"Test keys exist in dict.\"\"\"\n        if not isinstance(obj, dict):\n            raise Invalid(\"expected dictionary\")\n\n        if not any(k in keys for k in obj):\n            raise Invalid(f\"Must contain at least one of {', '.join(keys)}.\")\n        return obj\n\n    return validate\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.has_at_most_one_key","title":"has_at_most_one_key","text":"<pre><code>has_at_most_one_key(*keys)\n</code></pre> <p>Validate that at most one of the given keys exist in the config.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def has_at_most_one_key(*keys):\n    \"\"\"Validate that at most one of the given keys exist in the config.\"\"\"\n\n    def validate(obj):\n        if not isinstance(obj, dict):\n            raise Invalid(\"expected dictionary\")\n\n        number = sum(k in keys for k in obj)\n        if number &gt; 1:\n            raise Invalid(f\"Cannot specify more than one of {', '.join(keys)}.\")\n        return obj\n\n    return validate\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.has_exactly_one_key","title":"has_exactly_one_key","text":"<pre><code>has_exactly_one_key(*keys)\n</code></pre> <p>Validate that exactly one of the given keys exist in the config.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def has_exactly_one_key(*keys):\n    \"\"\"Validate that exactly one of the given keys exist in the config.\"\"\"\n\n    def validate(obj):\n        if not isinstance(obj, dict):\n            raise Invalid(\"expected dictionary\")\n\n        number = sum(k in keys for k in obj)\n        if number &gt; 1:\n            raise Invalid(f\"Cannot specify more than one of {', '.join(keys)}.\")\n        if number &lt; 1:\n            raise Invalid(f\"Must contain exactly one of {', '.join(keys)}.\")\n        return obj\n\n    return validate\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.has_none_or_all_keys","title":"has_none_or_all_keys","text":"<pre><code>has_none_or_all_keys(*keys)\n</code></pre> <p>Validate that none or all of the given keys exist in the config.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def has_none_or_all_keys(*keys):\n    \"\"\"Validate that none or all of the given keys exist in the config.\"\"\"\n\n    def validate(obj):\n        if not isinstance(obj, dict):\n            raise Invalid(\"expected dictionary\")\n\n        number = sum(k in keys for k in obj)\n        if number != 0 and number != len(keys):\n            raise Invalid(f\"Must specify either none or all of {', '.join(keys)}.\")\n        return obj\n\n    return validate\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.hex_int","title":"hex_int","text":"<pre><code>hex_int(value)\n</code></pre> <p>Validate the given value to be a hex integer. This is mostly for cosmetic purposes of the generated code.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def hex_int(value):\n    \"\"\"Validate the given value to be a hex integer. This is mostly for cosmetic\n    purposes of the generated code.\n    \"\"\"\n    return HexInt(int_(value))\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.hex_int_range","title":"hex_int_range","text":"<pre><code>hex_int_range(\n    min=None, max=None, min_included=True, max_included=True\n)\n</code></pre> <p>Validate that the config option is an integer in the given range.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def hex_int_range(min=None, max=None, min_included=True, max_included=True):\n    \"\"\"Validate that the config option is an integer in the given range.\"\"\"\n    return All(\n        hex_int,\n        Range(min=min, max=max, min_included=min_included, max_included=max_included),\n    )\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.hostname","title":"hostname","text":"<pre><code>hostname(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def hostname(value):\n    value = string(value)\n    if re.match(r\"^[a-z0-9-]{1,63}$\", value, re.IGNORECASE) is not None:\n        return value\n    raise Invalid(f\"Invalid hostname: {value}\")\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.icon","title":"icon","text":"<pre><code>icon(value)\n</code></pre> <p>Validate that a given config value is a valid icon.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def icon(value):\n    \"\"\"Validate that a given config value is a valid icon.\"\"\"\n    value = string_strict(value)\n    if not value:\n        return value\n    if re.match(\"^[\\\\w\\\\-]+:[\\\\w\\\\-]+$\", value):\n        return value\n    raise Invalid(\n        'Icons must match the format \"[icon pack]:[icon]\", e.g. \"mdi:home-assistant\"'\n    )\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.int_","title":"int_","text":"<pre><code>int_(value)\n</code></pre> <p>Validate that the config option is an integer.</p> <p>Automatically also converts strings to ints.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def int_(value):\n    \"\"\"Validate that the config option is an integer.\n\n    Automatically also converts strings to ints.\n    \"\"\"\n    check_not_templatable(value)\n    if isinstance(value, int):\n        return value\n    if isinstance(value, float):\n        if int(value) == value:\n            return int(value)\n        raise Invalid(\n            f\"This option only accepts integers with no fractional part. Please remove the fractional part from {value}\"\n        )\n    value = string_strict(value).lower()\n    base = 10\n    if value.startswith(\"0x\"):\n        base = 16\n    try:\n        return int(value, base)\n    except ValueError:\n        # pylint: disable=raise-missing-from\n        raise Invalid(f\"Expected integer, but cannot parse {value} as an integer\")\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.int_range","title":"int_range","text":"<pre><code>int_range(\n    min=None, max=None, min_included=True, max_included=True\n)\n</code></pre> <p>Validate that the config option is an integer in the given range.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def int_range(min=None, max=None, min_included=True, max_included=True):\n    \"\"\"Validate that the config option is an integer in the given range.\"\"\"\n    if min is not None:\n        assert isinstance(min, int)\n    if max is not None:\n        assert isinstance(max, int)\n    return All(\n        int_,\n        Range(min=min, max=max, min_included=min_included, max_included=max_included),\n    )\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.invalid","title":"invalid","text":"<pre><code>invalid(message)\n</code></pre> <p>Mark this value as invalid. Each time any value is passed here it will result in a validation error with the given message.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def invalid(message):\n    \"\"\"Mark this value as invalid. Each time *any* value is passed here it will result in a\n    validation error with the given message.\n    \"\"\"\n\n    def validator(value):\n        raise Invalid(message)\n\n    return validator\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.ipv4","title":"ipv4","text":"<pre><code>ipv4(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def ipv4(value):\n    if isinstance(value, list):\n        parts = value\n    elif isinstance(value, str):\n        parts = value.split(\".\")\n    elif isinstance(value, IPAddress):\n        return value\n    else:\n        raise Invalid(\"IPv4 address must consist of either string or integer list\")\n    if len(parts) != 4:\n        raise Invalid(\"IPv4 address must consist of four point-separated integers\")\n    parts_ = list(map(int, parts))\n    if not all(0 &lt;= x &lt; 256 for x in parts_):\n        raise Invalid(\"IPv4 address parts must be in range from 0 to 255\")\n    return IPAddress(*parts_)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.lambda_","title":"lambda_","text":"<pre><code>lambda_(value)\n</code></pre> <p>Coerce this configuration option to a lambda.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def lambda_(value):\n    \"\"\"Coerce this configuration option to a lambda.\"\"\"\n    if not isinstance(value, Lambda):\n        value = make_data_base(Lambda(string_strict(value)), value)\n    entity_id_parts = re.split(LAMBDA_ENTITY_ID_PROG, value.value)\n    if len(entity_id_parts) != 1:\n        entity_ids = \" \".join(\n            f\"'{entity_id_parts[i]}'\" for i in range(1, len(entity_id_parts), 2)\n        )\n        raise Invalid(\n            f\"Lambda contains reference to entity-id-style ID {entity_ids}. The id() wrapper only works for ESPHome-internal types. For importing states from Home Assistant use the 'homeassistant' sensor platforms.\"\n        )\n    return value\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.mac_address","title":"mac_address","text":"<pre><code>mac_address(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def mac_address(value):\n    value = string_strict(value)\n    parts = value.split(\":\")\n    if len(parts) != 6:\n        raise Invalid(\"MAC Address must consist of 6 : (colon) separated parts\")\n    parts_int = []\n    if any(len(part) != 2 for part in parts):\n        raise Invalid(\"MAC Address must be format XX:XX:XX:XX:XX:XX\")\n    for part in parts:\n        try:\n            parts_int.append(int(part, 16))\n        except ValueError:\n            # pylint: disable=raise-missing-from\n            raise Invalid(\"MAC Address parts must be hexadecimal values from 00 to FF\")\n\n    return core.MACAddress(*parts_int)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.maybe_simple_value","title":"maybe_simple_value","text":"<pre><code>maybe_simple_value(*validators, **kwargs)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def maybe_simple_value(*validators, **kwargs):\n    key = kwargs.pop(\"key\", CONF_VALUE)\n    validator = All(*validators)\n\n    @schema_extractor(\"maybe\")\n    def validate(value):\n        if value == SCHEMA_EXTRACT:\n            return (validator, key)\n\n        if isinstance(value, dict) and key in value:\n            return validator(value)\n        return validator({key: value})\n\n    return validate\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.mqtt_payload","title":"mqtt_payload","text":"<pre><code>mqtt_payload(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def mqtt_payload(value):\n    if value is None:\n        return \"\"\n    return string(value)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.mqtt_qos","title":"mqtt_qos","text":"<pre><code>mqtt_qos(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def mqtt_qos(value):\n    try:\n        value = int(value)\n    except (TypeError, ValueError):\n        # pylint: disable=raise-missing-from\n        raise Invalid(f\"MQTT Quality of Service must be integer, got {value}\")\n    return one_of(0, 1, 2)(value)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.none","title":"none","text":"<pre><code>none(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def none(value):\n    if value in (\"none\", \"None\"):\n        return None\n    if boolean(value) is False:\n        return None\n    raise Invalid(\"Must be none\")\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.one_of","title":"one_of","text":"<pre><code>one_of(*values, **kwargs)\n</code></pre> <p>Validate that the config option is one of the given values.</p> <p>:Keyword Arguments:   - lower (<code>bool</code>, default=False): Whether to convert the incoming values to lowercase     strings.   - upper (<code>bool</code>, default=False): Whether to convert the incoming values to uppercase     strings.   - int (<code>bool</code>, default=False): Whether to convert the incoming values to integers.   - float (<code>bool</code>, default=False): Whether to convert the incoming values to floats.   - space (<code>str</code>, default=' '): What to convert spaces in the input string to.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <p>The valid values for this type</p> <code>()</code> Source code in <code>esphome\\config_validation.py</code> <pre><code>def one_of(*values, **kwargs):\n    \"\"\"Validate that the config option is one of the given values.\n\n    :param values: The valid values for this type\n\n    :Keyword Arguments:\n      - *lower* (``bool``, default=False): Whether to convert the incoming values to lowercase\n        strings.\n      - *upper* (``bool``, default=False): Whether to convert the incoming values to uppercase\n        strings.\n      - *int* (``bool``, default=False): Whether to convert the incoming values to integers.\n      - *float* (``bool``, default=False): Whether to convert the incoming values to floats.\n      - *space* (``str``, default=' '): What to convert spaces in the input string to.\n    \"\"\"\n    options = \", \".join(f\"'{x}'\" for x in values)\n    lower = kwargs.pop(\"lower\", False)\n    upper = kwargs.pop(\"upper\", False)\n    string_ = kwargs.pop(\"string\", False) or lower or upper\n    to_int = kwargs.pop(\"int\", False)\n    to_float = kwargs.pop(\"float\", False)\n    space = kwargs.pop(\"space\", \" \")\n    if kwargs:\n        raise ValueError\n\n    @schema_extractor(\"one_of\")\n    def validator(value):\n        if value == SCHEMA_EXTRACT:\n            return values\n\n        if string_:\n            value = string(value)\n            value = value.replace(\" \", space)\n        if to_int:\n            value = int_(value)\n        if to_float:\n            value = float_(value)\n        if lower:\n            value = Lower(value)\n        if upper:\n            value = Upper(value)\n        if value not in values:\n            import difflib\n\n            options_ = [str(x) for x in values]\n            option = str(value)\n            matches = difflib.get_close_matches(option, options_)\n            if matches:\n                matches_str = \", \".join(f\"'{x}'\" for x in matches)\n                raise Invalid(f\"Unknown value '{value}', did you mean {matches_str}?\")\n            raise Invalid(f\"Unknown value '{value}', valid options are {options}.\")\n        return value\n\n    return validator\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.only_on","title":"only_on","text":"<pre><code>only_on(platforms)\n</code></pre> <p>Validate that this option can only be specified on the given target platforms.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def only_on(platforms):\n    \"\"\"Validate that this option can only be specified on the given target platforms.\"\"\"\n    if not isinstance(platforms, list):\n        platforms = [platforms]\n\n    def validator_(obj):\n        if CORE.target_platform not in platforms:\n            raise Invalid(f\"This feature is only available on {platforms}\")\n        return obj\n\n    return validator_\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.only_with_framework","title":"only_with_framework","text":"<pre><code>only_with_framework(frameworks)\n</code></pre> <p>Validate that this option can only be specified on the given frameworks.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def only_with_framework(frameworks):\n    \"\"\"Validate that this option can only be specified on the given frameworks.\"\"\"\n    if not isinstance(frameworks, list):\n        frameworks = [frameworks]\n\n    def validator_(obj):\n        if CORE.target_framework not in frameworks:\n            raise Invalid(\n                f\"This feature is only available with frameworks {frameworks}\"\n            )\n        return obj\n\n    return validator_\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.percentage","title":"percentage","text":"<pre><code>percentage(value)\n</code></pre> <p>Validate that the value is a percentage.</p> <p>The resulting value is an integer in the range 0.0 to 1.0.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def percentage(value):\n    \"\"\"Validate that the value is a percentage.\n\n    The resulting value is an integer in the range 0.0 to 1.0.\n    \"\"\"\n    value = possibly_negative_percentage(value)\n    return zero_to_one_float(value)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.percentage_int","title":"percentage_int","text":"<pre><code>percentage_int(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def percentage_int(value):\n    if isinstance(value, str) and value.endswith(\"%\"):\n        value = int(value[:-1].rstrip())\n    return value\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.platformio_version_constraint","title":"platformio_version_constraint","text":"<pre><code>platformio_version_constraint(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def platformio_version_constraint(value):\n    # for documentation on valid version constraints:\n    # https://docs.platformio.org/en/latest/core/userguide/platforms/cmd_install.html#cmd-platform-install\n\n    value = string_strict(value)\n    constraints = []\n    for item in value.split(\",\"):\n        # find and strip prefix operator\n        op = None\n        for test_op in (\"^\", \"~\", \"&gt;=\", \"&gt;\", \"&lt;=\", \"&lt;\", \"!=\"):\n            if item.startswith(test_op):\n                op = test_op\n                item = item[len(test_op) :]\n                break\n\n        constraints.append((op, version_number(item)))\n    return constraints\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.polling_component_schema","title":"polling_component_schema","text":"<pre><code>polling_component_schema(default_update_interval)\n</code></pre> <p>Validate that this component represents a PollingComponent with a configurable update_interval.</p> <p>Parameters:</p> Name Type Description Default <code>default_update_interval</code> <p>The default update interval to set for the integration.</p> required Source code in <code>esphome\\config_validation.py</code> <pre><code>def polling_component_schema(default_update_interval):\n    \"\"\"Validate that this component represents a PollingComponent with a configurable\n    update_interval.\n\n    :param default_update_interval: The default update interval to set for the integration.\n    \"\"\"\n    if default_update_interval is None:\n        return COMPONENT_SCHEMA.extend(\n            {\n                Required(CONF_UPDATE_INTERVAL): default_update_interval,\n            }\n        )\n    assert isinstance(default_update_interval, str)\n    return COMPONENT_SCHEMA.extend(\n        {\n            Optional(\n                CONF_UPDATE_INTERVAL, default=default_update_interval\n            ): update_interval,\n        }\n    )\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.possibly_negative_percentage","title":"possibly_negative_percentage","text":"<pre><code>possibly_negative_percentage(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def possibly_negative_percentage(value):\n    has_percent_sign = False\n    if isinstance(value, str):\n        try:\n            if value.endswith(\"%\"):\n                has_percent_sign = True\n                value = float(value[:-1].rstrip()) / 100.0\n            else:\n                value = float(value)\n        except ValueError:\n            # pylint: disable=raise-missing-from\n            raise Invalid(\"invalid number\")\n    try:\n        if value &gt; 1:\n            msg = \"Percentage must not be higher than 100%.\"\n            if not has_percent_sign:\n                msg += \" Please put a percent sign after the number!\"\n            raise Invalid(msg)\n        if value &lt; -1:\n            msg = \"Percentage must not be smaller than -100%.\"\n            if not has_percent_sign:\n                msg += \" Please put a percent sign after the number!\"\n            raise Invalid(msg)\n    except TypeError:\n        raise Invalid(  # pylint: disable=raise-missing-from\n            \"Expected percentage or float between -1.0 and 1.0\"\n        )\n    return negative_one_to_one_float(value)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.prepend_path","title":"prepend_path","text":"<pre><code>prepend_path(path)\n</code></pre> <p>A contextmanager helper to prepend a path to all voluptuous errors.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>@contextmanager\ndef prepend_path(path):\n    \"\"\"A contextmanager helper to prepend a path to all voluptuous errors.\"\"\"\n    if not isinstance(path, (list, tuple)):\n        path = [path]\n    try:\n        yield\n    except vol.Invalid as e:\n        e.prepend(path)\n        raise e\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.publish_topic","title":"publish_topic","text":"<pre><code>publish_topic(value)\n</code></pre> <p>Validate that we can publish using this MQTT topic.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def publish_topic(value):\n    \"\"\"Validate that we can publish using this MQTT topic.\"\"\"\n    value = _valid_topic(value)\n    if \"+\" in value or \"#\" in value:\n        raise Invalid(\"Wildcards can not be used in topic names\")\n    return value\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.remove_prepend_path","title":"remove_prepend_path","text":"<pre><code>remove_prepend_path(path)\n</code></pre> <p>A contextmanager helper to remove a path from a voluptuous error.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>@contextmanager\ndef remove_prepend_path(path):\n    \"\"\"A contextmanager helper to remove a path from a voluptuous error.\"\"\"\n    if not isinstance(path, (list, tuple)):\n        path = [path]\n    try:\n        yield\n    except vol.Invalid as e:\n        if list_starts_with(e.path, path):\n            # Can't set e.path (namedtuple\n            for _ in range(len(path)):\n                e.path.pop(0)\n        raise e\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.require_esphome_version","title":"require_esphome_version","text":"<pre><code>require_esphome_version(year, month, patch)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def require_esphome_version(year, month, patch):\n    def validator(value):\n        esphome_version = parse_esphome_version()\n        if esphome_version &lt; (year, month, patch):\n            requires_version = f\"{year}.{month}.{patch}\"\n            raise Invalid(\n                f\"This component requires at least ESPHome version {requires_version}\"\n            )\n        return value\n\n    return validator\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.require_framework_version","title":"require_framework_version","text":"<pre><code>require_framework_version(\n    *,\n    esp_idf=None,\n    esp32_arduino=None,\n    esp8266_arduino=None,\n    rp2040_arduino=None,\n    max_version=False,\n    extra_message=None\n)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def require_framework_version(\n    *,\n    esp_idf=None,\n    esp32_arduino=None,\n    esp8266_arduino=None,\n    rp2040_arduino=None,\n    max_version=False,\n    extra_message=None,\n):\n    def validator(value):\n        core_data = CORE.data[KEY_CORE]\n        framework = core_data[KEY_TARGET_FRAMEWORK]\n        if framework == \"esp-idf\":\n            if esp_idf is None:\n                msg = \"This feature is incompatible with esp-idf\"\n                if extra_message:\n                    msg += f\". {extra_message}\"\n                raise Invalid(msg)\n            required = esp_idf\n        elif CORE.is_esp32 and framework == \"arduino\":\n            if esp32_arduino is None:\n                msg = \"This feature is incompatible with ESP32 using arduino framework\"\n                if extra_message:\n                    msg += f\". {extra_message}\"\n                raise Invalid(msg)\n            required = esp32_arduino\n        elif CORE.is_esp8266 and framework == \"arduino\":\n            if esp8266_arduino is None:\n                msg = \"This feature is incompatible with ESP8266\"\n                if extra_message:\n                    msg += f\". {extra_message}\"\n                raise Invalid(msg)\n            required = esp8266_arduino\n        elif CORE.is_rp2040 and framework == \"arduino\":\n            if rp2040_arduino is None:\n                msg = \"This feature is incompatible with RP2040\"\n                if extra_message:\n                    msg += f\". {extra_message}\"\n                raise Invalid(msg)\n            required = rp2040_arduino\n        else:\n            raise Invalid(\n                f\"\"\"\n            Internal Error: require_framework_version does not support this platform configuration\n                platform: {core_data[KEY_TARGET_PLATFORM]}\n                framework: {framework}\n\n            Please report this issue on GitHub -&gt; https://github.com/esphome/issues/issues/new?template=bug_report.yml.\n            \"\"\"\n            )\n\n        if max_version:\n            if core_data[KEY_FRAMEWORK_VERSION] &gt; required:\n                msg = f\"This feature requires framework version {required} or lower\"\n                if extra_message:\n                    msg += f\". {extra_message}\"\n                raise Invalid(msg)\n            return value\n\n        if core_data[KEY_FRAMEWORK_VERSION] &lt; required:\n            msg = f\"This feature requires at least framework version {required}\"\n            if extra_message:\n                msg += f\". {extra_message}\"\n            raise Invalid(msg)\n        return value\n\n    return validator\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.requires_component","title":"requires_component","text":"<pre><code>requires_component(comp)\n</code></pre> <p>Validate that this option can only be specified when the component <code>comp</code> is loaded.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def requires_component(comp):\n    \"\"\"Validate that this option can only be specified when the component `comp` is loaded.\"\"\"\n\n    def validator(value):\n        if comp not in CORE.loaded_integrations:\n            raise Invalid(f\"This option requires component {comp}\")\n        return value\n\n    return validator\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.requires_friendly_name","title":"requires_friendly_name","text":"<pre><code>requires_friendly_name(message)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def requires_friendly_name(message):\n    def validate(value):\n        if CORE.friendly_name is None:\n            raise Invalid(message)\n        return value\n\n    return validate\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.returning_lambda","title":"returning_lambda","text":"<pre><code>returning_lambda(value)\n</code></pre> <p>Coerce this configuration option to a lambda.</p> <p>Additionally, make sure the lambda returns something.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def returning_lambda(value):\n    \"\"\"Coerce this configuration option to a lambda.\n\n    Additionally, make sure the lambda returns something.\n    \"\"\"\n    value = lambda_(value)\n    if \"return\" not in value.value:\n        raise Invalid(\n            \"Lambda doesn't contain a 'return' statement, but the lambda \"\n            \"is expected to return a value. \\n\"\n            \"Please make sure the lambda contains at least one \"\n            \"return statement.\"\n        )\n    return value\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.source_refresh","title":"source_refresh","text":"<pre><code>source_refresh(value: str)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def source_refresh(value: str):\n    if value.lower() == \"always\":\n        return source_refresh(\"0s\")\n    if value.lower() == \"never\":\n        return source_refresh(\"365250d\")\n    return positive_time_period_seconds(value)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.ssid","title":"ssid","text":"<pre><code>ssid(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def ssid(value):\n    value = string_strict(value)\n    if not value:\n        raise Invalid(\"SSID can't be empty.\")\n    if len(value) &gt; 32:\n        raise Invalid(\"SSID can't be longer than 32 characters\")\n    return value\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.string","title":"string","text":"<pre><code>string(value)\n</code></pre> <p>Validate that a configuration value is a string. If not, automatically converts to a string.</p> <p>Note that this can be lossy, for example the input value 60.00 (float) will be turned into \"60.0\" (string). For values where this could be a problem <code>string_string</code> has to be used.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def string(value):\n    \"\"\"Validate that a configuration value is a string. If not, automatically converts to a string.\n\n    Note that this can be lossy, for example the input value 60.00 (float) will be turned into\n    \"60.0\" (string). For values where this could be a problem `string_string` has to be used.\n    \"\"\"\n    check_not_templatable(value)\n    if isinstance(value, (dict, list)):\n        raise Invalid(\"string value cannot be dictionary or list.\")\n    if isinstance(value, bool):\n        raise Invalid(\n            \"Auto-converted this value to boolean, please wrap the value in quotes.\"\n        )\n    if isinstance(value, str):\n        return value\n    if value is not None:\n        return str(value)\n    raise Invalid(\"string value is None\")\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.string_strict","title":"string_strict","text":"<pre><code>string_strict(value)\n</code></pre> <p>Like string, but only allows strings, and does not automatically convert other types to strings.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def string_strict(value):\n    \"\"\"Like string, but only allows strings, and does not automatically convert other types to\n    strings.\"\"\"\n    check_not_templatable(value)\n    if isinstance(value, str):\n        return value\n    raise Invalid(\n        f\"Must be string, got {type(value)}. did you forget putting quotes around the value?\"\n    )\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.subscribe_topic","title":"subscribe_topic","text":"<pre><code>subscribe_topic(value)\n</code></pre> <p>Validate that we can subscribe using this MQTT topic.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def subscribe_topic(value):\n    \"\"\"Validate that we can subscribe using this MQTT topic.\"\"\"\n    value = _valid_topic(value)\n    for i in (i for i, c in enumerate(value) if c == \"+\"):\n        if (i &gt; 0 and value[i - 1] != \"/\") or (\n            i &lt; len(value) - 1 and value[i + 1] != \"/\"\n        ):\n            raise Invalid(\n                \"Single-level wildcard must occupy an entire level of the filter\"\n            )\n\n    index = value.find(\"#\")\n    if index != -1:\n        if index != len(value) - 1:\n            # If there are multiple wildcards, this will also trigger\n            raise Invalid(\n                \"Multi-level wildcard must be the last \"\n                \"character in the topic filter.\"\n            )\n        if len(value) &gt; 1 and value[index - 1] != \"/\":\n            raise Invalid(\"Multi-level wildcard must be after a topic level separator.\")\n\n    return value\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.suppress_invalid","title":"suppress_invalid","text":"<pre><code>suppress_invalid()\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>@contextmanager\ndef suppress_invalid():\n    try:\n        yield\n    except vol.Invalid:\n        pass\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.temperature","title":"temperature","text":"<pre><code>temperature(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def temperature(value):\n    err = None\n    try:\n        return _temperature_c(value)\n    except Invalid as orig_err:\n        err = orig_err\n\n    try:\n        kelvin = _temperature_k(value)\n        return kelvin - 273.15\n    except Invalid:\n        pass\n\n    try:\n        fahrenheit = _temperature_f(value)\n        return (fahrenheit - 32) * (5 / 9)\n    except Invalid:\n        pass\n\n    raise err\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.temperature_delta","title":"temperature_delta","text":"<pre><code>temperature_delta(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def temperature_delta(value):\n    err = None\n    try:\n        return _temperature_c(value)\n    except Invalid as orig_err:\n        err = orig_err\n\n    try:\n        return _temperature_k(value)\n    except Invalid:\n        pass\n\n    try:\n        fahrenheit = _temperature_f(value)\n        return fahrenheit * (5 / 9)\n    except Invalid:\n        pass\n\n    raise err\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.templatable","title":"templatable","text":"<pre><code>templatable(other_validators)\n</code></pre> <p>Validate that the configuration option can (optionally) be templated.</p> <p>The user can declare a value as template by using the '!lambda' tag. In that case, validation is skipped. Otherwise (if the value is not templated) the validator given as the first argument to this method is called.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def templatable(other_validators):\n    \"\"\"Validate that the configuration option can (optionally) be templated.\n\n    The user can declare a value as template by using the '!lambda' tag. In that case,\n    validation is skipped. Otherwise (if the value is not templated) the validator given\n    as the first argument to this method is called.\n    \"\"\"\n    schema = Schema(other_validators)\n\n    @schema_extractor(\"templatable\")\n    def validator(value):\n        if value == SCHEMA_EXTRACT:\n            return other_validators\n\n        if isinstance(value, Lambda):\n            return returning_lambda(value)\n        if isinstance(other_validators, dict):\n            return schema(value)\n        return schema(value)\n\n    return validator\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.time_of_day","title":"time_of_day","text":"<pre><code>time_of_day(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def time_of_day(value):\n    value = string(value)\n    try:\n        date = datetime.strptime(value, \"%H:%M:%S\")\n    except ValueError as err:\n        try:\n            date = datetime.strptime(value, \"%H:%M:%S %p\")\n        except ValueError:\n            # pylint: disable=raise-missing-from\n            raise Invalid(f\"Invalid time of day: {err}\")\n\n    return {\n        CONF_HOUR: date.hour,\n        CONF_MINUTE: date.minute,\n        CONF_SECOND: date.second,\n    }\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.time_period_in_microseconds_","title":"time_period_in_microseconds_","text":"<pre><code>time_period_in_microseconds_(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def time_period_in_microseconds_(value):\n    if value.nanoseconds is not None and value.nanoseconds != 0:\n        raise Invalid(\"Maximum precision is microseconds\")\n    return TimePeriodMicroseconds(**value.as_dict())\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.time_period_in_milliseconds_","title":"time_period_in_milliseconds_","text":"<pre><code>time_period_in_milliseconds_(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def time_period_in_milliseconds_(value):\n    if value.microseconds is not None and value.microseconds != 0:\n        raise Invalid(\"Maximum precision is milliseconds\")\n    return TimePeriodMilliseconds(**value.as_dict())\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.time_period_in_minutes_","title":"time_period_in_minutes_","text":"<pre><code>time_period_in_minutes_(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def time_period_in_minutes_(value):\n    if value.nanoseconds is not None and value.nanoseconds != 0:\n        raise Invalid(\"Maximum precision is minutes\")\n    if value.microseconds is not None and value.microseconds != 0:\n        raise Invalid(\"Maximum precision is minutes\")\n    if value.milliseconds is not None and value.milliseconds != 0:\n        raise Invalid(\"Maximum precision is minutes\")\n    if value.seconds is not None and value.seconds != 0:\n        raise Invalid(\"Maximum precision is minutes\")\n    return TimePeriodMinutes(**value.as_dict())\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.time_period_in_nanoseconds_","title":"time_period_in_nanoseconds_","text":"<pre><code>time_period_in_nanoseconds_(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def time_period_in_nanoseconds_(value):\n    return TimePeriodNanoseconds(**value.as_dict())\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.time_period_in_seconds_","title":"time_period_in_seconds_","text":"<pre><code>time_period_in_seconds_(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def time_period_in_seconds_(value):\n    if value.nanoseconds is not None and value.nanoseconds != 0:\n        raise Invalid(\"Maximum precision is seconds\")\n    if value.microseconds is not None and value.microseconds != 0:\n        raise Invalid(\"Maximum precision is seconds\")\n    if value.milliseconds is not None and value.milliseconds != 0:\n        raise Invalid(\"Maximum precision is seconds\")\n    return TimePeriodSeconds(**value.as_dict())\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.time_period_str_colon","title":"time_period_str_colon","text":"<pre><code>time_period_str_colon(value)\n</code></pre> <p>Validate and transform time offset with format HH:MM[:SS].</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def time_period_str_colon(value):\n    \"\"\"Validate and transform time offset with format HH:MM[:SS].\"\"\"\n    if isinstance(value, int):\n        raise Invalid(\"Make sure you wrap time values in quotes\")\n    if not isinstance(value, str):\n        raise Invalid(TIME_PERIOD_ERROR.format(value))\n\n    try:\n        parsed = [int(x) for x in value.split(\":\")]\n    except ValueError:\n        # pylint: disable=raise-missing-from\n        raise Invalid(TIME_PERIOD_ERROR.format(value))\n\n    if len(parsed) == 2:\n        hour, minute = parsed\n        second = 0\n    elif len(parsed) == 3:\n        hour, minute, second = parsed\n    else:\n        raise Invalid(TIME_PERIOD_ERROR.format(value))\n\n    return TimePeriod(hours=hour, minutes=minute, seconds=second)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.time_period_str_unit","title":"time_period_str_unit","text":"<pre><code>time_period_str_unit(value)\n</code></pre> <p>Validate and transform time period with time unit and integer value.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def time_period_str_unit(value):\n    \"\"\"Validate and transform time period with time unit and integer value.\"\"\"\n    check_not_templatable(value)\n\n    if isinstance(value, int):\n        raise Invalid(\n            f\"Don't know what '{value}' means as it has no time *unit*! Did you mean '{value}s'?\"\n        )\n    if isinstance(value, TimePeriod):\n        value = str(value)\n    if not isinstance(value, str):\n        raise Invalid(\"Expected string for time period with unit.\")\n\n    unit_to_kwarg = {\n        \"ns\": \"nanoseconds\",\n        \"nanoseconds\": \"nanoseconds\",\n        \"us\": \"microseconds\",\n        \"microseconds\": \"microseconds\",\n        \"ms\": \"milliseconds\",\n        \"milliseconds\": \"milliseconds\",\n        \"s\": \"seconds\",\n        \"sec\": \"seconds\",\n        \"seconds\": \"seconds\",\n        \"min\": \"minutes\",\n        \"minutes\": \"minutes\",\n        \"h\": \"hours\",\n        \"hours\": \"hours\",\n        \"d\": \"days\",\n        \"days\": \"days\",\n    }\n\n    match = re.match(r\"^([-+]?[0-9]*\\.?[0-9]*)\\s*(\\w*)$\", value)\n\n    if match is None:\n        raise Invalid(f\"Expected time period with unit, got {value}\")\n    kwarg = unit_to_kwarg[one_of(*unit_to_kwarg)(match.group(2))]\n\n    try:\n        return TimePeriod(**{kwarg: float(match.group(1))})\n    except ValueError as e:\n        raise Invalid(e) from e\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.typed_schema","title":"typed_schema","text":"<pre><code>typed_schema(schemas, **kwargs)\n</code></pre> <p>Create a schema that has a key to distinguish between schemas</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>@schema_extractor_typed\ndef typed_schema(schemas, **kwargs):\n    \"\"\"Create a schema that has a key to distinguish between schemas\"\"\"\n    key = kwargs.pop(\"key\", CONF_TYPE)\n    default_schema_option = kwargs.pop(\"default_type\", None)\n    key_validator = one_of(*schemas, **kwargs)\n\n    def validator(value):\n        if not isinstance(value, dict):\n            raise Invalid(\"Value must be dict\")\n        value = value.copy()\n        schema_option = value.pop(key, default_schema_option)\n        if schema_option is None:\n            raise Invalid(f\"{key} not specified!\")\n        key_v = key_validator(schema_option)\n        value = Schema(schemas[key_v])(value)\n        value[key] = key_v\n        return value\n\n    return validator\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.update_interval","title":"update_interval","text":"<pre><code>update_interval(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def update_interval(value):\n    if value == \"never\":\n        return 4294967295  # uint32_t max\n    return positive_time_period_milliseconds(value)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.url","title":"url","text":"<pre><code>url(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def url(value):\n    import urllib.parse\n\n    value = string_strict(value)\n    try:\n        parsed = urllib.parse.urlparse(value)\n    except ValueError as e:\n        raise Invalid(\"Not a valid URL\") from e\n\n    if not parsed.scheme or not parsed.netloc:\n        raise Invalid(\"Expected a URL scheme and host\")\n    return parsed.geturl()\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.use_id","title":"use_id","text":"<pre><code>use_id(type)\n</code></pre> <p>Declare that this configuration option should point to an ID with the given type.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def use_id(type):\n    \"\"\"Declare that this configuration option should point to an ID with the given type.\"\"\"\n\n    @schema_extractor(\"use_id\")\n    def validator(value):\n        if value == SCHEMA_EXTRACT:\n            return type\n\n        check_not_templatable(value)\n        if value is None:\n            return core.ID(None, is_declaration=False, type=type)\n        if (\n            isinstance(value, core.ID)\n            and value.is_declaration is False\n            and value.type is type\n        ):\n            return value\n\n        return core.ID(validate_id_name(value), is_declaration=False, type=type)\n\n    return validator\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.uuid","title":"uuid","text":"<pre><code>uuid(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def uuid(value):\n    return Coerce(uuid_.UUID)(value)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.valid","title":"valid","text":"<pre><code>valid(value)\n</code></pre> <p>A validator that is always valid and returns the value as-is.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def valid(value):\n    \"\"\"A validator that is always valid and returns the value as-is.\"\"\"\n    return value\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.valid_name","title":"valid_name","text":"<pre><code>valid_name(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def valid_name(value):\n    value = string_strict(value)\n\n    if CORE.vscode:\n        # If the value is a substitution, it can't be validated until the substitution\n        # is actually made.\n        sub_match = VARIABLE_PROG.search(value)\n        if sub_match:\n            return value\n\n    for c in value:\n        if c not in ALLOWED_NAME_CHARS:\n            raise Invalid(\n                f\"'{c}' is an invalid character for names. Valid characters are: \"\n                f\"{ALLOWED_NAME_CHARS} (lowercase, no spaces)\"\n            )\n    return value\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.validate_bytes","title":"validate_bytes","text":"<pre><code>validate_bytes(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def validate_bytes(value):\n    value = string(value)\n    match = re.match(r\"^([0-9]+)\\s*(\\w*?)(?:byte|B|b)?s?$\", value)\n\n    if match is None:\n        raise Invalid(f\"Expected number of bytes with unit, got {value}\")\n\n    mantissa = int(match.group(1))\n    if match.group(2) not in METRIC_SUFFIXES:\n        raise Invalid(f\"Invalid metric suffix {match.group(2)}\")\n    multiplier = METRIC_SUFFIXES[match.group(2)]\n    if multiplier &lt; 1:\n        raise Invalid(\n            f\"Only suffixes with positive exponents are supported. Got {match.group(2)}\"\n        )\n    return int(mantissa * multiplier)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.validate_id_name","title":"validate_id_name","text":"<pre><code>validate_id_name(value)\n</code></pre> <p>Validate that the given value would be a valid C++ identifier name.</p> Source code in <code>esphome\\config_validation.py</code> <pre><code>def validate_id_name(value):\n    \"\"\"Validate that the given value would be a valid C++ identifier name.\"\"\"\n    value = string(value)\n    if not value:\n        raise Invalid(\"ID must not be empty\")\n    if value[0].isdigit():\n        raise Invalid(\"First character in ID cannot be a digit.\")\n    if \"-\" in value:\n        raise Invalid(\n            \"Dashes are not supported in IDs, please use underscores instead.\"\n        )\n\n    if CORE.vscode:\n        # If the value is a substitution, it can't be validated until the substitution\n        # is actually made\n        sub_match = VARIABLE_PROG.match(value)\n        if sub_match:\n            return value\n\n    valid_chars = f\"{ascii_letters + digits}_\"\n    for char in value:\n        if char not in valid_chars:\n            raise Invalid(\n                f\"IDs must only consist of upper/lowercase characters, the underscorecharacter and numbers. The character '{char}' cannot be used\"\n            )\n    if value in RESERVED_IDS:\n        raise Invalid(f\"ID '{value}' is reserved internally and cannot be used\")\n    if value in CORE.loaded_integrations:\n        raise Invalid(\n            f\"ID '{value}' conflicts with the name of an esphome integration, please use another ID name.\"\n        )\n    return value\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.validate_registry","title":"validate_registry","text":"<pre><code>validate_registry(name, registry)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def validate_registry(name, registry):\n    return ensure_list(validate_registry_entry(name, registry))\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.validate_registry_entry","title":"validate_registry_entry","text":"<pre><code>validate_registry_entry(name, registry)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def validate_registry_entry(name, registry):\n    base_schema = ensure_schema(registry.base_schema).extend(\n        {\n            Optional(CONF_TYPE_ID): valid,\n        },\n        extra=ALLOW_EXTRA,\n    )\n    ignore_keys = extract_keys(base_schema)\n\n    @schema_extractor_registry(registry)\n    def validator(value):\n        if isinstance(value, str):\n            value = {value: {}}\n        if not isinstance(value, dict):\n            raise Invalid(\n                f\"{name.title()} must consist of key-value mapping! Got {value}\"\n            )\n        key = next((x for x in value if x not in ignore_keys), None)\n        if key is None:\n            raise Invalid(f\"Key missing from {name}! Got {value}\")\n        if key not in registry:\n            raise Invalid(f\"Unable to find {name} with the name '{key}'\", [key])\n        key2 = next((x for x in value if x != key and x not in ignore_keys), None)\n        if key2 is not None:\n            raise Invalid(\n                f\"Cannot have two {name}s in one item. Key '{key}' overrides '{key2}'! \"\n                f\"Did you forget to indent the block inside the {key}?\"\n            )\n\n        if value[key] is None:\n            value[key] = {}\n\n        registry_entry = registry[key]\n\n        value = value.copy()\n\n        with prepend_path([key]):\n            value[key] = registry_entry.schema(value[key])\n\n        if registry_entry.type_id is not None:\n            my_base_schema = base_schema.extend(\n                {GenerateID(CONF_TYPE_ID): declare_id(registry_entry.type_id)}\n            )\n            value = my_base_schema(value)\n\n        return value\n\n    return validator\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.validate_source_shorthand","title":"validate_source_shorthand","text":"<pre><code>validate_source_shorthand(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def validate_source_shorthand(value):\n    if not isinstance(value, str):\n        raise Invalid(\"Shorthand only for strings\")\n    try:\n        return SOURCE_SCHEMA({CONF_TYPE: TYPE_LOCAL, CONF_PATH: value})\n    except Invalid:\n        pass\n    # Regex for GitHub repo name with optional branch/tag\n    # Note: git allows other branch/tag names as well, but never seen them used before\n    m = re.match(\n        r\"github://(?:([a-zA-Z0-9\\-]+)/([a-zA-Z0-9\\-\\._]+)(?:@([a-zA-Z0-9\\-_.\\./]+))?|pr#([0-9]+))\",\n        value,\n    )\n    if m is None:\n        raise Invalid(\n            \"Source is not a file system path, in expected github://username/name[@branch-or-tag] or github://pr#1234 format!\"\n        )\n    if m.group(4):\n        conf = {\n            CONF_TYPE: TYPE_GIT,\n            CONF_URL: \"https://github.com/esphome/esphome.git\",\n            CONF_REF: f\"pull/{m.group(4)}/head\",\n        }\n    else:\n        conf = {\n            CONF_TYPE: TYPE_GIT,\n            CONF_URL: f\"https://github.com/{m.group(1)}/{m.group(2)}.git\",\n        }\n        if m.group(3):\n            conf[CONF_REF] = m.group(3)\n\n    return SOURCE_SCHEMA(conf)\n</code></pre>"},{"location":"references/python%20API%27s/validation/#config_validation.version_number","title":"version_number","text":"<pre><code>version_number(value)\n</code></pre> Source code in <code>esphome\\config_validation.py</code> <pre><code>def version_number(value):\n    value = string_strict(value)\n    try:\n        return str(Version.parse(value))\n    except ValueError as e:\n        raise Invalid(\"Not a valid version number\") from e\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/","title":"Validation helpers","text":""},{"location":"references/python%20API%27s/validation_helpers/#config_helpers","title":"config_helpers","text":""},{"location":"references/python%20API%27s/validation_helpers/#config_helpers.Extend","title":"Extend","text":"<pre><code>Extend(value)\n</code></pre> Source code in <code>esphome\\config_helpers.py</code> <pre><code>def __init__(self, value):\n    self.value = value\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#config_helpers.Extend.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value = value\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#config_helpers.Remove","title":"Remove","text":"<pre><code>Remove(value=None)\n</code></pre> Source code in <code>esphome\\config_helpers.py</code> <pre><code>def __init__(self, value=None):\n    self.value = value\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#config_helpers.Remove.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value = value\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#config_helpers.merge_config","title":"merge_config","text":"<pre><code>merge_config(full_old, full_new)\n</code></pre> Source code in <code>esphome\\config_helpers.py</code> <pre><code>def merge_config(full_old, full_new):\n    def merge(old, new):\n        if isinstance(new, dict):\n            if not isinstance(old, dict):\n                return new\n            res = old.copy()\n            for k, v in new.items():\n                if isinstance(v, Remove) and k in old:\n                    del res[k]\n                else:\n                    res[k] = merge(old[k], v) if k in old else v\n            return res\n        if isinstance(new, list):\n            if not isinstance(old, list):\n                return new\n            res = old.copy()\n            ids = {\n                v[CONF_ID]: i\n                for i, v in enumerate(res)\n                if CONF_ID in v and isinstance(v[CONF_ID], str)\n            }\n            ids_to_delete = []\n            for v in new:\n                if CONF_ID in v:\n                    new_id = v[CONF_ID]\n                    if isinstance(new_id, Extend):\n                        new_id = new_id.value\n                        if new_id in ids:\n                            v[CONF_ID] = new_id\n                            res[ids[new_id]] = merge(res[ids[new_id]], v)\n                            continue\n                    elif isinstance(new_id, Remove):\n                        new_id = new_id.value\n                        if new_id in ids:\n                            ids_to_delete.append(ids[new_id])\n                            continue\n                    else:\n                        ids[new_id] = len(res)\n                res.append(v)\n            res = [v for i, v in enumerate(res) if i not in ids_to_delete]\n            return res\n        if new is None:\n            return old\n\n        return new\n\n    return merge(full_old, full_new)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#config_helpers.read_config_file","title":"read_config_file","text":"<pre><code>read_config_file(path: str) -&gt; str\n</code></pre> Source code in <code>esphome\\config_helpers.py</code> <pre><code>def read_config_file(path: str) -&gt; str:\n    if CORE.vscode and (\n        not CORE.ace or os.path.abspath(path) == os.path.abspath(CORE.config_path)\n    ):\n        print(\n            json.dumps(\n                {\n                    \"type\": \"read_file\",\n                    \"path\": path,\n                }\n            )\n        )\n        data = json.loads(input())\n        assert data[\"type\"] == \"file_response\"\n        return data[\"content\"]\n\n    return read_file(path)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const","title":"const","text":"<p>Constants used by esphome.</p>"},{"location":"references/python%20API%27s/validation_helpers/#const.ALLOWED_NAME_CHARS","title":"ALLOWED_NAME_CHARS  <code>module-attribute</code>","text":"<pre><code>ALLOWED_NAME_CHARS = (\n    \"abcdefghijklmnopqrstuvwxyz0123456789-_\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ABOVE","title":"CONF_ABOVE  <code>module-attribute</code>","text":"<pre><code>CONF_ABOVE = 'above'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ACCELERATION","title":"CONF_ACCELERATION  <code>module-attribute</code>","text":"<pre><code>CONF_ACCELERATION = 'acceleration'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ACCELERATION_X","title":"CONF_ACCELERATION_X  <code>module-attribute</code>","text":"<pre><code>CONF_ACCELERATION_X = 'acceleration_x'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ACCELERATION_Y","title":"CONF_ACCELERATION_Y  <code>module-attribute</code>","text":"<pre><code>CONF_ACCELERATION_Y = 'acceleration_y'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ACCELERATION_Z","title":"CONF_ACCELERATION_Z  <code>module-attribute</code>","text":"<pre><code>CONF_ACCELERATION_Z = 'acceleration_z'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ACCURACY","title":"CONF_ACCURACY  <code>module-attribute</code>","text":"<pre><code>CONF_ACCURACY = 'accuracy'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ACCURACY_DECIMALS","title":"CONF_ACCURACY_DECIMALS  <code>module-attribute</code>","text":"<pre><code>CONF_ACCURACY_DECIMALS = 'accuracy_decimals'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ACTION_ID","title":"CONF_ACTION_ID  <code>module-attribute</code>","text":"<pre><code>CONF_ACTION_ID = 'action_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ACTION_STATE_TOPIC","title":"CONF_ACTION_STATE_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_ACTION_STATE_TOPIC = 'action_state_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ACTIVE","title":"CONF_ACTIVE  <code>module-attribute</code>","text":"<pre><code>CONF_ACTIVE = 'active'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ACTIVE_POWER","title":"CONF_ACTIVE_POWER  <code>module-attribute</code>","text":"<pre><code>CONF_ACTIVE_POWER = 'active_power'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ACTUAL_GAIN","title":"CONF_ACTUAL_GAIN  <code>module-attribute</code>","text":"<pre><code>CONF_ACTUAL_GAIN = 'actual_gain'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ADDRESS","title":"CONF_ADDRESS  <code>module-attribute</code>","text":"<pre><code>CONF_ADDRESS = 'address'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ADDRESSABLE_LIGHT_ID","title":"CONF_ADDRESSABLE_LIGHT_ID  <code>module-attribute</code>","text":"<pre><code>CONF_ADDRESSABLE_LIGHT_ID = 'addressable_light_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ADVANCED","title":"CONF_ADVANCED  <code>module-attribute</code>","text":"<pre><code>CONF_ADVANCED = 'advanced'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_AFTER","title":"CONF_AFTER  <code>module-attribute</code>","text":"<pre><code>CONF_AFTER = 'after'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ALLOW_OTHER_USES","title":"CONF_ALLOW_OTHER_USES  <code>module-attribute</code>","text":"<pre><code>CONF_ALLOW_OTHER_USES = 'allow_other_uses'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ALPHA","title":"CONF_ALPHA  <code>module-attribute</code>","text":"<pre><code>CONF_ALPHA = 'alpha'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ALTITUDE","title":"CONF_ALTITUDE  <code>module-attribute</code>","text":"<pre><code>CONF_ALTITUDE = 'altitude'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ANALOG","title":"CONF_ANALOG  <code>module-attribute</code>","text":"<pre><code>CONF_ANALOG = 'analog'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_AND","title":"CONF_AND  <code>module-attribute</code>","text":"<pre><code>CONF_AND = 'and'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_AP","title":"CONF_AP  <code>module-attribute</code>","text":"<pre><code>CONF_AP = 'ap'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_APPARENT_POWER","title":"CONF_APPARENT_POWER  <code>module-attribute</code>","text":"<pre><code>CONF_APPARENT_POWER = 'apparent_power'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ARDUINO_VERSION","title":"CONF_ARDUINO_VERSION  <code>module-attribute</code>","text":"<pre><code>CONF_ARDUINO_VERSION = 'arduino_version'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_AREA","title":"CONF_AREA  <code>module-attribute</code>","text":"<pre><code>CONF_AREA = 'area'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ARGS","title":"CONF_ARGS  <code>module-attribute</code>","text":"<pre><code>CONF_ARGS = 'args'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ASSUMED_STATE","title":"CONF_ASSUMED_STATE  <code>module-attribute</code>","text":"<pre><code>CONF_ASSUMED_STATE = 'assumed_state'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_AT","title":"CONF_AT  <code>module-attribute</code>","text":"<pre><code>CONF_AT = 'at'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ATTENUATION","title":"CONF_ATTENUATION  <code>module-attribute</code>","text":"<pre><code>CONF_ATTENUATION = 'attenuation'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ATTRIBUTE","title":"CONF_ATTRIBUTE  <code>module-attribute</code>","text":"<pre><code>CONF_ATTRIBUTE = 'attribute'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_AUTH","title":"CONF_AUTH  <code>module-attribute</code>","text":"<pre><code>CONF_AUTH = 'auth'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_AUTOCONF","title":"CONF_AUTOCONF  <code>module-attribute</code>","text":"<pre><code>CONF_AUTOCONF = 'autoconf'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_AUTOMATION_ID","title":"CONF_AUTOMATION_ID  <code>module-attribute</code>","text":"<pre><code>CONF_AUTOMATION_ID = 'automation_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_AUTO_CLEAR_ENABLED","title":"CONF_AUTO_CLEAR_ENABLED  <code>module-attribute</code>","text":"<pre><code>CONF_AUTO_CLEAR_ENABLED = 'auto_clear_enabled'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_AUTO_MODE","title":"CONF_AUTO_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_AUTO_MODE = 'auto_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_AVAILABILITY","title":"CONF_AVAILABILITY  <code>module-attribute</code>","text":"<pre><code>CONF_AVAILABILITY = 'availability'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_AWAY","title":"CONF_AWAY  <code>module-attribute</code>","text":"<pre><code>CONF_AWAY = 'away'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_AWAY_COMMAND_TOPIC","title":"CONF_AWAY_COMMAND_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_AWAY_COMMAND_TOPIC = 'away_command_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_AWAY_CONFIG","title":"CONF_AWAY_CONFIG  <code>module-attribute</code>","text":"<pre><code>CONF_AWAY_CONFIG = 'away_config'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_AWAY_STATE_TOPIC","title":"CONF_AWAY_STATE_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_AWAY_STATE_TOPIC = 'away_state_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BACKLIGHT_PIN","title":"CONF_BACKLIGHT_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_BACKLIGHT_PIN = 'backlight_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BASELINE","title":"CONF_BASELINE  <code>module-attribute</code>","text":"<pre><code>CONF_BASELINE = 'baseline'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BATTERY_LEVEL","title":"CONF_BATTERY_LEVEL  <code>module-attribute</code>","text":"<pre><code>CONF_BATTERY_LEVEL = 'battery_level'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BATTERY_VOLTAGE","title":"CONF_BATTERY_VOLTAGE  <code>module-attribute</code>","text":"<pre><code>CONF_BATTERY_VOLTAGE = 'battery_voltage'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BAUD_RATE","title":"CONF_BAUD_RATE  <code>module-attribute</code>","text":"<pre><code>CONF_BAUD_RATE = 'baud_rate'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BEEPER","title":"CONF_BEEPER  <code>module-attribute</code>","text":"<pre><code>CONF_BEEPER = 'beeper'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BELOW","title":"CONF_BELOW  <code>module-attribute</code>","text":"<pre><code>CONF_BELOW = 'below'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BINARY","title":"CONF_BINARY  <code>module-attribute</code>","text":"<pre><code>CONF_BINARY = 'binary'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BINARY_SENSOR","title":"CONF_BINARY_SENSOR  <code>module-attribute</code>","text":"<pre><code>CONF_BINARY_SENSOR = 'binary_sensor'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BINARY_SENSORS","title":"CONF_BINARY_SENSORS  <code>module-attribute</code>","text":"<pre><code>CONF_BINARY_SENSORS = 'binary_sensors'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BINDKEY","title":"CONF_BINDKEY  <code>module-attribute</code>","text":"<pre><code>CONF_BINDKEY = 'bindkey'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BIRTH_MESSAGE","title":"CONF_BIRTH_MESSAGE  <code>module-attribute</code>","text":"<pre><code>CONF_BIRTH_MESSAGE = 'birth_message'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BIT_DEPTH","title":"CONF_BIT_DEPTH  <code>module-attribute</code>","text":"<pre><code>CONF_BIT_DEPTH = 'bit_depth'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BLOCK","title":"CONF_BLOCK  <code>module-attribute</code>","text":"<pre><code>CONF_BLOCK = 'block'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BLUE","title":"CONF_BLUE  <code>module-attribute</code>","text":"<pre><code>CONF_BLUE = 'blue'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BOARD","title":"CONF_BOARD  <code>module-attribute</code>","text":"<pre><code>CONF_BOARD = 'board'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BOARD_FLASH_MODE","title":"CONF_BOARD_FLASH_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_BOARD_FLASH_MODE = 'board_flash_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BORDER","title":"CONF_BORDER  <code>module-attribute</code>","text":"<pre><code>CONF_BORDER = 'border'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BRANCH","title":"CONF_BRANCH  <code>module-attribute</code>","text":"<pre><code>CONF_BRANCH = 'branch'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BRIGHTNESS","title":"CONF_BRIGHTNESS  <code>module-attribute</code>","text":"<pre><code>CONF_BRIGHTNESS = 'brightness'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BROKER","title":"CONF_BROKER  <code>module-attribute</code>","text":"<pre><code>CONF_BROKER = 'broker'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BSSID","title":"CONF_BSSID  <code>module-attribute</code>","text":"<pre><code>CONF_BSSID = 'bssid'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BUFFER_SIZE","title":"CONF_BUFFER_SIZE  <code>module-attribute</code>","text":"<pre><code>CONF_BUFFER_SIZE = 'buffer_size'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BUILD_PATH","title":"CONF_BUILD_PATH  <code>module-attribute</code>","text":"<pre><code>CONF_BUILD_PATH = 'build_path'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BUSY_PIN","title":"CONF_BUSY_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_BUSY_PIN = 'busy_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BUS_VOLTAGE","title":"CONF_BUS_VOLTAGE  <code>module-attribute</code>","text":"<pre><code>CONF_BUS_VOLTAGE = 'bus_voltage'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_BYTES","title":"CONF_BYTES  <code>module-attribute</code>","text":"<pre><code>CONF_BYTES = 'bytes'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CALCULATED_LUX","title":"CONF_CALCULATED_LUX  <code>module-attribute</code>","text":"<pre><code>CONF_CALCULATED_LUX = 'calculated_lux'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CALIBRATE_LINEAR","title":"CONF_CALIBRATE_LINEAR  <code>module-attribute</code>","text":"<pre><code>CONF_CALIBRATE_LINEAR = 'calibrate_linear'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CALIBRATION","title":"CONF_CALIBRATION  <code>module-attribute</code>","text":"<pre><code>CONF_CALIBRATION = 'calibration'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CAPACITANCE","title":"CONF_CAPACITANCE  <code>module-attribute</code>","text":"<pre><code>CONF_CAPACITANCE = 'capacitance'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CAPACITY","title":"CONF_CAPACITY  <code>module-attribute</code>","text":"<pre><code>CONF_CAPACITY = 'capacity'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CARRIER_DUTY_PERCENT","title":"CONF_CARRIER_DUTY_PERCENT  <code>module-attribute</code>","text":"<pre><code>CONF_CARRIER_DUTY_PERCENT = 'carrier_duty_percent'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CARRIER_FREQUENCY","title":"CONF_CARRIER_FREQUENCY  <code>module-attribute</code>","text":"<pre><code>CONF_CARRIER_FREQUENCY = 'carrier_frequency'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CERTIFICATE","title":"CONF_CERTIFICATE  <code>module-attribute</code>","text":"<pre><code>CONF_CERTIFICATE = 'certificate'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CERTIFICATE_AUTHORITY","title":"CONF_CERTIFICATE_AUTHORITY  <code>module-attribute</code>","text":"<pre><code>CONF_CERTIFICATE_AUTHORITY = 'certificate_authority'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CHANGE_MODE_EVERY","title":"CONF_CHANGE_MODE_EVERY  <code>module-attribute</code>","text":"<pre><code>CONF_CHANGE_MODE_EVERY = 'change_mode_every'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CHANNEL","title":"CONF_CHANNEL  <code>module-attribute</code>","text":"<pre><code>CONF_CHANNEL = 'channel'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CHANNELS","title":"CONF_CHANNELS  <code>module-attribute</code>","text":"<pre><code>CONF_CHANNELS = 'channels'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CHARACTERISTIC_UUID","title":"CONF_CHARACTERISTIC_UUID  <code>module-attribute</code>","text":"<pre><code>CONF_CHARACTERISTIC_UUID = 'characteristic_uuid'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CHIPSET","title":"CONF_CHIPSET  <code>module-attribute</code>","text":"<pre><code>CONF_CHIPSET = 'chipset'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CLEAR_IMPEDANCE","title":"CONF_CLEAR_IMPEDANCE  <code>module-attribute</code>","text":"<pre><code>CONF_CLEAR_IMPEDANCE = 'clear_impedance'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CLIENT_CERTIFICATE","title":"CONF_CLIENT_CERTIFICATE  <code>module-attribute</code>","text":"<pre><code>CONF_CLIENT_CERTIFICATE = 'client_certificate'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CLIENT_CERTIFICATE_KEY","title":"CONF_CLIENT_CERTIFICATE_KEY  <code>module-attribute</code>","text":"<pre><code>CONF_CLIENT_CERTIFICATE_KEY = 'client_certificate_key'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CLIENT_ID","title":"CONF_CLIENT_ID  <code>module-attribute</code>","text":"<pre><code>CONF_CLIENT_ID = 'client_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CLK_PIN","title":"CONF_CLK_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_CLK_PIN = 'clk_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CLOCK_PIN","title":"CONF_CLOCK_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_CLOCK_PIN = 'clock_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CLOSE_ACTION","title":"CONF_CLOSE_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_CLOSE_ACTION = 'close_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CLOSE_DURATION","title":"CONF_CLOSE_DURATION  <code>module-attribute</code>","text":"<pre><code>CONF_CLOSE_DURATION = 'close_duration'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CLOSE_ENDSTOP","title":"CONF_CLOSE_ENDSTOP  <code>module-attribute</code>","text":"<pre><code>CONF_CLOSE_ENDSTOP = 'close_endstop'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CO2","title":"CONF_CO2  <code>module-attribute</code>","text":"<pre><code>CONF_CO2 = 'co2'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CODE","title":"CONF_CODE  <code>module-attribute</code>","text":"<pre><code>CONF_CODE = 'code'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COLD_WHITE","title":"CONF_COLD_WHITE  <code>module-attribute</code>","text":"<pre><code>CONF_COLD_WHITE = 'cold_white'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COLD_WHITE_COLOR_TEMPERATURE","title":"CONF_COLD_WHITE_COLOR_TEMPERATURE  <code>module-attribute</code>","text":"<pre><code>CONF_COLD_WHITE_COLOR_TEMPERATURE = (\n    \"cold_white_color_temperature\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COLOR","title":"CONF_COLOR  <code>module-attribute</code>","text":"<pre><code>CONF_COLOR = 'color'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COLORS","title":"CONF_COLORS  <code>module-attribute</code>","text":"<pre><code>CONF_COLORS = 'colors'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COLOR_BRIGHTNESS","title":"CONF_COLOR_BRIGHTNESS  <code>module-attribute</code>","text":"<pre><code>CONF_COLOR_BRIGHTNESS = 'color_brightness'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COLOR_CORRECT","title":"CONF_COLOR_CORRECT  <code>module-attribute</code>","text":"<pre><code>CONF_COLOR_CORRECT = 'color_correct'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COLOR_INTERLOCK","title":"CONF_COLOR_INTERLOCK  <code>module-attribute</code>","text":"<pre><code>CONF_COLOR_INTERLOCK = 'color_interlock'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COLOR_MODE","title":"CONF_COLOR_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_COLOR_MODE = 'color_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COLOR_ORDER","title":"CONF_COLOR_ORDER  <code>module-attribute</code>","text":"<pre><code>CONF_COLOR_ORDER = 'color_order'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COLOR_PALETTE","title":"CONF_COLOR_PALETTE  <code>module-attribute</code>","text":"<pre><code>CONF_COLOR_PALETTE = 'color_palette'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COLOR_TEMPERATURE","title":"CONF_COLOR_TEMPERATURE  <code>module-attribute</code>","text":"<pre><code>CONF_COLOR_TEMPERATURE = 'color_temperature'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COMMAND","title":"CONF_COMMAND  <code>module-attribute</code>","text":"<pre><code>CONF_COMMAND = 'command'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COMMAND_REPEATS","title":"CONF_COMMAND_REPEATS  <code>module-attribute</code>","text":"<pre><code>CONF_COMMAND_REPEATS = 'command_repeats'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COMMAND_RETAIN","title":"CONF_COMMAND_RETAIN  <code>module-attribute</code>","text":"<pre><code>CONF_COMMAND_RETAIN = 'command_retain'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COMMAND_TOPIC","title":"CONF_COMMAND_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_COMMAND_TOPIC = 'command_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COMMENT","title":"CONF_COMMENT  <code>module-attribute</code>","text":"<pre><code>CONF_COMMENT = 'comment'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COMMIT","title":"CONF_COMMIT  <code>module-attribute</code>","text":"<pre><code>CONF_COMMIT = 'commit'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COMPILE_PROCESS_LIMIT","title":"CONF_COMPILE_PROCESS_LIMIT  <code>module-attribute</code>","text":"<pre><code>CONF_COMPILE_PROCESS_LIMIT = 'compile_process_limit'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COMPONENTS","title":"CONF_COMPONENTS  <code>module-attribute</code>","text":"<pre><code>CONF_COMPONENTS = 'components'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COMPONENT_ID","title":"CONF_COMPONENT_ID  <code>module-attribute</code>","text":"<pre><code>CONF_COMPONENT_ID = 'component_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CONDITION","title":"CONF_CONDITION  <code>module-attribute</code>","text":"<pre><code>CONF_CONDITION = 'condition'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CONDITION_ID","title":"CONF_CONDITION_ID  <code>module-attribute</code>","text":"<pre><code>CONF_CONDITION_ID = 'condition_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CONDUCTIVITY","title":"CONF_CONDUCTIVITY  <code>module-attribute</code>","text":"<pre><code>CONF_CONDUCTIVITY = 'conductivity'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CONSTANT_BRIGHTNESS","title":"CONF_CONSTANT_BRIGHTNESS  <code>module-attribute</code>","text":"<pre><code>CONF_CONSTANT_BRIGHTNESS = 'constant_brightness'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CONTRAST","title":"CONF_CONTRAST  <code>module-attribute</code>","text":"<pre><code>CONF_CONTRAST = 'contrast'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COOL_ACTION","title":"CONF_COOL_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_COOL_ACTION = 'cool_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COOL_DEADBAND","title":"CONF_COOL_DEADBAND  <code>module-attribute</code>","text":"<pre><code>CONF_COOL_DEADBAND = 'cool_deadband'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COOL_MODE","title":"CONF_COOL_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_COOL_MODE = 'cool_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COOL_OVERRUN","title":"CONF_COOL_OVERRUN  <code>module-attribute</code>","text":"<pre><code>CONF_COOL_OVERRUN = 'cool_overrun'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COUNT","title":"CONF_COUNT  <code>module-attribute</code>","text":"<pre><code>CONF_COUNT = 'count'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COUNTS","title":"CONF_COUNTS  <code>module-attribute</code>","text":"<pre><code>CONF_COUNTS = 'counts'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COUNT_MODE","title":"CONF_COUNT_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_COUNT_MODE = 'count_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_COURSE","title":"CONF_COURSE  <code>module-attribute</code>","text":"<pre><code>CONF_COURSE = 'course'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CRON","title":"CONF_CRON  <code>module-attribute</code>","text":"<pre><code>CONF_CRON = 'cron'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CSS_INCLUDE","title":"CONF_CSS_INCLUDE  <code>module-attribute</code>","text":"<pre><code>CONF_CSS_INCLUDE = 'css_include'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CSS_URL","title":"CONF_CSS_URL  <code>module-attribute</code>","text":"<pre><code>CONF_CSS_URL = 'css_url'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CS_PIN","title":"CONF_CS_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_CS_PIN = 'cs_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CURRENT","title":"CONF_CURRENT  <code>module-attribute</code>","text":"<pre><code>CONF_CURRENT = 'current'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CURRENT_HUMIDITY_STATE_TOPIC","title":"CONF_CURRENT_HUMIDITY_STATE_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_CURRENT_HUMIDITY_STATE_TOPIC = (\n    \"current_humidity_state_topic\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CURRENT_OPERATION","title":"CONF_CURRENT_OPERATION  <code>module-attribute</code>","text":"<pre><code>CONF_CURRENT_OPERATION = 'current_operation'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CURRENT_RESISTOR","title":"CONF_CURRENT_RESISTOR  <code>module-attribute</code>","text":"<pre><code>CONF_CURRENT_RESISTOR = 'current_resistor'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CURRENT_TEMPERATURE_STATE_TOPIC","title":"CONF_CURRENT_TEMPERATURE_STATE_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_CURRENT_TEMPERATURE_STATE_TOPIC = (\n    \"current_temperature_state_topic\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CUSTOM","title":"CONF_CUSTOM  <code>module-attribute</code>","text":"<pre><code>CONF_CUSTOM = 'custom'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CUSTOM_FAN_MODE","title":"CONF_CUSTOM_FAN_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_CUSTOM_FAN_MODE = 'custom_fan_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CUSTOM_FAN_MODES","title":"CONF_CUSTOM_FAN_MODES  <code>module-attribute</code>","text":"<pre><code>CONF_CUSTOM_FAN_MODES = 'custom_fan_modes'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CUSTOM_PRESET","title":"CONF_CUSTOM_PRESET  <code>module-attribute</code>","text":"<pre><code>CONF_CUSTOM_PRESET = 'custom_preset'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CUSTOM_PRESETS","title":"CONF_CUSTOM_PRESETS  <code>module-attribute</code>","text":"<pre><code>CONF_CUSTOM_PRESETS = 'custom_presets'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_CYCLE","title":"CONF_CYCLE  <code>module-attribute</code>","text":"<pre><code>CONF_CYCLE = 'cycle'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DALLAS_ID","title":"CONF_DALLAS_ID  <code>module-attribute</code>","text":"<pre><code>CONF_DALLAS_ID = 'dallas_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DATA","title":"CONF_DATA  <code>module-attribute</code>","text":"<pre><code>CONF_DATA = 'data'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DATA_PIN","title":"CONF_DATA_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_DATA_PIN = 'data_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DATA_PINS","title":"CONF_DATA_PINS  <code>module-attribute</code>","text":"<pre><code>CONF_DATA_PINS = 'data_pins'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DATA_RATE","title":"CONF_DATA_RATE  <code>module-attribute</code>","text":"<pre><code>CONF_DATA_RATE = 'data_rate'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DATA_TEMPLATE","title":"CONF_DATA_TEMPLATE  <code>module-attribute</code>","text":"<pre><code>CONF_DATA_TEMPLATE = 'data_template'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DAYS_OF_MONTH","title":"CONF_DAYS_OF_MONTH  <code>module-attribute</code>","text":"<pre><code>CONF_DAYS_OF_MONTH = 'days_of_month'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DAYS_OF_WEEK","title":"CONF_DAYS_OF_WEEK  <code>module-attribute</code>","text":"<pre><code>CONF_DAYS_OF_WEEK = 'days_of_week'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DC_PIN","title":"CONF_DC_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_DC_PIN = 'dc_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DEASSERT_RTS_DTR","title":"CONF_DEASSERT_RTS_DTR  <code>module-attribute</code>","text":"<pre><code>CONF_DEASSERT_RTS_DTR = 'deassert_rts_dtr'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DEBOUNCE","title":"CONF_DEBOUNCE  <code>module-attribute</code>","text":"<pre><code>CONF_DEBOUNCE = 'debounce'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DEBUG","title":"CONF_DEBUG  <code>module-attribute</code>","text":"<pre><code>CONF_DEBUG = 'debug'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DECAY_MODE","title":"CONF_DECAY_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_DECAY_MODE = 'decay_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DECELERATION","title":"CONF_DECELERATION  <code>module-attribute</code>","text":"<pre><code>CONF_DECELERATION = 'deceleration'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DEFAULTS","title":"CONF_DEFAULTS  <code>module-attribute</code>","text":"<pre><code>CONF_DEFAULTS = 'defaults'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DEFAULT_MODE","title":"CONF_DEFAULT_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_DEFAULT_MODE = 'default_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DEFAULT_TARGET_TEMPERATURE_HIGH","title":"CONF_DEFAULT_TARGET_TEMPERATURE_HIGH  <code>module-attribute</code>","text":"<pre><code>CONF_DEFAULT_TARGET_TEMPERATURE_HIGH = (\n    \"default_target_temperature_high\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DEFAULT_TARGET_TEMPERATURE_LOW","title":"CONF_DEFAULT_TARGET_TEMPERATURE_LOW  <code>module-attribute</code>","text":"<pre><code>CONF_DEFAULT_TARGET_TEMPERATURE_LOW = (\n    \"default_target_temperature_low\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DEFAULT_TRANSITION_LENGTH","title":"CONF_DEFAULT_TRANSITION_LENGTH  <code>module-attribute</code>","text":"<pre><code>CONF_DEFAULT_TRANSITION_LENGTH = \"default_transition_length\"\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DELAY","title":"CONF_DELAY  <code>module-attribute</code>","text":"<pre><code>CONF_DELAY = 'delay'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DELIMITER","title":"CONF_DELIMITER  <code>module-attribute</code>","text":"<pre><code>CONF_DELIMITER = 'delimiter'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DELTA","title":"CONF_DELTA  <code>module-attribute</code>","text":"<pre><code>CONF_DELTA = 'delta'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DEST","title":"CONF_DEST  <code>module-attribute</code>","text":"<pre><code>CONF_DEST = 'dest'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DEVICE","title":"CONF_DEVICE  <code>module-attribute</code>","text":"<pre><code>CONF_DEVICE = 'device'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DEVICE_CLASS","title":"CONF_DEVICE_CLASS  <code>module-attribute</code>","text":"<pre><code>CONF_DEVICE_CLASS = 'device_class'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DEVICE_FACTOR","title":"CONF_DEVICE_FACTOR  <code>module-attribute</code>","text":"<pre><code>CONF_DEVICE_FACTOR = 'device_factor'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DIELECTRIC_CONSTANT","title":"CONF_DIELECTRIC_CONSTANT  <code>module-attribute</code>","text":"<pre><code>CONF_DIELECTRIC_CONSTANT = 'dielectric_constant'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DIMENSIONS","title":"CONF_DIMENSIONS  <code>module-attribute</code>","text":"<pre><code>CONF_DIMENSIONS = 'dimensions'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DIO_PIN","title":"CONF_DIO_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_DIO_PIN = 'dio_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DIRECTION","title":"CONF_DIRECTION  <code>module-attribute</code>","text":"<pre><code>CONF_DIRECTION = 'direction'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DIRECTION_OUTPUT","title":"CONF_DIRECTION_OUTPUT  <code>module-attribute</code>","text":"<pre><code>CONF_DIRECTION_OUTPUT = 'direction_output'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DIR_PIN","title":"CONF_DIR_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_DIR_PIN = 'dir_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DISABLED","title":"CONF_DISABLED  <code>module-attribute</code>","text":"<pre><code>CONF_DISABLED = 'disabled'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DISABLED_BY_DEFAULT","title":"CONF_DISABLED_BY_DEFAULT  <code>module-attribute</code>","text":"<pre><code>CONF_DISABLED_BY_DEFAULT = 'disabled_by_default'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DISABLE_CRC","title":"CONF_DISABLE_CRC  <code>module-attribute</code>","text":"<pre><code>CONF_DISABLE_CRC = 'disable_crc'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DISCONNECT_DELAY","title":"CONF_DISCONNECT_DELAY  <code>module-attribute</code>","text":"<pre><code>CONF_DISCONNECT_DELAY = 'disconnect_delay'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DISCOVERY","title":"CONF_DISCOVERY  <code>module-attribute</code>","text":"<pre><code>CONF_DISCOVERY = 'discovery'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DISCOVERY_OBJECT_ID_GENERATOR","title":"CONF_DISCOVERY_OBJECT_ID_GENERATOR  <code>module-attribute</code>","text":"<pre><code>CONF_DISCOVERY_OBJECT_ID_GENERATOR = (\n    \"discovery_object_id_generator\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DISCOVERY_PREFIX","title":"CONF_DISCOVERY_PREFIX  <code>module-attribute</code>","text":"<pre><code>CONF_DISCOVERY_PREFIX = 'discovery_prefix'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DISCOVERY_RETAIN","title":"CONF_DISCOVERY_RETAIN  <code>module-attribute</code>","text":"<pre><code>CONF_DISCOVERY_RETAIN = 'discovery_retain'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DISCOVERY_UNIQUE_ID_GENERATOR","title":"CONF_DISCOVERY_UNIQUE_ID_GENERATOR  <code>module-attribute</code>","text":"<pre><code>CONF_DISCOVERY_UNIQUE_ID_GENERATOR = (\n    \"discovery_unique_id_generator\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DISTANCE","title":"CONF_DISTANCE  <code>module-attribute</code>","text":"<pre><code>CONF_DISTANCE = 'distance'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DITHER","title":"CONF_DITHER  <code>module-attribute</code>","text":"<pre><code>CONF_DITHER = 'dither'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DIV_RATIO","title":"CONF_DIV_RATIO  <code>module-attribute</code>","text":"<pre><code>CONF_DIV_RATIO = 'div_ratio'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DNS1","title":"CONF_DNS1  <code>module-attribute</code>","text":"<pre><code>CONF_DNS1 = 'dns1'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DNS2","title":"CONF_DNS2  <code>module-attribute</code>","text":"<pre><code>CONF_DNS2 = 'dns2'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DNS_ADDRESS","title":"CONF_DNS_ADDRESS  <code>module-attribute</code>","text":"<pre><code>CONF_DNS_ADDRESS = 'dns_address'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DOMAIN","title":"CONF_DOMAIN  <code>module-attribute</code>","text":"<pre><code>CONF_DOMAIN = 'domain'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DRY_ACTION","title":"CONF_DRY_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_DRY_ACTION = 'dry_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DRY_MODE","title":"CONF_DRY_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_DRY_MODE = 'dry_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DUMMY_RECEIVER","title":"CONF_DUMMY_RECEIVER  <code>module-attribute</code>","text":"<pre><code>CONF_DUMMY_RECEIVER = 'dummy_receiver'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DUMMY_RECEIVER_ID","title":"CONF_DUMMY_RECEIVER_ID  <code>module-attribute</code>","text":"<pre><code>CONF_DUMMY_RECEIVER_ID = 'dummy_receiver_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DUMP","title":"CONF_DUMP  <code>module-attribute</code>","text":"<pre><code>CONF_DUMP = 'dump'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_DURATION","title":"CONF_DURATION  <code>module-attribute</code>","text":"<pre><code>CONF_DURATION = 'duration'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_EAP","title":"CONF_EAP  <code>module-attribute</code>","text":"<pre><code>CONF_EAP = 'eap'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_EC","title":"CONF_EC  <code>module-attribute</code>","text":"<pre><code>CONF_EC = 'ec'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ECHO_PIN","title":"CONF_ECHO_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_ECHO_PIN = 'echo_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ECO2","title":"CONF_ECO2  <code>module-attribute</code>","text":"<pre><code>CONF_ECO2 = 'eco2'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_EFFECT","title":"CONF_EFFECT  <code>module-attribute</code>","text":"<pre><code>CONF_EFFECT = 'effect'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_EFFECTS","title":"CONF_EFFECTS  <code>module-attribute</code>","text":"<pre><code>CONF_EFFECTS = 'effects'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ELSE","title":"CONF_ELSE  <code>module-attribute</code>","text":"<pre><code>CONF_ELSE = 'else'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ENABLE_BTM","title":"CONF_ENABLE_BTM  <code>module-attribute</code>","text":"<pre><code>CONF_ENABLE_BTM = 'enable_btm'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ENABLE_IPV6","title":"CONF_ENABLE_IPV6  <code>module-attribute</code>","text":"<pre><code>CONF_ENABLE_IPV6 = 'enable_ipv6'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ENABLE_PIN","title":"CONF_ENABLE_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_ENABLE_PIN = 'enable_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ENABLE_PRIVATE_NETWORK_ACCESS","title":"CONF_ENABLE_PRIVATE_NETWORK_ACCESS  <code>module-attribute</code>","text":"<pre><code>CONF_ENABLE_PRIVATE_NETWORK_ACCESS = (\n    \"enable_private_network_access\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ENABLE_RRM","title":"CONF_ENABLE_RRM  <code>module-attribute</code>","text":"<pre><code>CONF_ENABLE_RRM = 'enable_rrm'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ENABLE_TIME","title":"CONF_ENABLE_TIME  <code>module-attribute</code>","text":"<pre><code>CONF_ENABLE_TIME = 'enable_time'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ENERGY","title":"CONF_ENERGY  <code>module-attribute</code>","text":"<pre><code>CONF_ENERGY = 'energy'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ENTITY_CATEGORY","title":"CONF_ENTITY_CATEGORY  <code>module-attribute</code>","text":"<pre><code>CONF_ENTITY_CATEGORY = 'entity_category'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ENTITY_ID","title":"CONF_ENTITY_ID  <code>module-attribute</code>","text":"<pre><code>CONF_ENTITY_ID = 'entity_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ENUM_DATAPOINT","title":"CONF_ENUM_DATAPOINT  <code>module-attribute</code>","text":"<pre><code>CONF_ENUM_DATAPOINT = 'enum_datapoint'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_EQUATION","title":"CONF_EQUATION  <code>module-attribute</code>","text":"<pre><code>CONF_EQUATION = 'equation'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ESP8266_DISABLE_SSL_SUPPORT","title":"CONF_ESP8266_DISABLE_SSL_SUPPORT  <code>module-attribute</code>","text":"<pre><code>CONF_ESP8266_DISABLE_SSL_SUPPORT = (\n    \"esp8266_disable_ssl_support\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ESPHOME","title":"CONF_ESPHOME  <code>module-attribute</code>","text":"<pre><code>CONF_ESPHOME = 'esphome'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ETHERNET","title":"CONF_ETHERNET  <code>module-attribute</code>","text":"<pre><code>CONF_ETHERNET = 'ethernet'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_EVENT","title":"CONF_EVENT  <code>module-attribute</code>","text":"<pre><code>CONF_EVENT = 'event'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_EXPIRE_AFTER","title":"CONF_EXPIRE_AFTER  <code>module-attribute</code>","text":"<pre><code>CONF_EXPIRE_AFTER = 'expire_after'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_EXPORT_ACTIVE_ENERGY","title":"CONF_EXPORT_ACTIVE_ENERGY  <code>module-attribute</code>","text":"<pre><code>CONF_EXPORT_ACTIVE_ENERGY = 'export_active_energy'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_EXPORT_REACTIVE_ENERGY","title":"CONF_EXPORT_REACTIVE_ENERGY  <code>module-attribute</code>","text":"<pre><code>CONF_EXPORT_REACTIVE_ENERGY = 'export_reactive_energy'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_EXTERNAL_CLOCK_INPUT","title":"CONF_EXTERNAL_CLOCK_INPUT  <code>module-attribute</code>","text":"<pre><code>CONF_EXTERNAL_CLOCK_INPUT = 'external_clock_input'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_EXTERNAL_COMPONENTS","title":"CONF_EXTERNAL_COMPONENTS  <code>module-attribute</code>","text":"<pre><code>CONF_EXTERNAL_COMPONENTS = 'external_components'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_EXTERNAL_VCC","title":"CONF_EXTERNAL_VCC  <code>module-attribute</code>","text":"<pre><code>CONF_EXTERNAL_VCC = 'external_vcc'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FALLING_EDGE","title":"CONF_FALLING_EDGE  <code>module-attribute</code>","text":"<pre><code>CONF_FALLING_EDGE = 'falling_edge'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAMILY","title":"CONF_FAMILY  <code>module-attribute</code>","text":"<pre><code>CONF_FAMILY = 'family'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAN_MODE","title":"CONF_FAN_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_FAN_MODE = 'fan_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAN_MODE_AUTO_ACTION","title":"CONF_FAN_MODE_AUTO_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_FAN_MODE_AUTO_ACTION = 'fan_mode_auto_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAN_MODE_COMMAND_TOPIC","title":"CONF_FAN_MODE_COMMAND_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_FAN_MODE_COMMAND_TOPIC = 'fan_mode_command_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAN_MODE_DIFFUSE_ACTION","title":"CONF_FAN_MODE_DIFFUSE_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_FAN_MODE_DIFFUSE_ACTION = 'fan_mode_diffuse_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAN_MODE_FOCUS_ACTION","title":"CONF_FAN_MODE_FOCUS_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_FAN_MODE_FOCUS_ACTION = 'fan_mode_focus_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAN_MODE_HIGH_ACTION","title":"CONF_FAN_MODE_HIGH_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_FAN_MODE_HIGH_ACTION = 'fan_mode_high_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAN_MODE_LOW_ACTION","title":"CONF_FAN_MODE_LOW_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_FAN_MODE_LOW_ACTION = 'fan_mode_low_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAN_MODE_MEDIUM_ACTION","title":"CONF_FAN_MODE_MEDIUM_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_FAN_MODE_MEDIUM_ACTION = 'fan_mode_medium_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAN_MODE_MIDDLE_ACTION","title":"CONF_FAN_MODE_MIDDLE_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_FAN_MODE_MIDDLE_ACTION = 'fan_mode_middle_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAN_MODE_OFF_ACTION","title":"CONF_FAN_MODE_OFF_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_FAN_MODE_OFF_ACTION = 'fan_mode_off_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAN_MODE_ON_ACTION","title":"CONF_FAN_MODE_ON_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_FAN_MODE_ON_ACTION = 'fan_mode_on_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAN_MODE_QUIET_ACTION","title":"CONF_FAN_MODE_QUIET_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_FAN_MODE_QUIET_ACTION = 'fan_mode_quiet_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAN_MODE_STATE_TOPIC","title":"CONF_FAN_MODE_STATE_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_FAN_MODE_STATE_TOPIC = 'fan_mode_state_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAN_ONLY_ACTION","title":"CONF_FAN_ONLY_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_FAN_ONLY_ACTION = 'fan_only_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAN_ONLY_ACTION_USES_FAN_MODE_TIMER","title":"CONF_FAN_ONLY_ACTION_USES_FAN_MODE_TIMER  <code>module-attribute</code>","text":"<pre><code>CONF_FAN_ONLY_ACTION_USES_FAN_MODE_TIMER = (\n    \"fan_only_action_uses_fan_mode_timer\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAN_ONLY_COOLING","title":"CONF_FAN_ONLY_COOLING  <code>module-attribute</code>","text":"<pre><code>CONF_FAN_ONLY_COOLING = 'fan_only_cooling'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAN_ONLY_MODE","title":"CONF_FAN_ONLY_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_FAN_ONLY_MODE = 'fan_only_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAN_WITH_COOLING","title":"CONF_FAN_WITH_COOLING  <code>module-attribute</code>","text":"<pre><code>CONF_FAN_WITH_COOLING = 'fan_with_cooling'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAN_WITH_HEATING","title":"CONF_FAN_WITH_HEATING  <code>module-attribute</code>","text":"<pre><code>CONF_FAN_WITH_HEATING = 'fan_with_heating'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FAST_CONNECT","title":"CONF_FAST_CONNECT  <code>module-attribute</code>","text":"<pre><code>CONF_FAST_CONNECT = 'fast_connect'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FIELD_STRENGTH_X","title":"CONF_FIELD_STRENGTH_X  <code>module-attribute</code>","text":"<pre><code>CONF_FIELD_STRENGTH_X = 'field_strength_x'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FIELD_STRENGTH_Y","title":"CONF_FIELD_STRENGTH_Y  <code>module-attribute</code>","text":"<pre><code>CONF_FIELD_STRENGTH_Y = 'field_strength_y'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FIELD_STRENGTH_Z","title":"CONF_FIELD_STRENGTH_Z  <code>module-attribute</code>","text":"<pre><code>CONF_FIELD_STRENGTH_Z = 'field_strength_z'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FILE","title":"CONF_FILE  <code>module-attribute</code>","text":"<pre><code>CONF_FILE = 'file'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FILES","title":"CONF_FILES  <code>module-attribute</code>","text":"<pre><code>CONF_FILES = 'files'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FILTER","title":"CONF_FILTER  <code>module-attribute</code>","text":"<pre><code>CONF_FILTER = 'filter'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FILTERS","title":"CONF_FILTERS  <code>module-attribute</code>","text":"<pre><code>CONF_FILTERS = 'filters'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FILTER_OUT","title":"CONF_FILTER_OUT  <code>module-attribute</code>","text":"<pre><code>CONF_FILTER_OUT = 'filter_out'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FINGERPRINT_COUNT","title":"CONF_FINGERPRINT_COUNT  <code>module-attribute</code>","text":"<pre><code>CONF_FINGERPRINT_COUNT = 'fingerprint_count'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FINGER_ID","title":"CONF_FINGER_ID  <code>module-attribute</code>","text":"<pre><code>CONF_FINGER_ID = 'finger_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FLASH_LENGTH","title":"CONF_FLASH_LENGTH  <code>module-attribute</code>","text":"<pre><code>CONF_FLASH_LENGTH = 'flash_length'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FLASH_TRANSITION_LENGTH","title":"CONF_FLASH_TRANSITION_LENGTH  <code>module-attribute</code>","text":"<pre><code>CONF_FLASH_TRANSITION_LENGTH = 'flash_transition_length'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FLOW","title":"CONF_FLOW  <code>module-attribute</code>","text":"<pre><code>CONF_FLOW = 'flow'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FLOW_CONTROL_PIN","title":"CONF_FLOW_CONTROL_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_FLOW_CONTROL_PIN = 'flow_control_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FOR","title":"CONF_FOR  <code>module-attribute</code>","text":"<pre><code>CONF_FOR = 'for'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FORCE_UPDATE","title":"CONF_FORCE_UPDATE  <code>module-attribute</code>","text":"<pre><code>CONF_FORCE_UPDATE = 'force_update'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FORMALDEHYDE","title":"CONF_FORMALDEHYDE  <code>module-attribute</code>","text":"<pre><code>CONF_FORMALDEHYDE = 'formaldehyde'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FORMAT","title":"CONF_FORMAT  <code>module-attribute</code>","text":"<pre><code>CONF_FORMAT = 'format'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FORWARD_ACTIVE_ENERGY","title":"CONF_FORWARD_ACTIVE_ENERGY  <code>module-attribute</code>","text":"<pre><code>CONF_FORWARD_ACTIVE_ENERGY = 'forward_active_energy'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FRAGMENTATION","title":"CONF_FRAGMENTATION  <code>module-attribute</code>","text":"<pre><code>CONF_FRAGMENTATION = 'fragmentation'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FRAMEWORK","title":"CONF_FRAMEWORK  <code>module-attribute</code>","text":"<pre><code>CONF_FRAMEWORK = 'framework'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FREE","title":"CONF_FREE  <code>module-attribute</code>","text":"<pre><code>CONF_FREE = 'free'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FREQUENCY","title":"CONF_FREQUENCY  <code>module-attribute</code>","text":"<pre><code>CONF_FREQUENCY = 'frequency'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FRIENDLY_NAME","title":"CONF_FRIENDLY_NAME  <code>module-attribute</code>","text":"<pre><code>CONF_FRIENDLY_NAME = 'friendly_name'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FROM","title":"CONF_FROM  <code>module-attribute</code>","text":"<pre><code>CONF_FROM = 'from'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FULL_SPECTRUM","title":"CONF_FULL_SPECTRUM  <code>module-attribute</code>","text":"<pre><code>CONF_FULL_SPECTRUM = 'full_spectrum'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_FULL_UPDATE_EVERY","title":"CONF_FULL_UPDATE_EVERY  <code>module-attribute</code>","text":"<pre><code>CONF_FULL_UPDATE_EVERY = 'full_update_every'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_GAIN","title":"CONF_GAIN  <code>module-attribute</code>","text":"<pre><code>CONF_GAIN = 'gain'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_GAMMA_CORRECT","title":"CONF_GAMMA_CORRECT  <code>module-attribute</code>","text":"<pre><code>CONF_GAMMA_CORRECT = 'gamma_correct'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_GAS_RESISTANCE","title":"CONF_GAS_RESISTANCE  <code>module-attribute</code>","text":"<pre><code>CONF_GAS_RESISTANCE = 'gas_resistance'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_GATEWAY","title":"CONF_GATEWAY  <code>module-attribute</code>","text":"<pre><code>CONF_GATEWAY = 'gateway'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_GLASS_ATTENUATION_FACTOR","title":"CONF_GLASS_ATTENUATION_FACTOR  <code>module-attribute</code>","text":"<pre><code>CONF_GLASS_ATTENUATION_FACTOR = 'glass_attenuation_factor'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_GLYPHS","title":"CONF_GLYPHS  <code>module-attribute</code>","text":"<pre><code>CONF_GLYPHS = 'glyphs'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_GPIO","title":"CONF_GPIO  <code>module-attribute</code>","text":"<pre><code>CONF_GPIO = 'gpio'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_GREEN","title":"CONF_GREEN  <code>module-attribute</code>","text":"<pre><code>CONF_GREEN = 'green'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_GROUP","title":"CONF_GROUP  <code>module-attribute</code>","text":"<pre><code>CONF_GROUP = 'group'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_GYROSCOPE_X","title":"CONF_GYROSCOPE_X  <code>module-attribute</code>","text":"<pre><code>CONF_GYROSCOPE_X = 'gyroscope_x'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_GYROSCOPE_Y","title":"CONF_GYROSCOPE_Y  <code>module-attribute</code>","text":"<pre><code>CONF_GYROSCOPE_Y = 'gyroscope_y'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_GYROSCOPE_Z","title":"CONF_GYROSCOPE_Z  <code>module-attribute</code>","text":"<pre><code>CONF_GYROSCOPE_Z = 'gyroscope_z'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_HARDWARE_UART","title":"CONF_HARDWARE_UART  <code>module-attribute</code>","text":"<pre><code>CONF_HARDWARE_UART = 'hardware_uart'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_HEAD","title":"CONF_HEAD  <code>module-attribute</code>","text":"<pre><code>CONF_HEAD = 'head'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_HEARTBEAT","title":"CONF_HEARTBEAT  <code>module-attribute</code>","text":"<pre><code>CONF_HEARTBEAT = 'heartbeat'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_HEATER","title":"CONF_HEATER  <code>module-attribute</code>","text":"<pre><code>CONF_HEATER = 'heater'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_HEAT_ACTION","title":"CONF_HEAT_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_HEAT_ACTION = 'heat_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_HEAT_DEADBAND","title":"CONF_HEAT_DEADBAND  <code>module-attribute</code>","text":"<pre><code>CONF_HEAT_DEADBAND = 'heat_deadband'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_HEAT_MODE","title":"CONF_HEAT_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_HEAT_MODE = 'heat_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_HEAT_OVERRUN","title":"CONF_HEAT_OVERRUN  <code>module-attribute</code>","text":"<pre><code>CONF_HEAT_OVERRUN = 'heat_overrun'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_HEIGHT","title":"CONF_HEIGHT  <code>module-attribute</code>","text":"<pre><code>CONF_HEIGHT = 'height'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_HIDDEN","title":"CONF_HIDDEN  <code>module-attribute</code>","text":"<pre><code>CONF_HIDDEN = 'hidden'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_HIDE_TIMESTAMP","title":"CONF_HIDE_TIMESTAMP  <code>module-attribute</code>","text":"<pre><code>CONF_HIDE_TIMESTAMP = 'hide_timestamp'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_HIGH","title":"CONF_HIGH  <code>module-attribute</code>","text":"<pre><code>CONF_HIGH = 'high'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_HIGH_VOLTAGE_REFERENCE","title":"CONF_HIGH_VOLTAGE_REFERENCE  <code>module-attribute</code>","text":"<pre><code>CONF_HIGH_VOLTAGE_REFERENCE = 'high_voltage_reference'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_HOUR","title":"CONF_HOUR  <code>module-attribute</code>","text":"<pre><code>CONF_HOUR = 'hour'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_HOURS","title":"CONF_HOURS  <code>module-attribute</code>","text":"<pre><code>CONF_HOURS = 'hours'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_HUMIDITY","title":"CONF_HUMIDITY  <code>module-attribute</code>","text":"<pre><code>CONF_HUMIDITY = 'humidity'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_HUMIDITY_SENSOR","title":"CONF_HUMIDITY_SENSOR  <code>module-attribute</code>","text":"<pre><code>CONF_HUMIDITY_SENSOR = 'humidity_sensor'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_HYSTERESIS","title":"CONF_HYSTERESIS  <code>module-attribute</code>","text":"<pre><code>CONF_HYSTERESIS = 'hysteresis'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_I2C","title":"CONF_I2C  <code>module-attribute</code>","text":"<pre><code>CONF_I2C = 'i2c'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_I2C_ID","title":"CONF_I2C_ID  <code>module-attribute</code>","text":"<pre><code>CONF_I2C_ID = 'i2c_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_IBEACON_MAJOR","title":"CONF_IBEACON_MAJOR  <code>module-attribute</code>","text":"<pre><code>CONF_IBEACON_MAJOR = 'ibeacon_major'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_IBEACON_MINOR","title":"CONF_IBEACON_MINOR  <code>module-attribute</code>","text":"<pre><code>CONF_IBEACON_MINOR = 'ibeacon_minor'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_IBEACON_UUID","title":"CONF_IBEACON_UUID  <code>module-attribute</code>","text":"<pre><code>CONF_IBEACON_UUID = 'ibeacon_uuid'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ICON","title":"CONF_ICON  <code>module-attribute</code>","text":"<pre><code>CONF_ICON = 'icon'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ID","title":"CONF_ID  <code>module-attribute</code>","text":"<pre><code>CONF_ID = 'id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_IDENTITY","title":"CONF_IDENTITY  <code>module-attribute</code>","text":"<pre><code>CONF_IDENTITY = 'identity'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_IDLE","title":"CONF_IDLE  <code>module-attribute</code>","text":"<pre><code>CONF_IDLE = 'idle'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_IDLE_ACTION","title":"CONF_IDLE_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_IDLE_ACTION = 'idle_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_IDLE_LEVEL","title":"CONF_IDLE_LEVEL  <code>module-attribute</code>","text":"<pre><code>CONF_IDLE_LEVEL = 'idle_level'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_IDLE_TIME","title":"CONF_IDLE_TIME  <code>module-attribute</code>","text":"<pre><code>CONF_IDLE_TIME = 'idle_time'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_IF","title":"CONF_IF  <code>module-attribute</code>","text":"<pre><code>CONF_IF = 'if'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_IGNORE_EFUSE_MAC_CRC","title":"CONF_IGNORE_EFUSE_MAC_CRC  <code>module-attribute</code>","text":"<pre><code>CONF_IGNORE_EFUSE_MAC_CRC = 'ignore_efuse_mac_crc'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_IGNORE_OUT_OF_RANGE","title":"CONF_IGNORE_OUT_OF_RANGE  <code>module-attribute</code>","text":"<pre><code>CONF_IGNORE_OUT_OF_RANGE = 'ignore_out_of_range'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_IGNORE_STRAPPING_WARNING","title":"CONF_IGNORE_STRAPPING_WARNING  <code>module-attribute</code>","text":"<pre><code>CONF_IGNORE_STRAPPING_WARNING = 'ignore_strapping_warning'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_IIR_FILTER","title":"CONF_IIR_FILTER  <code>module-attribute</code>","text":"<pre><code>CONF_IIR_FILTER = 'iir_filter'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ILLUMINANCE","title":"CONF_ILLUMINANCE  <code>module-attribute</code>","text":"<pre><code>CONF_ILLUMINANCE = 'illuminance'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_IMPEDANCE","title":"CONF_IMPEDANCE  <code>module-attribute</code>","text":"<pre><code>CONF_IMPEDANCE = 'impedance'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_IMPORT_ACTIVE_ENERGY","title":"CONF_IMPORT_ACTIVE_ENERGY  <code>module-attribute</code>","text":"<pre><code>CONF_IMPORT_ACTIVE_ENERGY = 'import_active_energy'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_IMPORT_REACTIVE_ENERGY","title":"CONF_IMPORT_REACTIVE_ENERGY  <code>module-attribute</code>","text":"<pre><code>CONF_IMPORT_REACTIVE_ENERGY = 'import_reactive_energy'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INCLUDES","title":"CONF_INCLUDES  <code>module-attribute</code>","text":"<pre><code>CONF_INCLUDES = 'includes'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INCLUDE_INTERNAL","title":"CONF_INCLUDE_INTERNAL  <code>module-attribute</code>","text":"<pre><code>CONF_INCLUDE_INTERNAL = 'include_internal'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INC_PIN","title":"CONF_INC_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_INC_PIN = 'inc_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INDEX","title":"CONF_INDEX  <code>module-attribute</code>","text":"<pre><code>CONF_INDEX = 'index'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INDOOR","title":"CONF_INDOOR  <code>module-attribute</code>","text":"<pre><code>CONF_INDOOR = 'indoor'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INFRARED","title":"CONF_INFRARED  <code>module-attribute</code>","text":"<pre><code>CONF_INFRARED = 'infrared'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INITIAL_MODE","title":"CONF_INITIAL_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_INITIAL_MODE = 'initial_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INITIAL_OPTION","title":"CONF_INITIAL_OPTION  <code>module-attribute</code>","text":"<pre><code>CONF_INITIAL_OPTION = 'initial_option'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INITIAL_VALUE","title":"CONF_INITIAL_VALUE  <code>module-attribute</code>","text":"<pre><code>CONF_INITIAL_VALUE = 'initial_value'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INPUT","title":"CONF_INPUT  <code>module-attribute</code>","text":"<pre><code>CONF_INPUT = 'input'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INTEGRATION_TIME","title":"CONF_INTEGRATION_TIME  <code>module-attribute</code>","text":"<pre><code>CONF_INTEGRATION_TIME = 'integration_time'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INTENSITY","title":"CONF_INTENSITY  <code>module-attribute</code>","text":"<pre><code>CONF_INTENSITY = 'intensity'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INTERLOCK","title":"CONF_INTERLOCK  <code>module-attribute</code>","text":"<pre><code>CONF_INTERLOCK = 'interlock'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INTERNAL","title":"CONF_INTERNAL  <code>module-attribute</code>","text":"<pre><code>CONF_INTERNAL = 'internal'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INTERNAL_FILTER","title":"CONF_INTERNAL_FILTER  <code>module-attribute</code>","text":"<pre><code>CONF_INTERNAL_FILTER = 'internal_filter'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INTERNAL_FILTER_MODE","title":"CONF_INTERNAL_FILTER_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_INTERNAL_FILTER_MODE = 'internal_filter_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INTERRUPT","title":"CONF_INTERRUPT  <code>module-attribute</code>","text":"<pre><code>CONF_INTERRUPT = 'interrupt'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INTERRUPT_PIN","title":"CONF_INTERRUPT_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_INTERRUPT_PIN = 'interrupt_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INTERVAL","title":"CONF_INTERVAL  <code>module-attribute</code>","text":"<pre><code>CONF_INTERVAL = 'interval'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INVALID_COOLDOWN","title":"CONF_INVALID_COOLDOWN  <code>module-attribute</code>","text":"<pre><code>CONF_INVALID_COOLDOWN = 'invalid_cooldown'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INVERT","title":"CONF_INVERT  <code>module-attribute</code>","text":"<pre><code>CONF_INVERT = 'invert'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INVERTED","title":"CONF_INVERTED  <code>module-attribute</code>","text":"<pre><code>CONF_INVERTED = 'inverted'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_INVERT_COLORS","title":"CONF_INVERT_COLORS  <code>module-attribute</code>","text":"<pre><code>CONF_INVERT_COLORS = 'invert_colors'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_IP_ADDRESS","title":"CONF_IP_ADDRESS  <code>module-attribute</code>","text":"<pre><code>CONF_IP_ADDRESS = 'ip_address'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_IRQ_PIN","title":"CONF_IRQ_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_IRQ_PIN = 'irq_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_JS_INCLUDE","title":"CONF_JS_INCLUDE  <code>module-attribute</code>","text":"<pre><code>CONF_JS_INCLUDE = 'js_include'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_JS_URL","title":"CONF_JS_URL  <code>module-attribute</code>","text":"<pre><code>CONF_JS_URL = 'js_url'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_JVC","title":"CONF_JVC  <code>module-attribute</code>","text":"<pre><code>CONF_JVC = 'jvc'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_KEEPALIVE","title":"CONF_KEEPALIVE  <code>module-attribute</code>","text":"<pre><code>CONF_KEEPALIVE = 'keepalive'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_KEEP_ON_TIME","title":"CONF_KEEP_ON_TIME  <code>module-attribute</code>","text":"<pre><code>CONF_KEEP_ON_TIME = 'keep_on_time'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_KEY","title":"CONF_KEY  <code>module-attribute</code>","text":"<pre><code>CONF_KEY = 'key'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LAMBDA","title":"CONF_LAMBDA  <code>module-attribute</code>","text":"<pre><code>CONF_LAMBDA = 'lambda'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LAST_CONFIDENCE","title":"CONF_LAST_CONFIDENCE  <code>module-attribute</code>","text":"<pre><code>CONF_LAST_CONFIDENCE = 'last_confidence'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LAST_FINGER_ID","title":"CONF_LAST_FINGER_ID  <code>module-attribute</code>","text":"<pre><code>CONF_LAST_FINGER_ID = 'last_finger_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LATITUDE","title":"CONF_LATITUDE  <code>module-attribute</code>","text":"<pre><code>CONF_LATITUDE = 'latitude'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LED","title":"CONF_LED  <code>module-attribute</code>","text":"<pre><code>CONF_LED = 'led'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LEGEND","title":"CONF_LEGEND  <code>module-attribute</code>","text":"<pre><code>CONF_LEGEND = 'legend'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LENGTH","title":"CONF_LENGTH  <code>module-attribute</code>","text":"<pre><code>CONF_LENGTH = 'length'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LEVEL","title":"CONF_LEVEL  <code>module-attribute</code>","text":"<pre><code>CONF_LEVEL = 'level'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LG","title":"CONF_LG  <code>module-attribute</code>","text":"<pre><code>CONF_LG = 'lg'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LIBRARIES","title":"CONF_LIBRARIES  <code>module-attribute</code>","text":"<pre><code>CONF_LIBRARIES = 'libraries'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LIGHT","title":"CONF_LIGHT  <code>module-attribute</code>","text":"<pre><code>CONF_LIGHT = 'light'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LIGHTNING_ENERGY","title":"CONF_LIGHTNING_ENERGY  <code>module-attribute</code>","text":"<pre><code>CONF_LIGHTNING_ENERGY = 'lightning_energy'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LIGHTNING_THRESHOLD","title":"CONF_LIGHTNING_THRESHOLD  <code>module-attribute</code>","text":"<pre><code>CONF_LIGHTNING_THRESHOLD = 'lightning_threshold'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LIGHT_ID","title":"CONF_LIGHT_ID  <code>module-attribute</code>","text":"<pre><code>CONF_LIGHT_ID = 'light_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LINE_THICKNESS","title":"CONF_LINE_THICKNESS  <code>module-attribute</code>","text":"<pre><code>CONF_LINE_THICKNESS = 'line_thickness'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LINE_TYPE","title":"CONF_LINE_TYPE  <code>module-attribute</code>","text":"<pre><code>CONF_LINE_TYPE = 'line_type'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LOADED_INTEGRATIONS","title":"CONF_LOADED_INTEGRATIONS  <code>module-attribute</code>","text":"<pre><code>CONF_LOADED_INTEGRATIONS = 'loaded_integrations'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LOCAL","title":"CONF_LOCAL  <code>module-attribute</code>","text":"<pre><code>CONF_LOCAL = 'local'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LOCK_ACTION","title":"CONF_LOCK_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_LOCK_ACTION = 'lock_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LOG","title":"CONF_LOG  <code>module-attribute</code>","text":"<pre><code>CONF_LOG = 'log'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LOGGER","title":"CONF_LOGGER  <code>module-attribute</code>","text":"<pre><code>CONF_LOGGER = 'logger'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LOGS","title":"CONF_LOGS  <code>module-attribute</code>","text":"<pre><code>CONF_LOGS = 'logs'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LOG_TOPIC","title":"CONF_LOG_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_LOG_TOPIC = 'log_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LONGITUDE","title":"CONF_LONGITUDE  <code>module-attribute</code>","text":"<pre><code>CONF_LONGITUDE = 'longitude'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LOOP_TIME","title":"CONF_LOOP_TIME  <code>module-attribute</code>","text":"<pre><code>CONF_LOOP_TIME = 'loop_time'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LOW","title":"CONF_LOW  <code>module-attribute</code>","text":"<pre><code>CONF_LOW = 'low'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_LOW_VOLTAGE_REFERENCE","title":"CONF_LOW_VOLTAGE_REFERENCE  <code>module-attribute</code>","text":"<pre><code>CONF_LOW_VOLTAGE_REFERENCE = 'low_voltage_reference'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MAC_ADDRESS","title":"CONF_MAC_ADDRESS  <code>module-attribute</code>","text":"<pre><code>CONF_MAC_ADDRESS = 'mac_address'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MAGNITUDE","title":"CONF_MAGNITUDE  <code>module-attribute</code>","text":"<pre><code>CONF_MAGNITUDE = 'magnitude'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MAINS_FILTER","title":"CONF_MAINS_FILTER  <code>module-attribute</code>","text":"<pre><code>CONF_MAINS_FILTER = 'mains_filter'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MAKE_ID","title":"CONF_MAKE_ID  <code>module-attribute</code>","text":"<pre><code>CONF_MAKE_ID = 'make_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MANUAL_IP","title":"CONF_MANUAL_IP  <code>module-attribute</code>","text":"<pre><code>CONF_MANUAL_IP = 'manual_ip'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MANUFACTURER_ID","title":"CONF_MANUFACTURER_ID  <code>module-attribute</code>","text":"<pre><code>CONF_MANUFACTURER_ID = 'manufacturer_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MASK_DISTURBER","title":"CONF_MASK_DISTURBER  <code>module-attribute</code>","text":"<pre><code>CONF_MASK_DISTURBER = 'mask_disturber'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MAX_BRIGHTNESS","title":"CONF_MAX_BRIGHTNESS  <code>module-attribute</code>","text":"<pre><code>CONF_MAX_BRIGHTNESS = 'max_brightness'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MAX_COOLING_RUN_TIME","title":"CONF_MAX_COOLING_RUN_TIME  <code>module-attribute</code>","text":"<pre><code>CONF_MAX_COOLING_RUN_TIME = 'max_cooling_run_time'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MAX_CURRENT","title":"CONF_MAX_CURRENT  <code>module-attribute</code>","text":"<pre><code>CONF_MAX_CURRENT = 'max_current'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MAX_DURATION","title":"CONF_MAX_DURATION  <code>module-attribute</code>","text":"<pre><code>CONF_MAX_DURATION = 'max_duration'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MAX_HEATING_RUN_TIME","title":"CONF_MAX_HEATING_RUN_TIME  <code>module-attribute</code>","text":"<pre><code>CONF_MAX_HEATING_RUN_TIME = 'max_heating_run_time'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MAX_LENGTH","title":"CONF_MAX_LENGTH  <code>module-attribute</code>","text":"<pre><code>CONF_MAX_LENGTH = 'max_length'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MAX_LEVEL","title":"CONF_MAX_LEVEL  <code>module-attribute</code>","text":"<pre><code>CONF_MAX_LEVEL = 'max_level'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MAX_POWER","title":"CONF_MAX_POWER  <code>module-attribute</code>","text":"<pre><code>CONF_MAX_POWER = 'max_power'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MAX_RANGE","title":"CONF_MAX_RANGE  <code>module-attribute</code>","text":"<pre><code>CONF_MAX_RANGE = 'max_range'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MAX_REFRESH_RATE","title":"CONF_MAX_REFRESH_RATE  <code>module-attribute</code>","text":"<pre><code>CONF_MAX_REFRESH_RATE = 'max_refresh_rate'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MAX_SPEED","title":"CONF_MAX_SPEED  <code>module-attribute</code>","text":"<pre><code>CONF_MAX_SPEED = 'max_speed'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MAX_TEMPERATURE","title":"CONF_MAX_TEMPERATURE  <code>module-attribute</code>","text":"<pre><code>CONF_MAX_TEMPERATURE = 'max_temperature'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MAX_VALUE","title":"CONF_MAX_VALUE  <code>module-attribute</code>","text":"<pre><code>CONF_MAX_VALUE = 'max_value'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MAX_VOLTAGE","title":"CONF_MAX_VOLTAGE  <code>module-attribute</code>","text":"<pre><code>CONF_MAX_VOLTAGE = 'max_voltage'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MDNS","title":"CONF_MDNS  <code>module-attribute</code>","text":"<pre><code>CONF_MDNS = 'mdns'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MEASUREMENT_DURATION","title":"CONF_MEASUREMENT_DURATION  <code>module-attribute</code>","text":"<pre><code>CONF_MEASUREMENT_DURATION = 'measurement_duration'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MEASUREMENT_SEQUENCE_NUMBER","title":"CONF_MEASUREMENT_SEQUENCE_NUMBER  <code>module-attribute</code>","text":"<pre><code>CONF_MEASUREMENT_SEQUENCE_NUMBER = (\n    \"measurement_sequence_number\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MEDIA_PLAYER","title":"CONF_MEDIA_PLAYER  <code>module-attribute</code>","text":"<pre><code>CONF_MEDIA_PLAYER = 'media_player'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MEDIUM","title":"CONF_MEDIUM  <code>module-attribute</code>","text":"<pre><code>CONF_MEDIUM = 'medium'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MEMORY_BLOCKS","title":"CONF_MEMORY_BLOCKS  <code>module-attribute</code>","text":"<pre><code>CONF_MEMORY_BLOCKS = 'memory_blocks'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_METHOD","title":"CONF_METHOD  <code>module-attribute</code>","text":"<pre><code>CONF_METHOD = 'method'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MICROPHONE","title":"CONF_MICROPHONE  <code>module-attribute</code>","text":"<pre><code>CONF_MICROPHONE = 'microphone'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MINUTE","title":"CONF_MINUTE  <code>module-attribute</code>","text":"<pre><code>CONF_MINUTE = 'minute'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MINUTES","title":"CONF_MINUTES  <code>module-attribute</code>","text":"<pre><code>CONF_MINUTES = 'minutes'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MIN_BRIGHTNESS","title":"CONF_MIN_BRIGHTNESS  <code>module-attribute</code>","text":"<pre><code>CONF_MIN_BRIGHTNESS = 'min_brightness'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MIN_COOLING_OFF_TIME","title":"CONF_MIN_COOLING_OFF_TIME  <code>module-attribute</code>","text":"<pre><code>CONF_MIN_COOLING_OFF_TIME = 'min_cooling_off_time'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MIN_COOLING_RUN_TIME","title":"CONF_MIN_COOLING_RUN_TIME  <code>module-attribute</code>","text":"<pre><code>CONF_MIN_COOLING_RUN_TIME = 'min_cooling_run_time'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MIN_FANNING_OFF_TIME","title":"CONF_MIN_FANNING_OFF_TIME  <code>module-attribute</code>","text":"<pre><code>CONF_MIN_FANNING_OFF_TIME = 'min_fanning_off_time'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MIN_FANNING_RUN_TIME","title":"CONF_MIN_FANNING_RUN_TIME  <code>module-attribute</code>","text":"<pre><code>CONF_MIN_FANNING_RUN_TIME = 'min_fanning_run_time'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MIN_FAN_MODE_SWITCHING_TIME","title":"CONF_MIN_FAN_MODE_SWITCHING_TIME  <code>module-attribute</code>","text":"<pre><code>CONF_MIN_FAN_MODE_SWITCHING_TIME = (\n    \"min_fan_mode_switching_time\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MIN_HEATING_OFF_TIME","title":"CONF_MIN_HEATING_OFF_TIME  <code>module-attribute</code>","text":"<pre><code>CONF_MIN_HEATING_OFF_TIME = 'min_heating_off_time'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MIN_HEATING_RUN_TIME","title":"CONF_MIN_HEATING_RUN_TIME  <code>module-attribute</code>","text":"<pre><code>CONF_MIN_HEATING_RUN_TIME = 'min_heating_run_time'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MIN_IDLE_TIME","title":"CONF_MIN_IDLE_TIME  <code>module-attribute</code>","text":"<pre><code>CONF_MIN_IDLE_TIME = 'min_idle_time'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MIN_LENGTH","title":"CONF_MIN_LENGTH  <code>module-attribute</code>","text":"<pre><code>CONF_MIN_LENGTH = 'min_length'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MIN_LEVEL","title":"CONF_MIN_LEVEL  <code>module-attribute</code>","text":"<pre><code>CONF_MIN_LEVEL = 'min_level'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MIN_POWER","title":"CONF_MIN_POWER  <code>module-attribute</code>","text":"<pre><code>CONF_MIN_POWER = 'min_power'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MIN_RANGE","title":"CONF_MIN_RANGE  <code>module-attribute</code>","text":"<pre><code>CONF_MIN_RANGE = 'min_range'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MIN_RSSI","title":"CONF_MIN_RSSI  <code>module-attribute</code>","text":"<pre><code>CONF_MIN_RSSI = 'min_rssi'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MIN_TEMPERATURE","title":"CONF_MIN_TEMPERATURE  <code>module-attribute</code>","text":"<pre><code>CONF_MIN_TEMPERATURE = 'min_temperature'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MIN_VALUE","title":"CONF_MIN_VALUE  <code>module-attribute</code>","text":"<pre><code>CONF_MIN_VALUE = 'min_value'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MIN_VERSION","title":"CONF_MIN_VERSION  <code>module-attribute</code>","text":"<pre><code>CONF_MIN_VERSION = 'min_version'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MIRROR_X","title":"CONF_MIRROR_X  <code>module-attribute</code>","text":"<pre><code>CONF_MIRROR_X = 'mirror_x'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MIRROR_Y","title":"CONF_MIRROR_Y  <code>module-attribute</code>","text":"<pre><code>CONF_MIRROR_Y = 'mirror_y'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MISO_PIN","title":"CONF_MISO_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_MISO_PIN = 'miso_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MODE","title":"CONF_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_MODE = 'mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MODEL","title":"CONF_MODEL  <code>module-attribute</code>","text":"<pre><code>CONF_MODEL = 'model'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MODE_COMMAND_TOPIC","title":"CONF_MODE_COMMAND_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_MODE_COMMAND_TOPIC = 'mode_command_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MODE_STATE_TOPIC","title":"CONF_MODE_STATE_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_MODE_STATE_TOPIC = 'mode_state_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MOISTURE","title":"CONF_MOISTURE  <code>module-attribute</code>","text":"<pre><code>CONF_MOISTURE = 'moisture'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MONTHS","title":"CONF_MONTHS  <code>module-attribute</code>","text":"<pre><code>CONF_MONTHS = 'months'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MOSI_PIN","title":"CONF_MOSI_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_MOSI_PIN = 'mosi_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MOTION","title":"CONF_MOTION  <code>module-attribute</code>","text":"<pre><code>CONF_MOTION = 'motion'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MOVEMENT_COUNTER","title":"CONF_MOVEMENT_COUNTER  <code>module-attribute</code>","text":"<pre><code>CONF_MOVEMENT_COUNTER = 'movement_counter'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MQTT","title":"CONF_MQTT  <code>module-attribute</code>","text":"<pre><code>CONF_MQTT = 'mqtt'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MQTT_ID","title":"CONF_MQTT_ID  <code>module-attribute</code>","text":"<pre><code>CONF_MQTT_ID = 'mqtt_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MULTIPLEXER","title":"CONF_MULTIPLEXER  <code>module-attribute</code>","text":"<pre><code>CONF_MULTIPLEXER = 'multiplexer'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_MULTIPLY","title":"CONF_MULTIPLY  <code>module-attribute</code>","text":"<pre><code>CONF_MULTIPLY = 'multiply'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_NAME","title":"CONF_NAME  <code>module-attribute</code>","text":"<pre><code>CONF_NAME = 'name'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_NAME_FONT","title":"CONF_NAME_FONT  <code>module-attribute</code>","text":"<pre><code>CONF_NAME_FONT = 'name_font'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_NBITS","title":"CONF_NBITS  <code>module-attribute</code>","text":"<pre><code>CONF_NBITS = 'nbits'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_NEC","title":"CONF_NEC  <code>module-attribute</code>","text":"<pre><code>CONF_NEC = 'nec'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_NETWORKS","title":"CONF_NETWORKS  <code>module-attribute</code>","text":"<pre><code>CONF_NETWORKS = 'networks'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_NEW_PASSWORD","title":"CONF_NEW_PASSWORD  <code>module-attribute</code>","text":"<pre><code>CONF_NEW_PASSWORD = 'new_password'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_NOISE_LEVEL","title":"CONF_NOISE_LEVEL  <code>module-attribute</code>","text":"<pre><code>CONF_NOISE_LEVEL = 'noise_level'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_NUMBER","title":"CONF_NUMBER  <code>module-attribute</code>","text":"<pre><code>CONF_NUMBER = 'number'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_NUMBER_DATAPOINT","title":"CONF_NUMBER_DATAPOINT  <code>module-attribute</code>","text":"<pre><code>CONF_NUMBER_DATAPOINT = 'number_datapoint'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_NUM_ATTEMPTS","title":"CONF_NUM_ATTEMPTS  <code>module-attribute</code>","text":"<pre><code>CONF_NUM_ATTEMPTS = 'num_attempts'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_NUM_CHANNELS","title":"CONF_NUM_CHANNELS  <code>module-attribute</code>","text":"<pre><code>CONF_NUM_CHANNELS = 'num_channels'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_NUM_CHIPS","title":"CONF_NUM_CHIPS  <code>module-attribute</code>","text":"<pre><code>CONF_NUM_CHIPS = 'num_chips'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_NUM_LEDS","title":"CONF_NUM_LEDS  <code>module-attribute</code>","text":"<pre><code>CONF_NUM_LEDS = 'num_leds'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_NUM_SCANS","title":"CONF_NUM_SCANS  <code>module-attribute</code>","text":"<pre><code>CONF_NUM_SCANS = 'num_scans'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OFFSET","title":"CONF_OFFSET  <code>module-attribute</code>","text":"<pre><code>CONF_OFFSET = 'offset'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OFFSET_HEIGHT","title":"CONF_OFFSET_HEIGHT  <code>module-attribute</code>","text":"<pre><code>CONF_OFFSET_HEIGHT = 'offset_height'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OFFSET_WIDTH","title":"CONF_OFFSET_WIDTH  <code>module-attribute</code>","text":"<pre><code>CONF_OFFSET_WIDTH = 'offset_width'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OFF_MODE","title":"CONF_OFF_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_OFF_MODE = 'off_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OFF_SPEED_CYCLE","title":"CONF_OFF_SPEED_CYCLE  <code>module-attribute</code>","text":"<pre><code>CONF_OFF_SPEED_CYCLE = 'off_speed_cycle'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON","title":"CONF_ON  <code>module-attribute</code>","text":"<pre><code>CONF_ON = 'on'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ONE","title":"CONF_ONE  <code>module-attribute</code>","text":"<pre><code>CONF_ONE = 'one'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_BLE_ADVERTISE","title":"CONF_ON_BLE_ADVERTISE  <code>module-attribute</code>","text":"<pre><code>CONF_ON_BLE_ADVERTISE = 'on_ble_advertise'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_BLE_MANUFACTURER_DATA_ADVERTISE","title":"CONF_ON_BLE_MANUFACTURER_DATA_ADVERTISE  <code>module-attribute</code>","text":"<pre><code>CONF_ON_BLE_MANUFACTURER_DATA_ADVERTISE = (\n    \"on_ble_manufacturer_data_advertise\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_BLE_SERVICE_DATA_ADVERTISE","title":"CONF_ON_BLE_SERVICE_DATA_ADVERTISE  <code>module-attribute</code>","text":"<pre><code>CONF_ON_BLE_SERVICE_DATA_ADVERTISE = (\n    \"on_ble_service_data_advertise\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_BOOT","title":"CONF_ON_BOOT  <code>module-attribute</code>","text":"<pre><code>CONF_ON_BOOT = 'on_boot'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_CLICK","title":"CONF_ON_CLICK  <code>module-attribute</code>","text":"<pre><code>CONF_ON_CLICK = 'on_click'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_CLIENT_CONNECTED","title":"CONF_ON_CLIENT_CONNECTED  <code>module-attribute</code>","text":"<pre><code>CONF_ON_CLIENT_CONNECTED = 'on_client_connected'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_CLIENT_DISCONNECTED","title":"CONF_ON_CLIENT_DISCONNECTED  <code>module-attribute</code>","text":"<pre><code>CONF_ON_CLIENT_DISCONNECTED = 'on_client_disconnected'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_CONNECT","title":"CONF_ON_CONNECT  <code>module-attribute</code>","text":"<pre><code>CONF_ON_CONNECT = 'on_connect'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_CONTROL","title":"CONF_ON_CONTROL  <code>module-attribute</code>","text":"<pre><code>CONF_ON_CONTROL = 'on_control'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_DISCONNECT","title":"CONF_ON_DISCONNECT  <code>module-attribute</code>","text":"<pre><code>CONF_ON_DISCONNECT = 'on_disconnect'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_DOUBLE_CLICK","title":"CONF_ON_DOUBLE_CLICK  <code>module-attribute</code>","text":"<pre><code>CONF_ON_DOUBLE_CLICK = 'on_double_click'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_ENROLLMENT_DONE","title":"CONF_ON_ENROLLMENT_DONE  <code>module-attribute</code>","text":"<pre><code>CONF_ON_ENROLLMENT_DONE = 'on_enrollment_done'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_ENROLLMENT_FAILED","title":"CONF_ON_ENROLLMENT_FAILED  <code>module-attribute</code>","text":"<pre><code>CONF_ON_ENROLLMENT_FAILED = 'on_enrollment_failed'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_ENROLLMENT_SCAN","title":"CONF_ON_ENROLLMENT_SCAN  <code>module-attribute</code>","text":"<pre><code>CONF_ON_ENROLLMENT_SCAN = 'on_enrollment_scan'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_FINGER_SCAN_INVALID","title":"CONF_ON_FINGER_SCAN_INVALID  <code>module-attribute</code>","text":"<pre><code>CONF_ON_FINGER_SCAN_INVALID = 'on_finger_scan_invalid'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_FINGER_SCAN_MATCHED","title":"CONF_ON_FINGER_SCAN_MATCHED  <code>module-attribute</code>","text":"<pre><code>CONF_ON_FINGER_SCAN_MATCHED = 'on_finger_scan_matched'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_FINGER_SCAN_MISPLACED","title":"CONF_ON_FINGER_SCAN_MISPLACED  <code>module-attribute</code>","text":"<pre><code>CONF_ON_FINGER_SCAN_MISPLACED = 'on_finger_scan_misplaced'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_FINGER_SCAN_START","title":"CONF_ON_FINGER_SCAN_START  <code>module-attribute</code>","text":"<pre><code>CONF_ON_FINGER_SCAN_START = 'on_finger_scan_start'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_FINGER_SCAN_UNMATCHED","title":"CONF_ON_FINGER_SCAN_UNMATCHED  <code>module-attribute</code>","text":"<pre><code>CONF_ON_FINGER_SCAN_UNMATCHED = 'on_finger_scan_unmatched'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_JSON_MESSAGE","title":"CONF_ON_JSON_MESSAGE  <code>module-attribute</code>","text":"<pre><code>CONF_ON_JSON_MESSAGE = 'on_json_message'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_LOCK","title":"CONF_ON_LOCK  <code>module-attribute</code>","text":"<pre><code>CONF_ON_LOCK = 'on_lock'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_LOOP","title":"CONF_ON_LOOP  <code>module-attribute</code>","text":"<pre><code>CONF_ON_LOOP = 'on_loop'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_MESSAGE","title":"CONF_ON_MESSAGE  <code>module-attribute</code>","text":"<pre><code>CONF_ON_MESSAGE = 'on_message'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_MULTI_CLICK","title":"CONF_ON_MULTI_CLICK  <code>module-attribute</code>","text":"<pre><code>CONF_ON_MULTI_CLICK = 'on_multi_click'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_OPEN","title":"CONF_ON_OPEN  <code>module-attribute</code>","text":"<pre><code>CONF_ON_OPEN = 'on_open'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_PRESET_SET","title":"CONF_ON_PRESET_SET  <code>module-attribute</code>","text":"<pre><code>CONF_ON_PRESET_SET = 'on_preset_set'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_PRESS","title":"CONF_ON_PRESS  <code>module-attribute</code>","text":"<pre><code>CONF_ON_PRESS = 'on_press'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_RAW_VALUE","title":"CONF_ON_RAW_VALUE  <code>module-attribute</code>","text":"<pre><code>CONF_ON_RAW_VALUE = 'on_raw_value'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_RELEASE","title":"CONF_ON_RELEASE  <code>module-attribute</code>","text":"<pre><code>CONF_ON_RELEASE = 'on_release'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_SHUTDOWN","title":"CONF_ON_SHUTDOWN  <code>module-attribute</code>","text":"<pre><code>CONF_ON_SHUTDOWN = 'on_shutdown'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_SPEED_SET","title":"CONF_ON_SPEED_SET  <code>module-attribute</code>","text":"<pre><code>CONF_ON_SPEED_SET = 'on_speed_set'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_STATE","title":"CONF_ON_STATE  <code>module-attribute</code>","text":"<pre><code>CONF_ON_STATE = 'on_state'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_TAG","title":"CONF_ON_TAG  <code>module-attribute</code>","text":"<pre><code>CONF_ON_TAG = 'on_tag'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_TAG_REMOVED","title":"CONF_ON_TAG_REMOVED  <code>module-attribute</code>","text":"<pre><code>CONF_ON_TAG_REMOVED = 'on_tag_removed'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_TIME","title":"CONF_ON_TIME  <code>module-attribute</code>","text":"<pre><code>CONF_ON_TIME = 'on_time'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_TIMEOUT","title":"CONF_ON_TIMEOUT  <code>module-attribute</code>","text":"<pre><code>CONF_ON_TIMEOUT = 'on_timeout'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_TIME_SYNC","title":"CONF_ON_TIME_SYNC  <code>module-attribute</code>","text":"<pre><code>CONF_ON_TIME_SYNC = 'on_time_sync'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_TOUCH","title":"CONF_ON_TOUCH  <code>module-attribute</code>","text":"<pre><code>CONF_ON_TOUCH = 'on_touch'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_TURN_OFF","title":"CONF_ON_TURN_OFF  <code>module-attribute</code>","text":"<pre><code>CONF_ON_TURN_OFF = 'on_turn_off'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_TURN_ON","title":"CONF_ON_TURN_ON  <code>module-attribute</code>","text":"<pre><code>CONF_ON_TURN_ON = 'on_turn_on'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_UNLOCK","title":"CONF_ON_UNLOCK  <code>module-attribute</code>","text":"<pre><code>CONF_ON_UNLOCK = 'on_unlock'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_VALUE","title":"CONF_ON_VALUE  <code>module-attribute</code>","text":"<pre><code>CONF_ON_VALUE = 'on_value'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ON_VALUE_RANGE","title":"CONF_ON_VALUE_RANGE  <code>module-attribute</code>","text":"<pre><code>CONF_ON_VALUE_RANGE = 'on_value_range'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OPEN_ACTION","title":"CONF_OPEN_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_OPEN_ACTION = 'open_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OPEN_DRAIN","title":"CONF_OPEN_DRAIN  <code>module-attribute</code>","text":"<pre><code>CONF_OPEN_DRAIN = 'open_drain'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OPEN_DRAIN_INTERRUPT","title":"CONF_OPEN_DRAIN_INTERRUPT  <code>module-attribute</code>","text":"<pre><code>CONF_OPEN_DRAIN_INTERRUPT = 'open_drain_interrupt'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OPEN_DURATION","title":"CONF_OPEN_DURATION  <code>module-attribute</code>","text":"<pre><code>CONF_OPEN_DURATION = 'open_duration'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OPEN_ENDSTOP","title":"CONF_OPEN_ENDSTOP  <code>module-attribute</code>","text":"<pre><code>CONF_OPEN_ENDSTOP = 'open_endstop'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OPERATION","title":"CONF_OPERATION  <code>module-attribute</code>","text":"<pre><code>CONF_OPERATION = 'operation'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OPTIMISTIC","title":"CONF_OPTIMISTIC  <code>module-attribute</code>","text":"<pre><code>CONF_OPTIMISTIC = 'optimistic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OPTION","title":"CONF_OPTION  <code>module-attribute</code>","text":"<pre><code>CONF_OPTION = 'option'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OPTIONS","title":"CONF_OPTIONS  <code>module-attribute</code>","text":"<pre><code>CONF_OPTIONS = 'options'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OR","title":"CONF_OR  <code>module-attribute</code>","text":"<pre><code>CONF_OR = 'or'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OSCILLATING","title":"CONF_OSCILLATING  <code>module-attribute</code>","text":"<pre><code>CONF_OSCILLATING = 'oscillating'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OSCILLATION_COMMAND_TOPIC","title":"CONF_OSCILLATION_COMMAND_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_OSCILLATION_COMMAND_TOPIC = \"oscillation_command_topic\"\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OSCILLATION_OUTPUT","title":"CONF_OSCILLATION_OUTPUT  <code>module-attribute</code>","text":"<pre><code>CONF_OSCILLATION_OUTPUT = 'oscillation_output'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OSCILLATION_STATE_TOPIC","title":"CONF_OSCILLATION_STATE_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_OSCILLATION_STATE_TOPIC = 'oscillation_state_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OTA","title":"CONF_OTA  <code>module-attribute</code>","text":"<pre><code>CONF_OTA = 'ota'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OUTPUT","title":"CONF_OUTPUT  <code>module-attribute</code>","text":"<pre><code>CONF_OUTPUT = 'output'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OUTPUTS","title":"CONF_OUTPUTS  <code>module-attribute</code>","text":"<pre><code>CONF_OUTPUTS = 'outputs'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OUTPUT_ID","title":"CONF_OUTPUT_ID  <code>module-attribute</code>","text":"<pre><code>CONF_OUTPUT_ID = 'output_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_OVERSAMPLING","title":"CONF_OVERSAMPLING  <code>module-attribute</code>","text":"<pre><code>CONF_OVERSAMPLING = 'oversampling'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PACKAGES","title":"CONF_PACKAGES  <code>module-attribute</code>","text":"<pre><code>CONF_PACKAGES = 'packages'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PAGES","title":"CONF_PAGES  <code>module-attribute</code>","text":"<pre><code>CONF_PAGES = 'pages'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PAGE_ID","title":"CONF_PAGE_ID  <code>module-attribute</code>","text":"<pre><code>CONF_PAGE_ID = 'page_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PANASONIC","title":"CONF_PANASONIC  <code>module-attribute</code>","text":"<pre><code>CONF_PANASONIC = 'panasonic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PARAMETERS","title":"CONF_PARAMETERS  <code>module-attribute</code>","text":"<pre><code>CONF_PARAMETERS = 'parameters'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PASSWORD","title":"CONF_PASSWORD  <code>module-attribute</code>","text":"<pre><code>CONF_PASSWORD = 'password'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PATH","title":"CONF_PATH  <code>module-attribute</code>","text":"<pre><code>CONF_PATH = 'path'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PATTERN","title":"CONF_PATTERN  <code>module-attribute</code>","text":"<pre><code>CONF_PATTERN = 'pattern'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PAYLOAD","title":"CONF_PAYLOAD  <code>module-attribute</code>","text":"<pre><code>CONF_PAYLOAD = 'payload'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PAYLOAD_AVAILABLE","title":"CONF_PAYLOAD_AVAILABLE  <code>module-attribute</code>","text":"<pre><code>CONF_PAYLOAD_AVAILABLE = 'payload_available'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PAYLOAD_NOT_AVAILABLE","title":"CONF_PAYLOAD_NOT_AVAILABLE  <code>module-attribute</code>","text":"<pre><code>CONF_PAYLOAD_NOT_AVAILABLE = 'payload_not_available'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PERIOD","title":"CONF_PERIOD  <code>module-attribute</code>","text":"<pre><code>CONF_PERIOD = 'period'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PH","title":"CONF_PH  <code>module-attribute</code>","text":"<pre><code>CONF_PH = 'ph'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PHASE_A","title":"CONF_PHASE_A  <code>module-attribute</code>","text":"<pre><code>CONF_PHASE_A = 'phase_a'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PHASE_ANGLE","title":"CONF_PHASE_ANGLE  <code>module-attribute</code>","text":"<pre><code>CONF_PHASE_ANGLE = 'phase_angle'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PHASE_B","title":"CONF_PHASE_B  <code>module-attribute</code>","text":"<pre><code>CONF_PHASE_B = 'phase_b'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PHASE_BALANCER","title":"CONF_PHASE_BALANCER  <code>module-attribute</code>","text":"<pre><code>CONF_PHASE_BALANCER = 'phase_balancer'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PHASE_C","title":"CONF_PHASE_C  <code>module-attribute</code>","text":"<pre><code>CONF_PHASE_C = 'phase_c'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PIN","title":"CONF_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_PIN = 'pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PINS","title":"CONF_PINS  <code>module-attribute</code>","text":"<pre><code>CONF_PINS = 'pins'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PIN_A","title":"CONF_PIN_A  <code>module-attribute</code>","text":"<pre><code>CONF_PIN_A = 'pin_a'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PIN_B","title":"CONF_PIN_B  <code>module-attribute</code>","text":"<pre><code>CONF_PIN_B = 'pin_b'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PIN_C","title":"CONF_PIN_C  <code>module-attribute</code>","text":"<pre><code>CONF_PIN_C = 'pin_c'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PIN_D","title":"CONF_PIN_D  <code>module-attribute</code>","text":"<pre><code>CONF_PIN_D = 'pin_d'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PIXEL_MAPPER","title":"CONF_PIXEL_MAPPER  <code>module-attribute</code>","text":"<pre><code>CONF_PIXEL_MAPPER = 'pixel_mapper'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PLATFORM","title":"CONF_PLATFORM  <code>module-attribute</code>","text":"<pre><code>CONF_PLATFORM = 'platform'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PLATFORMIO_OPTIONS","title":"CONF_PLATFORMIO_OPTIONS  <code>module-attribute</code>","text":"<pre><code>CONF_PLATFORMIO_OPTIONS = 'platformio_options'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PMC_0_5","title":"CONF_PMC_0_5  <code>module-attribute</code>","text":"<pre><code>CONF_PMC_0_5 = 'pmc_0_5'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PMC_10_0","title":"CONF_PMC_10_0  <code>module-attribute</code>","text":"<pre><code>CONF_PMC_10_0 = 'pmc_10_0'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PMC_1_0","title":"CONF_PMC_1_0  <code>module-attribute</code>","text":"<pre><code>CONF_PMC_1_0 = 'pmc_1_0'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PMC_2_5","title":"CONF_PMC_2_5  <code>module-attribute</code>","text":"<pre><code>CONF_PMC_2_5 = 'pmc_2_5'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PMC_4_0","title":"CONF_PMC_4_0  <code>module-attribute</code>","text":"<pre><code>CONF_PMC_4_0 = 'pmc_4_0'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PM_0_3UM","title":"CONF_PM_0_3UM  <code>module-attribute</code>","text":"<pre><code>CONF_PM_0_3UM = 'pm_0_3um'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PM_0_5UM","title":"CONF_PM_0_5UM  <code>module-attribute</code>","text":"<pre><code>CONF_PM_0_5UM = 'pm_0_5um'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PM_10_0","title":"CONF_PM_10_0  <code>module-attribute</code>","text":"<pre><code>CONF_PM_10_0 = 'pm_10_0'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PM_10_0UM","title":"CONF_PM_10_0UM  <code>module-attribute</code>","text":"<pre><code>CONF_PM_10_0UM = 'pm_10_0um'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PM_10_0_STD","title":"CONF_PM_10_0_STD  <code>module-attribute</code>","text":"<pre><code>CONF_PM_10_0_STD = 'pm_10_0_std'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PM_1_0","title":"CONF_PM_1_0  <code>module-attribute</code>","text":"<pre><code>CONF_PM_1_0 = 'pm_1_0'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PM_1_0UM","title":"CONF_PM_1_0UM  <code>module-attribute</code>","text":"<pre><code>CONF_PM_1_0UM = 'pm_1_0um'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PM_1_0_STD","title":"CONF_PM_1_0_STD  <code>module-attribute</code>","text":"<pre><code>CONF_PM_1_0_STD = 'pm_1_0_std'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PM_2_5","title":"CONF_PM_2_5  <code>module-attribute</code>","text":"<pre><code>CONF_PM_2_5 = 'pm_2_5'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PM_2_5UM","title":"CONF_PM_2_5UM  <code>module-attribute</code>","text":"<pre><code>CONF_PM_2_5UM = 'pm_2_5um'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PM_2_5_STD","title":"CONF_PM_2_5_STD  <code>module-attribute</code>","text":"<pre><code>CONF_PM_2_5_STD = 'pm_2_5_std'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PM_4_0","title":"CONF_PM_4_0  <code>module-attribute</code>","text":"<pre><code>CONF_PM_4_0 = 'pm_4_0'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PM_5_0UM","title":"CONF_PM_5_0UM  <code>module-attribute</code>","text":"<pre><code>CONF_PM_5_0UM = 'pm_5_0um'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PM_SIZE","title":"CONF_PM_SIZE  <code>module-attribute</code>","text":"<pre><code>CONF_PM_SIZE = 'pm_size'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PORT","title":"CONF_PORT  <code>module-attribute</code>","text":"<pre><code>CONF_PORT = 'port'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_POSITION","title":"CONF_POSITION  <code>module-attribute</code>","text":"<pre><code>CONF_POSITION = 'position'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_POSITION_ACTION","title":"CONF_POSITION_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_POSITION_ACTION = 'position_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_POSITION_COMMAND_TOPIC","title":"CONF_POSITION_COMMAND_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_POSITION_COMMAND_TOPIC = 'position_command_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_POSITION_STATE_TOPIC","title":"CONF_POSITION_STATE_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_POSITION_STATE_TOPIC = 'position_state_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_POWER","title":"CONF_POWER  <code>module-attribute</code>","text":"<pre><code>CONF_POWER = 'power'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_POWER_FACTOR","title":"CONF_POWER_FACTOR  <code>module-attribute</code>","text":"<pre><code>CONF_POWER_FACTOR = 'power_factor'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_POWER_ON_VALUE","title":"CONF_POWER_ON_VALUE  <code>module-attribute</code>","text":"<pre><code>CONF_POWER_ON_VALUE = 'power_on_value'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_POWER_SAVE_MODE","title":"CONF_POWER_SAVE_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_POWER_SAVE_MODE = 'power_save_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_POWER_SUPPLY","title":"CONF_POWER_SUPPLY  <code>module-attribute</code>","text":"<pre><code>CONF_POWER_SUPPLY = 'power_supply'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PRESET","title":"CONF_PRESET  <code>module-attribute</code>","text":"<pre><code>CONF_PRESET = 'preset'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PRESET_BOOST","title":"CONF_PRESET_BOOST  <code>module-attribute</code>","text":"<pre><code>CONF_PRESET_BOOST = 'preset_boost'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PRESET_COMMAND_TOPIC","title":"CONF_PRESET_COMMAND_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_PRESET_COMMAND_TOPIC = 'preset_command_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PRESET_ECO","title":"CONF_PRESET_ECO  <code>module-attribute</code>","text":"<pre><code>CONF_PRESET_ECO = 'preset_eco'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PRESET_MODES","title":"CONF_PRESET_MODES  <code>module-attribute</code>","text":"<pre><code>CONF_PRESET_MODES = 'preset_modes'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PRESET_SLEEP","title":"CONF_PRESET_SLEEP  <code>module-attribute</code>","text":"<pre><code>CONF_PRESET_SLEEP = 'preset_sleep'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PRESET_STATE_TOPIC","title":"CONF_PRESET_STATE_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_PRESET_STATE_TOPIC = 'preset_state_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PRESSURE","title":"CONF_PRESSURE  <code>module-attribute</code>","text":"<pre><code>CONF_PRESSURE = 'pressure'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PRIORITY","title":"CONF_PRIORITY  <code>module-attribute</code>","text":"<pre><code>CONF_PRIORITY = 'priority'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PROJECT","title":"CONF_PROJECT  <code>module-attribute</code>","text":"<pre><code>CONF_PROJECT = 'project'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PROTOCOL","title":"CONF_PROTOCOL  <code>module-attribute</code>","text":"<pre><code>CONF_PROTOCOL = 'protocol'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PUBLISH_INITIAL_STATE","title":"CONF_PUBLISH_INITIAL_STATE  <code>module-attribute</code>","text":"<pre><code>CONF_PUBLISH_INITIAL_STATE = 'publish_initial_state'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PULLDOWN","title":"CONF_PULLDOWN  <code>module-attribute</code>","text":"<pre><code>CONF_PULLDOWN = 'pulldown'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PULLUP","title":"CONF_PULLUP  <code>module-attribute</code>","text":"<pre><code>CONF_PULLUP = 'pullup'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PULL_MODE","title":"CONF_PULL_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_PULL_MODE = 'pull_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_PULSE_LENGTH","title":"CONF_PULSE_LENGTH  <code>module-attribute</code>","text":"<pre><code>CONF_PULSE_LENGTH = 'pulse_length'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_QOS","title":"CONF_QOS  <code>module-attribute</code>","text":"<pre><code>CONF_QOS = 'qos'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_QUANTILE","title":"CONF_QUANTILE  <code>module-attribute</code>","text":"<pre><code>CONF_QUANTILE = 'quantile'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RADON","title":"CONF_RADON  <code>module-attribute</code>","text":"<pre><code>CONF_RADON = 'radon'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RADON_LONG_TERM","title":"CONF_RADON_LONG_TERM  <code>module-attribute</code>","text":"<pre><code>CONF_RADON_LONG_TERM = 'radon_long_term'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RANDOM","title":"CONF_RANDOM  <code>module-attribute</code>","text":"<pre><code>CONF_RANDOM = 'random'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RANGE","title":"CONF_RANGE  <code>module-attribute</code>","text":"<pre><code>CONF_RANGE = 'range'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RANGE_FROM","title":"CONF_RANGE_FROM  <code>module-attribute</code>","text":"<pre><code>CONF_RANGE_FROM = 'range_from'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RANGE_TO","title":"CONF_RANGE_TO  <code>module-attribute</code>","text":"<pre><code>CONF_RANGE_TO = 'range_to'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RATE","title":"CONF_RATE  <code>module-attribute</code>","text":"<pre><code>CONF_RATE = 'rate'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RAW","title":"CONF_RAW  <code>module-attribute</code>","text":"<pre><code>CONF_RAW = 'raw'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RAW_DATA_ID","title":"CONF_RAW_DATA_ID  <code>module-attribute</code>","text":"<pre><code>CONF_RAW_DATA_ID = 'raw_data_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RC_CODE_1","title":"CONF_RC_CODE_1  <code>module-attribute</code>","text":"<pre><code>CONF_RC_CODE_1 = 'rc_code_1'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RC_CODE_2","title":"CONF_RC_CODE_2  <code>module-attribute</code>","text":"<pre><code>CONF_RC_CODE_2 = 'rc_code_2'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_REACTIVE_POWER","title":"CONF_REACTIVE_POWER  <code>module-attribute</code>","text":"<pre><code>CONF_REACTIVE_POWER = 'reactive_power'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_READ_PIN","title":"CONF_READ_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_READ_PIN = 'read_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_REBOOT_TIMEOUT","title":"CONF_REBOOT_TIMEOUT  <code>module-attribute</code>","text":"<pre><code>CONF_REBOOT_TIMEOUT = 'reboot_timeout'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RECEIVE_TIMEOUT","title":"CONF_RECEIVE_TIMEOUT  <code>module-attribute</code>","text":"<pre><code>CONF_RECEIVE_TIMEOUT = 'receive_timeout'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RED","title":"CONF_RED  <code>module-attribute</code>","text":"<pre><code>CONF_RED = 'red'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_REF","title":"CONF_REF  <code>module-attribute</code>","text":"<pre><code>CONF_REF = 'ref'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_REFERENCE_RESISTANCE","title":"CONF_REFERENCE_RESISTANCE  <code>module-attribute</code>","text":"<pre><code>CONF_REFERENCE_RESISTANCE = 'reference_resistance'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_REFERENCE_TEMPERATURE","title":"CONF_REFERENCE_TEMPERATURE  <code>module-attribute</code>","text":"<pre><code>CONF_REFERENCE_TEMPERATURE = 'reference_temperature'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_REFRESH","title":"CONF_REFRESH  <code>module-attribute</code>","text":"<pre><code>CONF_REFRESH = 'refresh'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RELABEL","title":"CONF_RELABEL  <code>module-attribute</code>","text":"<pre><code>CONF_RELABEL = 'relabel'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_REPEAT","title":"CONF_REPEAT  <code>module-attribute</code>","text":"<pre><code>CONF_REPEAT = 'repeat'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_REPOSITORY","title":"CONF_REPOSITORY  <code>module-attribute</code>","text":"<pre><code>CONF_REPOSITORY = 'repository'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RESET_DURATION","title":"CONF_RESET_DURATION  <code>module-attribute</code>","text":"<pre><code>CONF_RESET_DURATION = 'reset_duration'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RESET_PIN","title":"CONF_RESET_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_RESET_PIN = 'reset_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RESIZE","title":"CONF_RESIZE  <code>module-attribute</code>","text":"<pre><code>CONF_RESIZE = 'resize'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RESOLUTION","title":"CONF_RESOLUTION  <code>module-attribute</code>","text":"<pre><code>CONF_RESOLUTION = 'resolution'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RESTORE","title":"CONF_RESTORE  <code>module-attribute</code>","text":"<pre><code>CONF_RESTORE = 'restore'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RESTORE_MODE","title":"CONF_RESTORE_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_RESTORE_MODE = 'restore_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RESTORE_STATE","title":"CONF_RESTORE_STATE  <code>module-attribute</code>","text":"<pre><code>CONF_RESTORE_STATE = 'restore_state'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RESTORE_VALUE","title":"CONF_RESTORE_VALUE  <code>module-attribute</code>","text":"<pre><code>CONF_RESTORE_VALUE = 'restore_value'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RETAIN","title":"CONF_RETAIN  <code>module-attribute</code>","text":"<pre><code>CONF_RETAIN = 'retain'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_REVERSED","title":"CONF_REVERSED  <code>module-attribute</code>","text":"<pre><code>CONF_REVERSED = 'reversed'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_REVERSE_ACTIVE_ENERGY","title":"CONF_REVERSE_ACTIVE_ENERGY  <code>module-attribute</code>","text":"<pre><code>CONF_REVERSE_ACTIVE_ENERGY = 'reverse_active_energy'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RGBW","title":"CONF_RGBW  <code>module-attribute</code>","text":"<pre><code>CONF_RGBW = 'rgbw'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RGB_ORDER","title":"CONF_RGB_ORDER  <code>module-attribute</code>","text":"<pre><code>CONF_RGB_ORDER = 'rgb_order'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RISING_EDGE","title":"CONF_RISING_EDGE  <code>module-attribute</code>","text":"<pre><code>CONF_RISING_EDGE = 'rising_edge'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ROTATION","title":"CONF_ROTATION  <code>module-attribute</code>","text":"<pre><code>CONF_ROTATION = 'rotation'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RS_PIN","title":"CONF_RS_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_RS_PIN = 'rs_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RTD_NOMINAL_RESISTANCE","title":"CONF_RTD_NOMINAL_RESISTANCE  <code>module-attribute</code>","text":"<pre><code>CONF_RTD_NOMINAL_RESISTANCE = 'rtd_nominal_resistance'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RTD_WIRES","title":"CONF_RTD_WIRES  <code>module-attribute</code>","text":"<pre><code>CONF_RTD_WIRES = 'rtd_wires'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RUN_DURATION","title":"CONF_RUN_DURATION  <code>module-attribute</code>","text":"<pre><code>CONF_RUN_DURATION = 'run_duration'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RW_PIN","title":"CONF_RW_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_RW_PIN = 'rw_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RX_BUFFER_SIZE","title":"CONF_RX_BUFFER_SIZE  <code>module-attribute</code>","text":"<pre><code>CONF_RX_BUFFER_SIZE = 'rx_buffer_size'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RX_ONLY","title":"CONF_RX_ONLY  <code>module-attribute</code>","text":"<pre><code>CONF_RX_ONLY = 'rx_only'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_RX_PIN","title":"CONF_RX_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_RX_PIN = 'rx_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SAFE_MODE","title":"CONF_SAFE_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_SAFE_MODE = 'safe_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SAMSUNG","title":"CONF_SAMSUNG  <code>module-attribute</code>","text":"<pre><code>CONF_SAMSUNG = 'samsung'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SATELLITES","title":"CONF_SATELLITES  <code>module-attribute</code>","text":"<pre><code>CONF_SATELLITES = 'satellites'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SCAN","title":"CONF_SCAN  <code>module-attribute</code>","text":"<pre><code>CONF_SCAN = 'scan'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SCAN_RESULTS","title":"CONF_SCAN_RESULTS  <code>module-attribute</code>","text":"<pre><code>CONF_SCAN_RESULTS = 'scan_results'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SCL","title":"CONF_SCL  <code>module-attribute</code>","text":"<pre><code>CONF_SCL = 'scl'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SCL_PIN","title":"CONF_SCL_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_SCL_PIN = 'scl_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SDA","title":"CONF_SDA  <code>module-attribute</code>","text":"<pre><code>CONF_SDA = 'sda'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SDO_PIN","title":"CONF_SDO_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_SDO_PIN = 'sdo_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SECOND","title":"CONF_SECOND  <code>module-attribute</code>","text":"<pre><code>CONF_SECOND = 'second'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SECONDS","title":"CONF_SECONDS  <code>module-attribute</code>","text":"<pre><code>CONF_SECONDS = 'seconds'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SECURITY_LEVEL","title":"CONF_SECURITY_LEVEL  <code>module-attribute</code>","text":"<pre><code>CONF_SECURITY_LEVEL = 'security_level'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SEGMENTS","title":"CONF_SEGMENTS  <code>module-attribute</code>","text":"<pre><code>CONF_SEGMENTS = 'segments'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SEL_PIN","title":"CONF_SEL_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_SEL_PIN = 'sel_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SEND_EVERY","title":"CONF_SEND_EVERY  <code>module-attribute</code>","text":"<pre><code>CONF_SEND_EVERY = 'send_every'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SEND_FIRST_AT","title":"CONF_SEND_FIRST_AT  <code>module-attribute</code>","text":"<pre><code>CONF_SEND_FIRST_AT = 'send_first_at'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SENSING_PIN","title":"CONF_SENSING_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_SENSING_PIN = 'sensing_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SENSOR","title":"CONF_SENSOR  <code>module-attribute</code>","text":"<pre><code>CONF_SENSOR = 'sensor'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SENSORS","title":"CONF_SENSORS  <code>module-attribute</code>","text":"<pre><code>CONF_SENSORS = 'sensors'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SENSOR_DATAPOINT","title":"CONF_SENSOR_DATAPOINT  <code>module-attribute</code>","text":"<pre><code>CONF_SENSOR_DATAPOINT = 'sensor_datapoint'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SENSOR_ID","title":"CONF_SENSOR_ID  <code>module-attribute</code>","text":"<pre><code>CONF_SENSOR_ID = 'sensor_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SEQUENCE","title":"CONF_SEQUENCE  <code>module-attribute</code>","text":"<pre><code>CONF_SEQUENCE = 'sequence'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SERVERS","title":"CONF_SERVERS  <code>module-attribute</code>","text":"<pre><code>CONF_SERVERS = 'servers'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SERVICE","title":"CONF_SERVICE  <code>module-attribute</code>","text":"<pre><code>CONF_SERVICE = 'service'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SERVICES","title":"CONF_SERVICES  <code>module-attribute</code>","text":"<pre><code>CONF_SERVICES = 'services'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SERVICE_UUID","title":"CONF_SERVICE_UUID  <code>module-attribute</code>","text":"<pre><code>CONF_SERVICE_UUID = 'service_uuid'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SETUP_MODE","title":"CONF_SETUP_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_SETUP_MODE = 'setup_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SETUP_PRIORITY","title":"CONF_SETUP_PRIORITY  <code>module-attribute</code>","text":"<pre><code>CONF_SETUP_PRIORITY = 'setup_priority'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SET_ACTION","title":"CONF_SET_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_SET_ACTION = 'set_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SET_POINT_MINIMUM_DIFFERENTIAL","title":"CONF_SET_POINT_MINIMUM_DIFFERENTIAL  <code>module-attribute</code>","text":"<pre><code>CONF_SET_POINT_MINIMUM_DIFFERENTIAL = (\n    \"set_point_minimum_differential\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SHOW_LINES","title":"CONF_SHOW_LINES  <code>module-attribute</code>","text":"<pre><code>CONF_SHOW_LINES = 'show_lines'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SHOW_UNITS","title":"CONF_SHOW_UNITS  <code>module-attribute</code>","text":"<pre><code>CONF_SHOW_UNITS = 'show_units'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SHOW_VALUES","title":"CONF_SHOW_VALUES  <code>module-attribute</code>","text":"<pre><code>CONF_SHOW_VALUES = 'show_values'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SHUNT_RESISTANCE","title":"CONF_SHUNT_RESISTANCE  <code>module-attribute</code>","text":"<pre><code>CONF_SHUNT_RESISTANCE = 'shunt_resistance'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SHUNT_VOLTAGE","title":"CONF_SHUNT_VOLTAGE  <code>module-attribute</code>","text":"<pre><code>CONF_SHUNT_VOLTAGE = 'shunt_voltage'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SHUTDOWN_MESSAGE","title":"CONF_SHUTDOWN_MESSAGE  <code>module-attribute</code>","text":"<pre><code>CONF_SHUTDOWN_MESSAGE = 'shutdown_message'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SIGNAL_STRENGTH","title":"CONF_SIGNAL_STRENGTH  <code>module-attribute</code>","text":"<pre><code>CONF_SIGNAL_STRENGTH = 'signal_strength'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SINGLE_LIGHT_ID","title":"CONF_SINGLE_LIGHT_ID  <code>module-attribute</code>","text":"<pre><code>CONF_SINGLE_LIGHT_ID = 'single_light_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SIZE","title":"CONF_SIZE  <code>module-attribute</code>","text":"<pre><code>CONF_SIZE = 'size'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SLEEP_DURATION","title":"CONF_SLEEP_DURATION  <code>module-attribute</code>","text":"<pre><code>CONF_SLEEP_DURATION = 'sleep_duration'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SLEEP_PIN","title":"CONF_SLEEP_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_SLEEP_PIN = 'sleep_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SLEEP_WHEN_DONE","title":"CONF_SLEEP_WHEN_DONE  <code>module-attribute</code>","text":"<pre><code>CONF_SLEEP_WHEN_DONE = 'sleep_when_done'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SONY","title":"CONF_SONY  <code>module-attribute</code>","text":"<pre><code>CONF_SONY = 'sony'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SOURCE","title":"CONF_SOURCE  <code>module-attribute</code>","text":"<pre><code>CONF_SOURCE = 'source'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SOURCE_ID","title":"CONF_SOURCE_ID  <code>module-attribute</code>","text":"<pre><code>CONF_SOURCE_ID = 'source_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SPEAKER","title":"CONF_SPEAKER  <code>module-attribute</code>","text":"<pre><code>CONF_SPEAKER = 'speaker'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SPEED","title":"CONF_SPEED  <code>module-attribute</code>","text":"<pre><code>CONF_SPEED = 'speed'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SPEED_COMMAND_TOPIC","title":"CONF_SPEED_COMMAND_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_SPEED_COMMAND_TOPIC = 'speed_command_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SPEED_COUNT","title":"CONF_SPEED_COUNT  <code>module-attribute</code>","text":"<pre><code>CONF_SPEED_COUNT = 'speed_count'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SPEED_LEVEL_COMMAND_TOPIC","title":"CONF_SPEED_LEVEL_COMMAND_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_SPEED_LEVEL_COMMAND_TOPIC = \"speed_level_command_topic\"\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SPEED_LEVEL_STATE_TOPIC","title":"CONF_SPEED_LEVEL_STATE_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_SPEED_LEVEL_STATE_TOPIC = 'speed_level_state_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SPEED_STATE_TOPIC","title":"CONF_SPEED_STATE_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_SPEED_STATE_TOPIC = 'speed_state_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SPIKE_REJECTION","title":"CONF_SPIKE_REJECTION  <code>module-attribute</code>","text":"<pre><code>CONF_SPIKE_REJECTION = 'spike_rejection'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SPI_ID","title":"CONF_SPI_ID  <code>module-attribute</code>","text":"<pre><code>CONF_SPI_ID = 'spi_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SSID","title":"CONF_SSID  <code>module-attribute</code>","text":"<pre><code>CONF_SSID = 'ssid'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SSL_FINGERPRINTS","title":"CONF_SSL_FINGERPRINTS  <code>module-attribute</code>","text":"<pre><code>CONF_SSL_FINGERPRINTS = 'ssl_fingerprints'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_STARTUP_DELAY","title":"CONF_STARTUP_DELAY  <code>module-attribute</code>","text":"<pre><code>CONF_STARTUP_DELAY = 'startup_delay'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_STATE","title":"CONF_STATE  <code>module-attribute</code>","text":"<pre><code>CONF_STATE = 'state'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_STATE_CLASS","title":"CONF_STATE_CLASS  <code>module-attribute</code>","text":"<pre><code>CONF_STATE_CLASS = 'state_class'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_STATE_TOPIC","title":"CONF_STATE_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_STATE_TOPIC = 'state_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_STATIC_IP","title":"CONF_STATIC_IP  <code>module-attribute</code>","text":"<pre><code>CONF_STATIC_IP = 'static_ip'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_STATUS","title":"CONF_STATUS  <code>module-attribute</code>","text":"<pre><code>CONF_STATUS = 'status'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_STB_PIN","title":"CONF_STB_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_STB_PIN = 'stb_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_STEP","title":"CONF_STEP  <code>module-attribute</code>","text":"<pre><code>CONF_STEP = 'step'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_STEP_MODE","title":"CONF_STEP_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_STEP_MODE = 'step_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_STEP_PIN","title":"CONF_STEP_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_STEP_PIN = 'step_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_STOP","title":"CONF_STOP  <code>module-attribute</code>","text":"<pre><code>CONF_STOP = 'stop'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_STOP_ACTION","title":"CONF_STOP_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_STOP_ACTION = 'stop_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_STORE_BASELINE","title":"CONF_STORE_BASELINE  <code>module-attribute</code>","text":"<pre><code>CONF_STORE_BASELINE = 'store_baseline'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SUBNET","title":"CONF_SUBNET  <code>module-attribute</code>","text":"<pre><code>CONF_SUBNET = 'subnet'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SUBSTITUTIONS","title":"CONF_SUBSTITUTIONS  <code>module-attribute</code>","text":"<pre><code>CONF_SUBSTITUTIONS = 'substitutions'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SUM","title":"CONF_SUM  <code>module-attribute</code>","text":"<pre><code>CONF_SUM = 'sum'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SUPPLEMENTAL_COOLING_ACTION","title":"CONF_SUPPLEMENTAL_COOLING_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_SUPPLEMENTAL_COOLING_ACTION = (\n    \"supplemental_cooling_action\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SUPPLEMENTAL_COOLING_DELTA","title":"CONF_SUPPLEMENTAL_COOLING_DELTA  <code>module-attribute</code>","text":"<pre><code>CONF_SUPPLEMENTAL_COOLING_DELTA = (\n    \"supplemental_cooling_delta\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SUPPLEMENTAL_HEATING_ACTION","title":"CONF_SUPPLEMENTAL_HEATING_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_SUPPLEMENTAL_HEATING_ACTION = (\n    \"supplemental_heating_action\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SUPPLEMENTAL_HEATING_DELTA","title":"CONF_SUPPLEMENTAL_HEATING_DELTA  <code>module-attribute</code>","text":"<pre><code>CONF_SUPPLEMENTAL_HEATING_DELTA = (\n    \"supplemental_heating_delta\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SUPPORTED_FAN_MODES","title":"CONF_SUPPORTED_FAN_MODES  <code>module-attribute</code>","text":"<pre><code>CONF_SUPPORTED_FAN_MODES = 'supported_fan_modes'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SUPPORTED_MODES","title":"CONF_SUPPORTED_MODES  <code>module-attribute</code>","text":"<pre><code>CONF_SUPPORTED_MODES = 'supported_modes'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SUPPORTED_PRESETS","title":"CONF_SUPPORTED_PRESETS  <code>module-attribute</code>","text":"<pre><code>CONF_SUPPORTED_PRESETS = 'supported_presets'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SUPPORTED_SWING_MODES","title":"CONF_SUPPORTED_SWING_MODES  <code>module-attribute</code>","text":"<pre><code>CONF_SUPPORTED_SWING_MODES = 'supported_swing_modes'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SUPPORTS_COOL","title":"CONF_SUPPORTS_COOL  <code>module-attribute</code>","text":"<pre><code>CONF_SUPPORTS_COOL = 'supports_cool'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SUPPORTS_HEAT","title":"CONF_SUPPORTS_HEAT  <code>module-attribute</code>","text":"<pre><code>CONF_SUPPORTS_HEAT = 'supports_heat'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SWAP_XY","title":"CONF_SWAP_XY  <code>module-attribute</code>","text":"<pre><code>CONF_SWAP_XY = 'swap_xy'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SWING_BOTH_ACTION","title":"CONF_SWING_BOTH_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_SWING_BOTH_ACTION = 'swing_both_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SWING_HORIZONTAL_ACTION","title":"CONF_SWING_HORIZONTAL_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_SWING_HORIZONTAL_ACTION = 'swing_horizontal_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SWING_MODE","title":"CONF_SWING_MODE  <code>module-attribute</code>","text":"<pre><code>CONF_SWING_MODE = 'swing_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SWING_MODE_COMMAND_TOPIC","title":"CONF_SWING_MODE_COMMAND_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_SWING_MODE_COMMAND_TOPIC = 'swing_mode_command_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SWING_MODE_STATE_TOPIC","title":"CONF_SWING_MODE_STATE_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_SWING_MODE_STATE_TOPIC = 'swing_mode_state_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SWING_OFF_ACTION","title":"CONF_SWING_OFF_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_SWING_OFF_ACTION = 'swing_off_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SWING_VERTICAL_ACTION","title":"CONF_SWING_VERTICAL_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_SWING_VERTICAL_ACTION = 'swing_vertical_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SWITCHES","title":"CONF_SWITCHES  <code>module-attribute</code>","text":"<pre><code>CONF_SWITCHES = 'switches'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SWITCH_DATAPOINT","title":"CONF_SWITCH_DATAPOINT  <code>module-attribute</code>","text":"<pre><code>CONF_SWITCH_DATAPOINT = 'switch_datapoint'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_SYNC","title":"CONF_SYNC  <code>module-attribute</code>","text":"<pre><code>CONF_SYNC = 'sync'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TABLET","title":"CONF_TABLET  <code>module-attribute</code>","text":"<pre><code>CONF_TABLET = 'tablet'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TAG","title":"CONF_TAG  <code>module-attribute</code>","text":"<pre><code>CONF_TAG = 'tag'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TARGET","title":"CONF_TARGET  <code>module-attribute</code>","text":"<pre><code>CONF_TARGET = 'target'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TARGET_HUMIDITY_COMMAND_TOPIC","title":"CONF_TARGET_HUMIDITY_COMMAND_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_TARGET_HUMIDITY_COMMAND_TOPIC = (\n    \"target_humidity_command_topic\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TARGET_HUMIDITY_STATE_TOPIC","title":"CONF_TARGET_HUMIDITY_STATE_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_TARGET_HUMIDITY_STATE_TOPIC = (\n    \"target_humidity_state_topic\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TARGET_TEMPERATURE","title":"CONF_TARGET_TEMPERATURE  <code>module-attribute</code>","text":"<pre><code>CONF_TARGET_TEMPERATURE = 'target_temperature'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TARGET_TEMPERATURE_CHANGE_ACTION","title":"CONF_TARGET_TEMPERATURE_CHANGE_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_TARGET_TEMPERATURE_CHANGE_ACTION = (\n    \"target_temperature_change_action\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TARGET_TEMPERATURE_COMMAND_TOPIC","title":"CONF_TARGET_TEMPERATURE_COMMAND_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_TARGET_TEMPERATURE_COMMAND_TOPIC = (\n    \"target_temperature_command_topic\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TARGET_TEMPERATURE_HIGH","title":"CONF_TARGET_TEMPERATURE_HIGH  <code>module-attribute</code>","text":"<pre><code>CONF_TARGET_TEMPERATURE_HIGH = 'target_temperature_high'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TARGET_TEMPERATURE_HIGH_COMMAND_TOPIC","title":"CONF_TARGET_TEMPERATURE_HIGH_COMMAND_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_TARGET_TEMPERATURE_HIGH_COMMAND_TOPIC = (\n    \"target_temperature_high_command_topic\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TARGET_TEMPERATURE_HIGH_STATE_TOPIC","title":"CONF_TARGET_TEMPERATURE_HIGH_STATE_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_TARGET_TEMPERATURE_HIGH_STATE_TOPIC = (\n    \"target_temperature_high_state_topic\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TARGET_TEMPERATURE_LOW","title":"CONF_TARGET_TEMPERATURE_LOW  <code>module-attribute</code>","text":"<pre><code>CONF_TARGET_TEMPERATURE_LOW = 'target_temperature_low'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TARGET_TEMPERATURE_LOW_COMMAND_TOPIC","title":"CONF_TARGET_TEMPERATURE_LOW_COMMAND_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_TARGET_TEMPERATURE_LOW_COMMAND_TOPIC = (\n    \"target_temperature_low_command_topic\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TARGET_TEMPERATURE_LOW_STATE_TOPIC","title":"CONF_TARGET_TEMPERATURE_LOW_STATE_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_TARGET_TEMPERATURE_LOW_STATE_TOPIC = (\n    \"target_temperature_low_state_topic\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TARGET_TEMPERATURE_STATE_TOPIC","title":"CONF_TARGET_TEMPERATURE_STATE_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_TARGET_TEMPERATURE_STATE_TOPIC = (\n    \"target_temperature_state_topic\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TEMPERATURE","title":"CONF_TEMPERATURE  <code>module-attribute</code>","text":"<pre><code>CONF_TEMPERATURE = 'temperature'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TEMPERATURE_SOURCE","title":"CONF_TEMPERATURE_SOURCE  <code>module-attribute</code>","text":"<pre><code>CONF_TEMPERATURE_SOURCE = 'temperature_source'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TEMPERATURE_STEP","title":"CONF_TEMPERATURE_STEP  <code>module-attribute</code>","text":"<pre><code>CONF_TEMPERATURE_STEP = 'temperature_step'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TEXT_SENSORS","title":"CONF_TEXT_SENSORS  <code>module-attribute</code>","text":"<pre><code>CONF_TEXT_SENSORS = 'text_sensors'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_THEN","title":"CONF_THEN  <code>module-attribute</code>","text":"<pre><code>CONF_THEN = 'then'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_THRESHOLD","title":"CONF_THRESHOLD  <code>module-attribute</code>","text":"<pre><code>CONF_THRESHOLD = 'threshold'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_THROTTLE","title":"CONF_THROTTLE  <code>module-attribute</code>","text":"<pre><code>CONF_THROTTLE = 'throttle'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TILT","title":"CONF_TILT  <code>module-attribute</code>","text":"<pre><code>CONF_TILT = 'tilt'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TILT_ACTION","title":"CONF_TILT_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_TILT_ACTION = 'tilt_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TILT_COMMAND_TOPIC","title":"CONF_TILT_COMMAND_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_TILT_COMMAND_TOPIC = 'tilt_command_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TILT_LAMBDA","title":"CONF_TILT_LAMBDA  <code>module-attribute</code>","text":"<pre><code>CONF_TILT_LAMBDA = 'tilt_lambda'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TILT_STATE_TOPIC","title":"CONF_TILT_STATE_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_TILT_STATE_TOPIC = 'tilt_state_topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TIME","title":"CONF_TIME  <code>module-attribute</code>","text":"<pre><code>CONF_TIME = 'time'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TIMEOUT","title":"CONF_TIMEOUT  <code>module-attribute</code>","text":"<pre><code>CONF_TIMEOUT = 'timeout'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TIMES","title":"CONF_TIMES  <code>module-attribute</code>","text":"<pre><code>CONF_TIMES = 'times'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TIMEZONE","title":"CONF_TIMEZONE  <code>module-attribute</code>","text":"<pre><code>CONF_TIMEZONE = 'timezone'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TIME_ID","title":"CONF_TIME_ID  <code>module-attribute</code>","text":"<pre><code>CONF_TIME_ID = 'time_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TIMING","title":"CONF_TIMING  <code>module-attribute</code>","text":"<pre><code>CONF_TIMING = 'timing'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TO","title":"CONF_TO  <code>module-attribute</code>","text":"<pre><code>CONF_TO = 'to'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TOLERANCE","title":"CONF_TOLERANCE  <code>module-attribute</code>","text":"<pre><code>CONF_TOLERANCE = 'tolerance'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TOPIC","title":"CONF_TOPIC  <code>module-attribute</code>","text":"<pre><code>CONF_TOPIC = 'topic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TOPIC_PREFIX","title":"CONF_TOPIC_PREFIX  <code>module-attribute</code>","text":"<pre><code>CONF_TOPIC_PREFIX = 'topic_prefix'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TOTAL","title":"CONF_TOTAL  <code>module-attribute</code>","text":"<pre><code>CONF_TOTAL = 'total'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TOTAL_POWER","title":"CONF_TOTAL_POWER  <code>module-attribute</code>","text":"<pre><code>CONF_TOTAL_POWER = 'total_power'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TRACES","title":"CONF_TRACES  <code>module-attribute</code>","text":"<pre><code>CONF_TRACES = 'traces'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TRANSFORM","title":"CONF_TRANSFORM  <code>module-attribute</code>","text":"<pre><code>CONF_TRANSFORM = 'transform'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TRANSITION_LENGTH","title":"CONF_TRANSITION_LENGTH  <code>module-attribute</code>","text":"<pre><code>CONF_TRANSITION_LENGTH = 'transition_length'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TRIGGER_ID","title":"CONF_TRIGGER_ID  <code>module-attribute</code>","text":"<pre><code>CONF_TRIGGER_ID = 'trigger_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TRIGGER_PIN","title":"CONF_TRIGGER_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_TRIGGER_PIN = 'trigger_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TUNE_ANTENNA","title":"CONF_TUNE_ANTENNA  <code>module-attribute</code>","text":"<pre><code>CONF_TUNE_ANTENNA = 'tune_antenna'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TURN_OFF_ACTION","title":"CONF_TURN_OFF_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_TURN_OFF_ACTION = 'turn_off_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TURN_ON_ACTION","title":"CONF_TURN_ON_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_TURN_ON_ACTION = 'turn_on_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TVOC","title":"CONF_TVOC  <code>module-attribute</code>","text":"<pre><code>CONF_TVOC = 'tvoc'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TX_BUFFER_SIZE","title":"CONF_TX_BUFFER_SIZE  <code>module-attribute</code>","text":"<pre><code>CONF_TX_BUFFER_SIZE = 'tx_buffer_size'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TX_PIN","title":"CONF_TX_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_TX_PIN = 'tx_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TX_POWER","title":"CONF_TX_POWER  <code>module-attribute</code>","text":"<pre><code>CONF_TX_POWER = 'tx_power'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TYPE","title":"CONF_TYPE  <code>module-attribute</code>","text":"<pre><code>CONF_TYPE = 'type'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_TYPE_ID","title":"CONF_TYPE_ID  <code>module-attribute</code>","text":"<pre><code>CONF_TYPE_ID = 'type_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_UART_ID","title":"CONF_UART_ID  <code>module-attribute</code>","text":"<pre><code>CONF_UART_ID = 'uart_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_UD_PIN","title":"CONF_UD_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_UD_PIN = 'ud_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_UID","title":"CONF_UID  <code>module-attribute</code>","text":"<pre><code>CONF_UID = 'uid'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_UNIQUE","title":"CONF_UNIQUE  <code>module-attribute</code>","text":"<pre><code>CONF_UNIQUE = 'unique'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_UNIT_OF_MEASUREMENT","title":"CONF_UNIT_OF_MEASUREMENT  <code>module-attribute</code>","text":"<pre><code>CONF_UNIT_OF_MEASUREMENT = 'unit_of_measurement'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_UNLOCK_ACTION","title":"CONF_UNLOCK_ACTION  <code>module-attribute</code>","text":"<pre><code>CONF_UNLOCK_ACTION = 'unlock_action'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_UPDATE_INTERVAL","title":"CONF_UPDATE_INTERVAL  <code>module-attribute</code>","text":"<pre><code>CONF_UPDATE_INTERVAL = 'update_interval'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_UPDATE_ON_BOOT","title":"CONF_UPDATE_ON_BOOT  <code>module-attribute</code>","text":"<pre><code>CONF_UPDATE_ON_BOOT = 'update_on_boot'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_URL","title":"CONF_URL  <code>module-attribute</code>","text":"<pre><code>CONF_URL = 'url'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_USERNAME","title":"CONF_USERNAME  <code>module-attribute</code>","text":"<pre><code>CONF_USERNAME = 'username'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_USE_ABBREVIATIONS","title":"CONF_USE_ABBREVIATIONS  <code>module-attribute</code>","text":"<pre><code>CONF_USE_ABBREVIATIONS = 'use_abbreviations'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_USE_ADDRESS","title":"CONF_USE_ADDRESS  <code>module-attribute</code>","text":"<pre><code>CONF_USE_ADDRESS = 'use_address'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_UUID","title":"CONF_UUID  <code>module-attribute</code>","text":"<pre><code>CONF_UUID = 'uuid'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_VALIDITY_PERIOD","title":"CONF_VALIDITY_PERIOD  <code>module-attribute</code>","text":"<pre><code>CONF_VALIDITY_PERIOD = 'validity_period'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_VALUE","title":"CONF_VALUE  <code>module-attribute</code>","text":"<pre><code>CONF_VALUE = 'value'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_VALUE_FONT","title":"CONF_VALUE_FONT  <code>module-attribute</code>","text":"<pre><code>CONF_VALUE_FONT = 'value_font'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_VARIABLES","title":"CONF_VARIABLES  <code>module-attribute</code>","text":"<pre><code>CONF_VARIABLES = 'variables'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_VARIANT","title":"CONF_VARIANT  <code>module-attribute</code>","text":"<pre><code>CONF_VARIANT = 'variant'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_VERSION","title":"CONF_VERSION  <code>module-attribute</code>","text":"<pre><code>CONF_VERSION = 'version'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_VISIBLE","title":"CONF_VISIBLE  <code>module-attribute</code>","text":"<pre><code>CONF_VISIBLE = 'visible'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_VISUAL","title":"CONF_VISUAL  <code>module-attribute</code>","text":"<pre><code>CONF_VISUAL = 'visual'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_VOLTAGE","title":"CONF_VOLTAGE  <code>module-attribute</code>","text":"<pre><code>CONF_VOLTAGE = 'voltage'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_VOLTAGE_ATTENUATION","title":"CONF_VOLTAGE_ATTENUATION  <code>module-attribute</code>","text":"<pre><code>CONF_VOLTAGE_ATTENUATION = 'voltage_attenuation'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_VOLTAGE_DIVIDER","title":"CONF_VOLTAGE_DIVIDER  <code>module-attribute</code>","text":"<pre><code>CONF_VOLTAGE_DIVIDER = 'voltage_divider'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_WAIT_TIME","title":"CONF_WAIT_TIME  <code>module-attribute</code>","text":"<pre><code>CONF_WAIT_TIME = 'wait_time'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_WAIT_UNTIL","title":"CONF_WAIT_UNTIL  <code>module-attribute</code>","text":"<pre><code>CONF_WAIT_UNTIL = 'wait_until'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_WAKEUP_PIN","title":"CONF_WAKEUP_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_WAKEUP_PIN = 'wakeup_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_WAND_ID","title":"CONF_WAND_ID  <code>module-attribute</code>","text":"<pre><code>CONF_WAND_ID = 'wand_id'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_WARM_WHITE","title":"CONF_WARM_WHITE  <code>module-attribute</code>","text":"<pre><code>CONF_WARM_WHITE = 'warm_white'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_WARM_WHITE_COLOR_TEMPERATURE","title":"CONF_WARM_WHITE_COLOR_TEMPERATURE  <code>module-attribute</code>","text":"<pre><code>CONF_WARM_WHITE_COLOR_TEMPERATURE = (\n    \"warm_white_color_temperature\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_WATCHDOG_THRESHOLD","title":"CONF_WATCHDOG_THRESHOLD  <code>module-attribute</code>","text":"<pre><code>CONF_WATCHDOG_THRESHOLD = 'watchdog_threshold'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_WEB_SERVER","title":"CONF_WEB_SERVER  <code>module-attribute</code>","text":"<pre><code>CONF_WEB_SERVER = 'web_server'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_WEIGHT","title":"CONF_WEIGHT  <code>module-attribute</code>","text":"<pre><code>CONF_WEIGHT = 'weight'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_WHILE","title":"CONF_WHILE  <code>module-attribute</code>","text":"<pre><code>CONF_WHILE = 'while'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_WHITE","title":"CONF_WHITE  <code>module-attribute</code>","text":"<pre><code>CONF_WHITE = 'white'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_WIDTH","title":"CONF_WIDTH  <code>module-attribute</code>","text":"<pre><code>CONF_WIDTH = 'width'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_WIFI","title":"CONF_WIFI  <code>module-attribute</code>","text":"<pre><code>CONF_WIFI = 'wifi'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_WILL_MESSAGE","title":"CONF_WILL_MESSAGE  <code>module-attribute</code>","text":"<pre><code>CONF_WILL_MESSAGE = 'will_message'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_WINDOW_SIZE","title":"CONF_WINDOW_SIZE  <code>module-attribute</code>","text":"<pre><code>CONF_WINDOW_SIZE = 'window_size'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_WIND_DIRECTION_DEGREES","title":"CONF_WIND_DIRECTION_DEGREES  <code>module-attribute</code>","text":"<pre><code>CONF_WIND_DIRECTION_DEGREES = 'wind_direction_degrees'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_WIND_SPEED","title":"CONF_WIND_SPEED  <code>module-attribute</code>","text":"<pre><code>CONF_WIND_SPEED = 'wind_speed'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_WRITE_PIN","title":"CONF_WRITE_PIN  <code>module-attribute</code>","text":"<pre><code>CONF_WRITE_PIN = 'write_pin'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_X_GRID","title":"CONF_X_GRID  <code>module-attribute</code>","text":"<pre><code>CONF_X_GRID = 'x_grid'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_Y_GRID","title":"CONF_Y_GRID  <code>module-attribute</code>","text":"<pre><code>CONF_Y_GRID = 'y_grid'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.CONF_ZERO","title":"CONF_ZERO  <code>module-attribute</code>","text":"<pre><code>CONF_ZERO = 'zero'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_APPARENT_POWER","title":"DEVICE_CLASS_APPARENT_POWER  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_APPARENT_POWER = 'apparent_power'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_AQI","title":"DEVICE_CLASS_AQI  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_AQI = 'aqi'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_ATMOSPHERIC_PRESSURE","title":"DEVICE_CLASS_ATMOSPHERIC_PRESSURE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_ATMOSPHERIC_PRESSURE = 'atmospheric_pressure'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_AWNING","title":"DEVICE_CLASS_AWNING  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_AWNING = 'awning'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_BATTERY","title":"DEVICE_CLASS_BATTERY  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_BATTERY = 'battery'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_BATTERY_CHARGING","title":"DEVICE_CLASS_BATTERY_CHARGING  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_BATTERY_CHARGING = 'battery_charging'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_BLIND","title":"DEVICE_CLASS_BLIND  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_BLIND = 'blind'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_CARBON_DIOXIDE","title":"DEVICE_CLASS_CARBON_DIOXIDE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_CARBON_DIOXIDE = 'carbon_dioxide'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_CARBON_MONOXIDE","title":"DEVICE_CLASS_CARBON_MONOXIDE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_CARBON_MONOXIDE = 'carbon_monoxide'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_COLD","title":"DEVICE_CLASS_COLD  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_COLD = 'cold'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_CONNECTIVITY","title":"DEVICE_CLASS_CONNECTIVITY  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_CONNECTIVITY = 'connectivity'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_CURRENT","title":"DEVICE_CLASS_CURRENT  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_CURRENT = 'current'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_CURTAIN","title":"DEVICE_CLASS_CURTAIN  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_CURTAIN = 'curtain'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_DAMPER","title":"DEVICE_CLASS_DAMPER  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_DAMPER = 'damper'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_DATA_RATE","title":"DEVICE_CLASS_DATA_RATE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_DATA_RATE = 'data_rate'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_DATA_SIZE","title":"DEVICE_CLASS_DATA_SIZE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_DATA_SIZE = 'data_size'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_DATE","title":"DEVICE_CLASS_DATE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_DATE = 'date'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_DISTANCE","title":"DEVICE_CLASS_DISTANCE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_DISTANCE = 'distance'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_DOOR","title":"DEVICE_CLASS_DOOR  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_DOOR = 'door'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_DURATION","title":"DEVICE_CLASS_DURATION  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_DURATION = 'duration'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_EMPTY","title":"DEVICE_CLASS_EMPTY  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_EMPTY = ''\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_ENERGY","title":"DEVICE_CLASS_ENERGY  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_ENERGY = 'energy'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_ENERGY_STORAGE","title":"DEVICE_CLASS_ENERGY_STORAGE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_ENERGY_STORAGE = 'energy_storage'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_FREQUENCY","title":"DEVICE_CLASS_FREQUENCY  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_FREQUENCY = 'frequency'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_GARAGE","title":"DEVICE_CLASS_GARAGE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_GARAGE = 'garage'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_GARAGE_DOOR","title":"DEVICE_CLASS_GARAGE_DOOR  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_GARAGE_DOOR = 'garage_door'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_GAS","title":"DEVICE_CLASS_GAS  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_GAS = 'gas'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_GATE","title":"DEVICE_CLASS_GATE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_GATE = 'gate'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_HEAT","title":"DEVICE_CLASS_HEAT  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_HEAT = 'heat'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_HUMIDITY","title":"DEVICE_CLASS_HUMIDITY  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_HUMIDITY = 'humidity'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_IDENTIFY","title":"DEVICE_CLASS_IDENTIFY  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_IDENTIFY = 'identify'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_ILLUMINANCE","title":"DEVICE_CLASS_ILLUMINANCE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_ILLUMINANCE = 'illuminance'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_IRRADIANCE","title":"DEVICE_CLASS_IRRADIANCE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_IRRADIANCE = 'irradiance'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_LIGHT","title":"DEVICE_CLASS_LIGHT  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_LIGHT = 'light'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_LOCK","title":"DEVICE_CLASS_LOCK  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_LOCK = 'lock'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_MOISTURE","title":"DEVICE_CLASS_MOISTURE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_MOISTURE = 'moisture'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_MONETARY","title":"DEVICE_CLASS_MONETARY  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_MONETARY = 'monetary'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_MOTION","title":"DEVICE_CLASS_MOTION  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_MOTION = 'motion'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_MOVING","title":"DEVICE_CLASS_MOVING  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_MOVING = 'moving'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_NITROGEN_DIOXIDE","title":"DEVICE_CLASS_NITROGEN_DIOXIDE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_NITROGEN_DIOXIDE = 'nitrogen_dioxide'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_NITROGEN_MONOXIDE","title":"DEVICE_CLASS_NITROGEN_MONOXIDE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_NITROGEN_MONOXIDE = 'nitrogen_monoxide'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_NITROUS_OXIDE","title":"DEVICE_CLASS_NITROUS_OXIDE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_NITROUS_OXIDE = 'nitrous_oxide'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_OCCUPANCY","title":"DEVICE_CLASS_OCCUPANCY  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_OCCUPANCY = 'occupancy'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_OPENING","title":"DEVICE_CLASS_OPENING  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_OPENING = 'opening'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_OUTLET","title":"DEVICE_CLASS_OUTLET  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_OUTLET = 'outlet'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_OZONE","title":"DEVICE_CLASS_OZONE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_OZONE = 'ozone'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_PH","title":"DEVICE_CLASS_PH  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_PH = 'ph'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_PLUG","title":"DEVICE_CLASS_PLUG  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_PLUG = 'plug'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_PM1","title":"DEVICE_CLASS_PM1  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_PM1 = 'pm1'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_PM10","title":"DEVICE_CLASS_PM10  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_PM10 = 'pm10'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_PM25","title":"DEVICE_CLASS_PM25  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_PM25 = 'pm25'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_POWER","title":"DEVICE_CLASS_POWER  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_POWER = 'power'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_POWER_FACTOR","title":"DEVICE_CLASS_POWER_FACTOR  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_POWER_FACTOR = 'power_factor'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_PRECIPITATION","title":"DEVICE_CLASS_PRECIPITATION  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_PRECIPITATION = 'precipitation'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_PRECIPITATION_INTENSITY","title":"DEVICE_CLASS_PRECIPITATION_INTENSITY  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_PRECIPITATION_INTENSITY = (\n    \"precipitation_intensity\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_PRESENCE","title":"DEVICE_CLASS_PRESENCE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_PRESENCE = 'presence'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_PRESSURE","title":"DEVICE_CLASS_PRESSURE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_PRESSURE = 'pressure'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_PROBLEM","title":"DEVICE_CLASS_PROBLEM  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_PROBLEM = 'problem'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_REACTIVE_POWER","title":"DEVICE_CLASS_REACTIVE_POWER  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_REACTIVE_POWER = 'reactive_power'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_RESTART","title":"DEVICE_CLASS_RESTART  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_RESTART = 'restart'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_RUNNING","title":"DEVICE_CLASS_RUNNING  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_RUNNING = 'running'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_SAFETY","title":"DEVICE_CLASS_SAFETY  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_SAFETY = 'safety'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_SHADE","title":"DEVICE_CLASS_SHADE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_SHADE = 'shade'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_SHUTTER","title":"DEVICE_CLASS_SHUTTER  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_SHUTTER = 'shutter'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_SIGNAL_STRENGTH","title":"DEVICE_CLASS_SIGNAL_STRENGTH  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_SIGNAL_STRENGTH = 'signal_strength'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_SMOKE","title":"DEVICE_CLASS_SMOKE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_SMOKE = 'smoke'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_SOUND","title":"DEVICE_CLASS_SOUND  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_SOUND = 'sound'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_SOUND_PRESSURE","title":"DEVICE_CLASS_SOUND_PRESSURE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_SOUND_PRESSURE = 'sound_pressure'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_SPEED","title":"DEVICE_CLASS_SPEED  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_SPEED = 'speed'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_SULPHUR_DIOXIDE","title":"DEVICE_CLASS_SULPHUR_DIOXIDE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_SULPHUR_DIOXIDE = 'sulphur_dioxide'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_SWITCH","title":"DEVICE_CLASS_SWITCH  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_SWITCH = 'switch'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_TAMPER","title":"DEVICE_CLASS_TAMPER  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_TAMPER = 'tamper'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_TEMPERATURE","title":"DEVICE_CLASS_TEMPERATURE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_TEMPERATURE = 'temperature'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_TIMESTAMP","title":"DEVICE_CLASS_TIMESTAMP  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_TIMESTAMP = 'timestamp'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_UPDATE","title":"DEVICE_CLASS_UPDATE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_UPDATE = 'update'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_VIBRATION","title":"DEVICE_CLASS_VIBRATION  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_VIBRATION = 'vibration'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_VOLATILE_ORGANIC_COMPOUNDS","title":"DEVICE_CLASS_VOLATILE_ORGANIC_COMPOUNDS  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_VOLATILE_ORGANIC_COMPOUNDS = (\n    \"volatile_organic_compounds\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_VOLATILE_ORGANIC_COMPOUNDS_PARTS","title":"DEVICE_CLASS_VOLATILE_ORGANIC_COMPOUNDS_PARTS  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_VOLATILE_ORGANIC_COMPOUNDS_PARTS = (\n    \"volatile_organic_compounds_parts\"\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_VOLTAGE","title":"DEVICE_CLASS_VOLTAGE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_VOLTAGE = 'voltage'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_VOLUME","title":"DEVICE_CLASS_VOLUME  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_VOLUME = 'volume'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_VOLUME_FLOW_RATE","title":"DEVICE_CLASS_VOLUME_FLOW_RATE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_VOLUME_FLOW_RATE = 'volume_flow_rate'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_VOLUME_STORAGE","title":"DEVICE_CLASS_VOLUME_STORAGE  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_VOLUME_STORAGE = 'volume_storage'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_WATER","title":"DEVICE_CLASS_WATER  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_WATER = 'water'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_WEIGHT","title":"DEVICE_CLASS_WEIGHT  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_WEIGHT = 'weight'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_WINDOW","title":"DEVICE_CLASS_WINDOW  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_WINDOW = 'window'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.DEVICE_CLASS_WIND_SPEED","title":"DEVICE_CLASS_WIND_SPEED  <code>module-attribute</code>","text":"<pre><code>DEVICE_CLASS_WIND_SPEED = 'wind_speed'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ENTITY_CATEGORY_CONFIG","title":"ENTITY_CATEGORY_CONFIG  <code>module-attribute</code>","text":"<pre><code>ENTITY_CATEGORY_CONFIG = 'config'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ENTITY_CATEGORY_DIAGNOSTIC","title":"ENTITY_CATEGORY_DIAGNOSTIC  <code>module-attribute</code>","text":"<pre><code>ENTITY_CATEGORY_DIAGNOSTIC = 'diagnostic'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ENTITY_CATEGORY_NONE","title":"ENTITY_CATEGORY_NONE  <code>module-attribute</code>","text":"<pre><code>ENTITY_CATEGORY_NONE = ''\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ENV_NOGITIGNORE","title":"ENV_NOGITIGNORE  <code>module-attribute</code>","text":"<pre><code>ENV_NOGITIGNORE = 'ESPHOME_NOGITIGNORE'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ENV_QUICKWIZARD","title":"ENV_QUICKWIZARD  <code>module-attribute</code>","text":"<pre><code>ENV_QUICKWIZARD = 'ESPHOME_QUICKWIZARD'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.HEADER_FILE_EXTENSIONS","title":"HEADER_FILE_EXTENSIONS  <code>module-attribute</code>","text":"<pre><code>HEADER_FILE_EXTENSIONS = {'.h', '.hpp', '.tcc'}\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_ACCELERATION","title":"ICON_ACCELERATION  <code>module-attribute</code>","text":"<pre><code>ICON_ACCELERATION = 'mdi:axis-arrow'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_ACCELERATION_X","title":"ICON_ACCELERATION_X  <code>module-attribute</code>","text":"<pre><code>ICON_ACCELERATION_X = 'mdi:axis-x-arrow'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_ACCELERATION_Y","title":"ICON_ACCELERATION_Y  <code>module-attribute</code>","text":"<pre><code>ICON_ACCELERATION_Y = 'mdi:axis-y-arrow'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_ACCELERATION_Z","title":"ICON_ACCELERATION_Z  <code>module-attribute</code>","text":"<pre><code>ICON_ACCELERATION_Z = 'mdi:axis-z-arrow'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_ACCOUNT","title":"ICON_ACCOUNT  <code>module-attribute</code>","text":"<pre><code>ICON_ACCOUNT = 'mdi:account'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_ACCOUNT_CHECK","title":"ICON_ACCOUNT_CHECK  <code>module-attribute</code>","text":"<pre><code>ICON_ACCOUNT_CHECK = 'mdi:account-check'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_ARROW_EXPAND_VERTICAL","title":"ICON_ARROW_EXPAND_VERTICAL  <code>module-attribute</code>","text":"<pre><code>ICON_ARROW_EXPAND_VERTICAL = 'mdi:arrow-expand-vertical'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_BATTERY","title":"ICON_BATTERY  <code>module-attribute</code>","text":"<pre><code>ICON_BATTERY = 'mdi:battery'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_BLUETOOTH","title":"ICON_BLUETOOTH  <code>module-attribute</code>","text":"<pre><code>ICON_BLUETOOTH = 'mdi:bluetooth'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_BLUR","title":"ICON_BLUR  <code>module-attribute</code>","text":"<pre><code>ICON_BLUR = 'mdi:blur'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_BRIEFCASE_DOWNLOAD","title":"ICON_BRIEFCASE_DOWNLOAD  <code>module-attribute</code>","text":"<pre><code>ICON_BRIEFCASE_DOWNLOAD = 'mdi:briefcase-download'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_BRIGHTNESS_5","title":"ICON_BRIGHTNESS_5  <code>module-attribute</code>","text":"<pre><code>ICON_BRIGHTNESS_5 = 'mdi:brightness-5'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_BRIGHTNESS_6","title":"ICON_BRIGHTNESS_6  <code>module-attribute</code>","text":"<pre><code>ICON_BRIGHTNESS_6 = 'mdi:brightness-6'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_BUG","title":"ICON_BUG  <code>module-attribute</code>","text":"<pre><code>ICON_BUG = 'mdi:bug'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_CELLPHONE_ARROW_DOWN","title":"ICON_CELLPHONE_ARROW_DOWN  <code>module-attribute</code>","text":"<pre><code>ICON_CELLPHONE_ARROW_DOWN = 'mdi:cellphone-arrow-down'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_CHECK_CIRCLE_OUTLINE","title":"ICON_CHECK_CIRCLE_OUTLINE  <code>module-attribute</code>","text":"<pre><code>ICON_CHECK_CIRCLE_OUTLINE = 'mdi:check-circle-outline'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_CHEMICAL_WEAPON","title":"ICON_CHEMICAL_WEAPON  <code>module-attribute</code>","text":"<pre><code>ICON_CHEMICAL_WEAPON = 'mdi:chemical-weapon'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_CHIP","title":"ICON_CHIP  <code>module-attribute</code>","text":"<pre><code>ICON_CHIP = 'mdi:chip'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_COUNTER","title":"ICON_COUNTER  <code>module-attribute</code>","text":"<pre><code>ICON_COUNTER = 'mdi:counter'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_CURRENT_AC","title":"ICON_CURRENT_AC  <code>module-attribute</code>","text":"<pre><code>ICON_CURRENT_AC = 'mdi:current-ac'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_DATABASE","title":"ICON_DATABASE  <code>module-attribute</code>","text":"<pre><code>ICON_DATABASE = 'mdi:database'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_EMPTY","title":"ICON_EMPTY  <code>module-attribute</code>","text":"<pre><code>ICON_EMPTY = ''\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_FAN","title":"ICON_FAN  <code>module-attribute</code>","text":"<pre><code>ICON_FAN = 'mdi:fan'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_FINGERPRINT","title":"ICON_FINGERPRINT  <code>module-attribute</code>","text":"<pre><code>ICON_FINGERPRINT = 'mdi:fingerprint'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_FLASH","title":"ICON_FLASH  <code>module-attribute</code>","text":"<pre><code>ICON_FLASH = 'mdi:flash'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_FLASK","title":"ICON_FLASK  <code>module-attribute</code>","text":"<pre><code>ICON_FLASK = 'mdi:flask'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_FLASK_OUTLINE","title":"ICON_FLASK_OUTLINE  <code>module-attribute</code>","text":"<pre><code>ICON_FLASK_OUTLINE = 'mdi:flask-outline'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_FLOWER","title":"ICON_FLOWER  <code>module-attribute</code>","text":"<pre><code>ICON_FLOWER = 'mdi:flower'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_GAS_CYLINDER","title":"ICON_GAS_CYLINDER  <code>module-attribute</code>","text":"<pre><code>ICON_GAS_CYLINDER = 'mdi:gas-cylinder'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_GAUGE","title":"ICON_GAUGE  <code>module-attribute</code>","text":"<pre><code>ICON_GAUGE = 'mdi:gauge'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_GRAIN","title":"ICON_GRAIN  <code>module-attribute</code>","text":"<pre><code>ICON_GRAIN = 'mdi:grain'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_GYROSCOPE_X","title":"ICON_GYROSCOPE_X  <code>module-attribute</code>","text":"<pre><code>ICON_GYROSCOPE_X = 'mdi:axis-x-rotate-clockwise'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_GYROSCOPE_Y","title":"ICON_GYROSCOPE_Y  <code>module-attribute</code>","text":"<pre><code>ICON_GYROSCOPE_Y = 'mdi:axis-y-rotate-clockwise'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_GYROSCOPE_Z","title":"ICON_GYROSCOPE_Z  <code>module-attribute</code>","text":"<pre><code>ICON_GYROSCOPE_Z = 'mdi:axis-z-rotate-clockwise'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_HEATING_COIL","title":"ICON_HEATING_COIL  <code>module-attribute</code>","text":"<pre><code>ICON_HEATING_COIL = 'mdi:heating-coil'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_KEY_PLUS","title":"ICON_KEY_PLUS  <code>module-attribute</code>","text":"<pre><code>ICON_KEY_PLUS = 'mdi:key-plus'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_LIGHTBULB","title":"ICON_LIGHTBULB  <code>module-attribute</code>","text":"<pre><code>ICON_LIGHTBULB = 'mdi:lightbulb'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_MAGNET","title":"ICON_MAGNET  <code>module-attribute</code>","text":"<pre><code>ICON_MAGNET = 'mdi:magnet'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_MEMORY","title":"ICON_MEMORY  <code>module-attribute</code>","text":"<pre><code>ICON_MEMORY = 'mdi:memory'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_MOLECULE_CO2","title":"ICON_MOLECULE_CO2  <code>module-attribute</code>","text":"<pre><code>ICON_MOLECULE_CO2 = 'mdi:molecule-co2'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_MOTION_SENSOR","title":"ICON_MOTION_SENSOR  <code>module-attribute</code>","text":"<pre><code>ICON_MOTION_SENSOR = 'mdi:motion-sensor'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_NEW_BOX","title":"ICON_NEW_BOX  <code>module-attribute</code>","text":"<pre><code>ICON_NEW_BOX = 'mdi:new-box'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_OMEGA","title":"ICON_OMEGA  <code>module-attribute</code>","text":"<pre><code>ICON_OMEGA = 'mdi:omega'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_PERCENT","title":"ICON_PERCENT  <code>module-attribute</code>","text":"<pre><code>ICON_PERCENT = 'mdi:percent'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_POWER","title":"ICON_POWER  <code>module-attribute</code>","text":"<pre><code>ICON_POWER = 'mdi:power'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_PULSE","title":"ICON_PULSE  <code>module-attribute</code>","text":"<pre><code>ICON_PULSE = 'mdi:pulse'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_RADIATOR","title":"ICON_RADIATOR  <code>module-attribute</code>","text":"<pre><code>ICON_RADIATOR = 'mdi:radiator'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_RADIOACTIVE","title":"ICON_RADIOACTIVE  <code>module-attribute</code>","text":"<pre><code>ICON_RADIOACTIVE = 'mdi:radioactive'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_RESTART","title":"ICON_RESTART  <code>module-attribute</code>","text":"<pre><code>ICON_RESTART = 'mdi:restart'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_RESTART_ALERT","title":"ICON_RESTART_ALERT  <code>module-attribute</code>","text":"<pre><code>ICON_RESTART_ALERT = 'mdi:restart-alert'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_ROTATE_RIGHT","title":"ICON_ROTATE_RIGHT  <code>module-attribute</code>","text":"<pre><code>ICON_ROTATE_RIGHT = 'mdi:rotate-right'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_RULER","title":"ICON_RULER  <code>module-attribute</code>","text":"<pre><code>ICON_RULER = 'mdi:ruler'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_SCALE","title":"ICON_SCALE  <code>module-attribute</code>","text":"<pre><code>ICON_SCALE = 'mdi:scale'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_SCALE_BATHROOM","title":"ICON_SCALE_BATHROOM  <code>module-attribute</code>","text":"<pre><code>ICON_SCALE_BATHROOM = 'mdi:scale-bathroom'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_SCREEN_ROTATION","title":"ICON_SCREEN_ROTATION  <code>module-attribute</code>","text":"<pre><code>ICON_SCREEN_ROTATION = 'mdi:screen-rotation'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_SECURITY","title":"ICON_SECURITY  <code>module-attribute</code>","text":"<pre><code>ICON_SECURITY = 'mdi:security'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_SIGNAL","title":"ICON_SIGNAL  <code>module-attribute</code>","text":"<pre><code>ICON_SIGNAL = 'mdi:signal-distance-variant'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_SIGNAL_DISTANCE_VARIANT","title":"ICON_SIGNAL_DISTANCE_VARIANT  <code>module-attribute</code>","text":"<pre><code>ICON_SIGNAL_DISTANCE_VARIANT = 'mdi:signal'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_SIGN_DIRECTION","title":"ICON_SIGN_DIRECTION  <code>module-attribute</code>","text":"<pre><code>ICON_SIGN_DIRECTION = 'mdi:sign-direction'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_THERMOMETER","title":"ICON_THERMOMETER  <code>module-attribute</code>","text":"<pre><code>ICON_THERMOMETER = 'mdi:thermometer'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_TIMELAPSE","title":"ICON_TIMELAPSE  <code>module-attribute</code>","text":"<pre><code>ICON_TIMELAPSE = 'mdi:timelapse'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_TIMER","title":"ICON_TIMER  <code>module-attribute</code>","text":"<pre><code>ICON_TIMER = 'mdi:timer-outline'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_WATER","title":"ICON_WATER  <code>module-attribute</code>","text":"<pre><code>ICON_WATER = 'mdi:water'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_WATER_PERCENT","title":"ICON_WATER_PERCENT  <code>module-attribute</code>","text":"<pre><code>ICON_WATER_PERCENT = 'mdi:water-percent'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_WEATHER_SUNSET","title":"ICON_WEATHER_SUNSET  <code>module-attribute</code>","text":"<pre><code>ICON_WEATHER_SUNSET = 'mdi:weather-sunset'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_WEATHER_SUNSET_DOWN","title":"ICON_WEATHER_SUNSET_DOWN  <code>module-attribute</code>","text":"<pre><code>ICON_WEATHER_SUNSET_DOWN = 'mdi:weather-sunset-down'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_WEATHER_SUNSET_UP","title":"ICON_WEATHER_SUNSET_UP  <code>module-attribute</code>","text":"<pre><code>ICON_WEATHER_SUNSET_UP = 'mdi:weather-sunset-up'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_WEATHER_WINDY","title":"ICON_WEATHER_WINDY  <code>module-attribute</code>","text":"<pre><code>ICON_WEATHER_WINDY = 'mdi:weather-windy'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.ICON_WIFI","title":"ICON_WIFI  <code>module-attribute</code>","text":"<pre><code>ICON_WIFI = 'mdi:wifi'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.KEY_CORE","title":"KEY_CORE  <code>module-attribute</code>","text":"<pre><code>KEY_CORE = 'core'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.KEY_FRAMEWORK_VERSION","title":"KEY_FRAMEWORK_VERSION  <code>module-attribute</code>","text":"<pre><code>KEY_FRAMEWORK_VERSION = 'framework_version'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.KEY_NAME","title":"KEY_NAME  <code>module-attribute</code>","text":"<pre><code>KEY_NAME = 'name'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.KEY_PAST_SAFE_MODE","title":"KEY_PAST_SAFE_MODE  <code>module-attribute</code>","text":"<pre><code>KEY_PAST_SAFE_MODE = 'past_safe_mode'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.KEY_TARGET_FRAMEWORK","title":"KEY_TARGET_FRAMEWORK  <code>module-attribute</code>","text":"<pre><code>KEY_TARGET_FRAMEWORK = 'target_framework'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.KEY_TARGET_PLATFORM","title":"KEY_TARGET_PLATFORM  <code>module-attribute</code>","text":"<pre><code>KEY_TARGET_PLATFORM = 'target_platform'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.KEY_VARIANT","title":"KEY_VARIANT  <code>module-attribute</code>","text":"<pre><code>KEY_VARIANT = 'variant'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.PLATFORM_BK72XX","title":"PLATFORM_BK72XX  <code>module-attribute</code>","text":"<pre><code>PLATFORM_BK72XX = 'bk72xx'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.PLATFORM_ESP32","title":"PLATFORM_ESP32  <code>module-attribute</code>","text":"<pre><code>PLATFORM_ESP32 = 'esp32'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.PLATFORM_ESP8266","title":"PLATFORM_ESP8266  <code>module-attribute</code>","text":"<pre><code>PLATFORM_ESP8266 = 'esp8266'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.PLATFORM_HOST","title":"PLATFORM_HOST  <code>module-attribute</code>","text":"<pre><code>PLATFORM_HOST = 'host'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.PLATFORM_LIBRETINY_OLDSTYLE","title":"PLATFORM_LIBRETINY_OLDSTYLE  <code>module-attribute</code>","text":"<pre><code>PLATFORM_LIBRETINY_OLDSTYLE = 'libretiny'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.PLATFORM_RP2040","title":"PLATFORM_RP2040  <code>module-attribute</code>","text":"<pre><code>PLATFORM_RP2040 = 'rp2040'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.PLATFORM_RTL87XX","title":"PLATFORM_RTL87XX  <code>module-attribute</code>","text":"<pre><code>PLATFORM_RTL87XX = 'rtl87xx'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.SECRETS_FILES","title":"SECRETS_FILES  <code>module-attribute</code>","text":"<pre><code>SECRETS_FILES = ('secrets.yaml', 'secrets.yml')\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.SOURCE_FILE_EXTENSIONS","title":"SOURCE_FILE_EXTENSIONS  <code>module-attribute</code>","text":"<pre><code>SOURCE_FILE_EXTENSIONS = {\n    \".cpp\",\n    \".hpp\",\n    \".h\",\n    \".c\",\n    \".tcc\",\n    \".ino\",\n}\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.STATE_CLASS_MEASUREMENT","title":"STATE_CLASS_MEASUREMENT  <code>module-attribute</code>","text":"<pre><code>STATE_CLASS_MEASUREMENT = 'measurement'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.STATE_CLASS_NONE","title":"STATE_CLASS_NONE  <code>module-attribute</code>","text":"<pre><code>STATE_CLASS_NONE = ''\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.STATE_CLASS_TOTAL","title":"STATE_CLASS_TOTAL  <code>module-attribute</code>","text":"<pre><code>STATE_CLASS_TOTAL = 'total'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.STATE_CLASS_TOTAL_INCREASING","title":"STATE_CLASS_TOTAL_INCREASING  <code>module-attribute</code>","text":"<pre><code>STATE_CLASS_TOTAL_INCREASING = 'total_increasing'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.TARGET_PLATFORMS","title":"TARGET_PLATFORMS  <code>module-attribute</code>","text":"<pre><code>TARGET_PLATFORMS = [\n    PLATFORM_ESP32,\n    PLATFORM_ESP8266,\n    PLATFORM_RP2040,\n    PLATFORM_HOST,\n    PLATFORM_BK72XX,\n    PLATFORM_RTL87XX,\n    PLATFORM_LIBRETINY_OLDSTYLE,\n]\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.TYPE_GIT","title":"TYPE_GIT  <code>module-attribute</code>","text":"<pre><code>TYPE_GIT = 'git'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.TYPE_LOCAL","title":"TYPE_LOCAL  <code>module-attribute</code>","text":"<pre><code>TYPE_LOCAL = 'local'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_AMPERE","title":"UNIT_AMPERE  <code>module-attribute</code>","text":"<pre><code>UNIT_AMPERE = 'A'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_BECQUEREL_PER_CUBIC_METER","title":"UNIT_BECQUEREL_PER_CUBIC_METER  <code>module-attribute</code>","text":"<pre><code>UNIT_BECQUEREL_PER_CUBIC_METER = 'Bq/m\u00b3'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_BYTES","title":"UNIT_BYTES  <code>module-attribute</code>","text":"<pre><code>UNIT_BYTES = 'B'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_CELSIUS","title":"UNIT_CELSIUS  <code>module-attribute</code>","text":"<pre><code>UNIT_CELSIUS = '\u00b0C'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_CENTIMETER","title":"UNIT_CENTIMETER  <code>module-attribute</code>","text":"<pre><code>UNIT_CENTIMETER = 'cm'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_COUNTS_PER_CUBIC_CENTIMETER","title":"UNIT_COUNTS_PER_CUBIC_CENTIMETER  <code>module-attribute</code>","text":"<pre><code>UNIT_COUNTS_PER_CUBIC_CENTIMETER = '#/cm\u00b3'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_COUNT_DECILITRE","title":"UNIT_COUNT_DECILITRE  <code>module-attribute</code>","text":"<pre><code>UNIT_COUNT_DECILITRE = '/dL'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_CUBIC_METER","title":"UNIT_CUBIC_METER  <code>module-attribute</code>","text":"<pre><code>UNIT_CUBIC_METER = 'm\u00b3'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_CUBIC_METER_PER_HOUR","title":"UNIT_CUBIC_METER_PER_HOUR  <code>module-attribute</code>","text":"<pre><code>UNIT_CUBIC_METER_PER_HOUR = 'm\u00b3/h'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_DECIBEL","title":"UNIT_DECIBEL  <code>module-attribute</code>","text":"<pre><code>UNIT_DECIBEL = 'dB'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_DECIBEL_MILLIWATT","title":"UNIT_DECIBEL_MILLIWATT  <code>module-attribute</code>","text":"<pre><code>UNIT_DECIBEL_MILLIWATT = 'dBm'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_DEGREES","title":"UNIT_DEGREES  <code>module-attribute</code>","text":"<pre><code>UNIT_DEGREES = '\u00b0'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_DEGREE_PER_SECOND","title":"UNIT_DEGREE_PER_SECOND  <code>module-attribute</code>","text":"<pre><code>UNIT_DEGREE_PER_SECOND = '\u00b0/s'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_EMPTY","title":"UNIT_EMPTY  <code>module-attribute</code>","text":"<pre><code>UNIT_EMPTY = ''\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_G","title":"UNIT_G  <code>module-attribute</code>","text":"<pre><code>UNIT_G = 'G'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_GRAMS_PER_CUBIC_METER","title":"UNIT_GRAMS_PER_CUBIC_METER  <code>module-attribute</code>","text":"<pre><code>UNIT_GRAMS_PER_CUBIC_METER = 'g/m\u00b3'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_HECTOPASCAL","title":"UNIT_HECTOPASCAL  <code>module-attribute</code>","text":"<pre><code>UNIT_HECTOPASCAL = 'hPa'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_HERTZ","title":"UNIT_HERTZ  <code>module-attribute</code>","text":"<pre><code>UNIT_HERTZ = 'Hz'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_HOUR","title":"UNIT_HOUR  <code>module-attribute</code>","text":"<pre><code>UNIT_HOUR = 'h'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_KELVIN","title":"UNIT_KELVIN  <code>module-attribute</code>","text":"<pre><code>UNIT_KELVIN = 'K'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_KILOGRAM","title":"UNIT_KILOGRAM  <code>module-attribute</code>","text":"<pre><code>UNIT_KILOGRAM = 'kg'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_KILOMETER","title":"UNIT_KILOMETER  <code>module-attribute</code>","text":"<pre><code>UNIT_KILOMETER = 'km'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_KILOMETER_PER_HOUR","title":"UNIT_KILOMETER_PER_HOUR  <code>module-attribute</code>","text":"<pre><code>UNIT_KILOMETER_PER_HOUR = 'km/h'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_KILOVOLT_AMPS_REACTIVE","title":"UNIT_KILOVOLT_AMPS_REACTIVE  <code>module-attribute</code>","text":"<pre><code>UNIT_KILOVOLT_AMPS_REACTIVE = 'kVAr'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_KILOVOLT_AMPS_REACTIVE_HOURS","title":"UNIT_KILOVOLT_AMPS_REACTIVE_HOURS  <code>module-attribute</code>","text":"<pre><code>UNIT_KILOVOLT_AMPS_REACTIVE_HOURS = 'kVArh'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_KILOWATT","title":"UNIT_KILOWATT  <code>module-attribute</code>","text":"<pre><code>UNIT_KILOWATT = 'kW'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_KILOWATT_HOURS","title":"UNIT_KILOWATT_HOURS  <code>module-attribute</code>","text":"<pre><code>UNIT_KILOWATT_HOURS = 'kWh'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_LUX","title":"UNIT_LUX  <code>module-attribute</code>","text":"<pre><code>UNIT_LUX = 'lx'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_METER","title":"UNIT_METER  <code>module-attribute</code>","text":"<pre><code>UNIT_METER = 'm'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_METER_PER_SECOND_SQUARED","title":"UNIT_METER_PER_SECOND_SQUARED  <code>module-attribute</code>","text":"<pre><code>UNIT_METER_PER_SECOND_SQUARED = 'm/s\u00b2'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_MICROGRAMS_PER_CUBIC_METER","title":"UNIT_MICROGRAMS_PER_CUBIC_METER  <code>module-attribute</code>","text":"<pre><code>UNIT_MICROGRAMS_PER_CUBIC_METER = '\u00b5g/m\u00b3'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_MICROMETER","title":"UNIT_MICROMETER  <code>module-attribute</code>","text":"<pre><code>UNIT_MICROMETER = '\u00b5m'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_MICROSIEMENS_PER_CENTIMETER","title":"UNIT_MICROSIEMENS_PER_CENTIMETER  <code>module-attribute</code>","text":"<pre><code>UNIT_MICROSIEMENS_PER_CENTIMETER = '\u00b5S/cm'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_MICROTESLA","title":"UNIT_MICROTESLA  <code>module-attribute</code>","text":"<pre><code>UNIT_MICROTESLA = '\u00b5T'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_MILLIGRAMS_PER_CUBIC_METER","title":"UNIT_MILLIGRAMS_PER_CUBIC_METER  <code>module-attribute</code>","text":"<pre><code>UNIT_MILLIGRAMS_PER_CUBIC_METER = 'mg/m\u00b3'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_MILLISECOND","title":"UNIT_MILLISECOND  <code>module-attribute</code>","text":"<pre><code>UNIT_MILLISECOND = 'ms'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_MILLISIEMENS_PER_CENTIMETER","title":"UNIT_MILLISIEMENS_PER_CENTIMETER  <code>module-attribute</code>","text":"<pre><code>UNIT_MILLISIEMENS_PER_CENTIMETER = 'mS/cm'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_MINUTE","title":"UNIT_MINUTE  <code>module-attribute</code>","text":"<pre><code>UNIT_MINUTE = 'min'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_OHM","title":"UNIT_OHM  <code>module-attribute</code>","text":"<pre><code>UNIT_OHM = '\u03a9'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_PARTS_PER_BILLION","title":"UNIT_PARTS_PER_BILLION  <code>module-attribute</code>","text":"<pre><code>UNIT_PARTS_PER_BILLION = 'ppb'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_PARTS_PER_MILLION","title":"UNIT_PARTS_PER_MILLION  <code>module-attribute</code>","text":"<pre><code>UNIT_PARTS_PER_MILLION = 'ppm'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_PASCAL","title":"UNIT_PASCAL  <code>module-attribute</code>","text":"<pre><code>UNIT_PASCAL = 'Pa'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_PERCENT","title":"UNIT_PERCENT  <code>module-attribute</code>","text":"<pre><code>UNIT_PERCENT = '%'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_PH","title":"UNIT_PH  <code>module-attribute</code>","text":"<pre><code>UNIT_PH = 'pH'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_PULSES","title":"UNIT_PULSES  <code>module-attribute</code>","text":"<pre><code>UNIT_PULSES = 'pulses'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_PULSES_PER_MINUTE","title":"UNIT_PULSES_PER_MINUTE  <code>module-attribute</code>","text":"<pre><code>UNIT_PULSES_PER_MINUTE = 'pulses/min'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_REVOLUTIONS_PER_MINUTE","title":"UNIT_REVOLUTIONS_PER_MINUTE  <code>module-attribute</code>","text":"<pre><code>UNIT_REVOLUTIONS_PER_MINUTE = 'RPM'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_SECOND","title":"UNIT_SECOND  <code>module-attribute</code>","text":"<pre><code>UNIT_SECOND = 's'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_STEPS","title":"UNIT_STEPS  <code>module-attribute</code>","text":"<pre><code>UNIT_STEPS = 'steps'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_VOLT","title":"UNIT_VOLT  <code>module-attribute</code>","text":"<pre><code>UNIT_VOLT = 'V'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_VOLT_AMPS","title":"UNIT_VOLT_AMPS  <code>module-attribute</code>","text":"<pre><code>UNIT_VOLT_AMPS = 'VA'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_VOLT_AMPS_REACTIVE","title":"UNIT_VOLT_AMPS_REACTIVE  <code>module-attribute</code>","text":"<pre><code>UNIT_VOLT_AMPS_REACTIVE = 'VAR'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_VOLT_AMPS_REACTIVE_HOURS","title":"UNIT_VOLT_AMPS_REACTIVE_HOURS  <code>module-attribute</code>","text":"<pre><code>UNIT_VOLT_AMPS_REACTIVE_HOURS = 'VARh'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_WATT","title":"UNIT_WATT  <code>module-attribute</code>","text":"<pre><code>UNIT_WATT = 'W'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.UNIT_WATT_HOURS","title":"UNIT_WATT_HOURS  <code>module-attribute</code>","text":"<pre><code>UNIT_WATT_HOURS = 'Wh'\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#const.VALID_SUBSTITUTIONS_CHARACTERS","title":"VALID_SUBSTITUTIONS_CHARACTERS  <code>module-attribute</code>","text":"<pre><code>VALID_SUBSTITUTIONS_CHARACTERS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\"\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation","title":"automation","text":""},{"location":"references/python%20API%27s/validation_helpers/#automation.ACTION_REGISTRY","title":"ACTION_REGISTRY  <code>module-attribute</code>","text":"<pre><code>ACTION_REGISTRY = Registry()\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.AUTOMATION_SCHEMA","title":"AUTOMATION_SCHEMA  <code>module-attribute</code>","text":"<pre><code>AUTOMATION_SCHEMA = Schema(\n    {\n        GenerateID(CONF_TRIGGER_ID): declare_id(Trigger),\n        GenerateID(CONF_AUTOMATION_ID): declare_id(\n            Automation\n        ),\n        Required(CONF_THEN): validate_action_list,\n    }\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.Action","title":"Action  <code>module-attribute</code>","text":"<pre><code>Action = class_('Action')\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.AndCondition","title":"AndCondition  <code>module-attribute</code>","text":"<pre><code>AndCondition = class_('AndCondition', Condition)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.Automation","title":"Automation  <code>module-attribute</code>","text":"<pre><code>Automation = class_('Automation')\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.CONDITION_REGISTRY","title":"CONDITION_REGISTRY  <code>module-attribute</code>","text":"<pre><code>CONDITION_REGISTRY = Registry()\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.Condition","title":"Condition  <code>module-attribute</code>","text":"<pre><code>Condition = class_('Condition')\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.DelayAction","title":"DelayAction  <code>module-attribute</code>","text":"<pre><code>DelayAction = class_('DelayAction', Action, Component)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.ForCondition","title":"ForCondition  <code>module-attribute</code>","text":"<pre><code>ForCondition = class_('ForCondition', Condition, Component)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.IfAction","title":"IfAction  <code>module-attribute</code>","text":"<pre><code>IfAction = class_('IfAction', Action)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.LambdaAction","title":"LambdaAction  <code>module-attribute</code>","text":"<pre><code>LambdaAction = class_('LambdaAction', Action)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.LambdaCondition","title":"LambdaCondition  <code>module-attribute</code>","text":"<pre><code>LambdaCondition = class_('LambdaCondition', Condition)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.NotCondition","title":"NotCondition  <code>module-attribute</code>","text":"<pre><code>NotCondition = class_('NotCondition', Condition)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.OrCondition","title":"OrCondition  <code>module-attribute</code>","text":"<pre><code>OrCondition = class_('OrCondition', Condition)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.RepeatAction","title":"RepeatAction  <code>module-attribute</code>","text":"<pre><code>RepeatAction = class_('RepeatAction', Action)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.ResumeComponentAction","title":"ResumeComponentAction  <code>module-attribute</code>","text":"<pre><code>ResumeComponentAction = class_(\n    \"ResumeComponentAction\", Action\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.SuspendComponentAction","title":"SuspendComponentAction  <code>module-attribute</code>","text":"<pre><code>SuspendComponentAction = class_(\n    \"SuspendComponentAction\", Action\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.Trigger","title":"Trigger  <code>module-attribute</code>","text":"<pre><code>Trigger = class_('Trigger')\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.UpdateComponentAction","title":"UpdateComponentAction  <code>module-attribute</code>","text":"<pre><code>UpdateComponentAction = class_(\n    \"UpdateComponentAction\", Action\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.WaitUntilAction","title":"WaitUntilAction  <code>module-attribute</code>","text":"<pre><code>WaitUntilAction = class_(\n    \"WaitUntilAction\", Action, Component\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.WhileAction","title":"WhileAction  <code>module-attribute</code>","text":"<pre><code>WhileAction = class_('WhileAction', Action)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.XorCondition","title":"XorCondition  <code>module-attribute</code>","text":"<pre><code>XorCondition = class_('XorCondition', Condition)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.validate_action","title":"validate_action  <code>module-attribute</code>","text":"<pre><code>validate_action = validate_registry_entry(\n    \"action\", ACTION_REGISTRY\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.validate_action_list","title":"validate_action_list  <code>module-attribute</code>","text":"<pre><code>validate_action_list = validate_registry(\n    \"action\", ACTION_REGISTRY\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.validate_condition","title":"validate_condition  <code>module-attribute</code>","text":"<pre><code>validate_condition = validate_registry_entry(\n    \"condition\", CONDITION_REGISTRY\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.validate_condition_list","title":"validate_condition_list  <code>module-attribute</code>","text":"<pre><code>validate_condition_list = validate_registry(\n    \"condition\", CONDITION_REGISTRY\n)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.and_condition_to_code","title":"and_condition_to_code  <code>async</code>","text":"<pre><code>and_condition_to_code(\n    config, condition_id, template_arg, args\n)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>@register_condition(\"and\", AndCondition, validate_condition_list)\nasync def and_condition_to_code(config, condition_id, template_arg, args):\n    conditions = await build_condition_list(config, template_arg, args)\n    return cg.new_Pvariable(condition_id, template_arg, conditions)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.build_action","title":"build_action  <code>async</code>","text":"<pre><code>build_action(full_config, template_arg, args)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>async def build_action(full_config, template_arg, args):\n    registry_entry, config = cg.extract_registry_entry_config(\n        ACTION_REGISTRY, full_config\n    )\n    action_id = full_config[CONF_TYPE_ID]\n    builder = registry_entry.coroutine_fun\n    ret = await builder(config, action_id, template_arg, args)\n    return ret\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.build_action_list","title":"build_action_list  <code>async</code>","text":"<pre><code>build_action_list(config, templ, arg_type)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>async def build_action_list(config, templ, arg_type):\n    actions = []\n    for conf in config:\n        action = await build_action(conf, templ, arg_type)\n        actions.append(action)\n    return actions\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.build_automation","title":"build_automation  <code>async</code>","text":"<pre><code>build_automation(trigger, args, config)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>async def build_automation(trigger, args, config):\n    arg_types = [arg[0] for arg in args]\n    templ = cg.TemplateArguments(*arg_types)\n    obj = cg.new_Pvariable(config[CONF_AUTOMATION_ID], templ, trigger)\n    actions = await build_action_list(config[CONF_THEN], templ, args)\n    cg.add(obj.add_actions(actions))\n    return obj\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.build_condition","title":"build_condition  <code>async</code>","text":"<pre><code>build_condition(full_config, template_arg, args)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>async def build_condition(full_config, template_arg, args):\n    registry_entry, config = cg.extract_registry_entry_config(\n        CONDITION_REGISTRY, full_config\n    )\n    action_id = full_config[CONF_TYPE_ID]\n    builder = registry_entry.coroutine_fun\n    ret = await builder(config, action_id, template_arg, args)\n    return ret\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.build_condition_list","title":"build_condition_list  <code>async</code>","text":"<pre><code>build_condition_list(config, templ, args)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>async def build_condition_list(config, templ, args):\n    conditions = []\n    for conf in config:\n        condition = await build_condition(conf, templ, args)\n        conditions.append(condition)\n    return conditions\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.component_resume_action_to_code","title":"component_resume_action_to_code  <code>async</code>","text":"<pre><code>component_resume_action_to_code(\n    config, action_id, template_arg, args\n)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>@register_action(\n    \"component.resume\",\n    ResumeComponentAction,\n    maybe_simple_id(\n        {\n            cv.Required(CONF_ID): cv.use_id(cg.PollingComponent),\n            cv.Optional(CONF_UPDATE_INTERVAL): cv.templatable(\n                cv.positive_time_period_milliseconds\n            ),\n        }\n    ),\n)\nasync def component_resume_action_to_code(config, action_id, template_arg, args):\n    comp = await cg.get_variable(config[CONF_ID])\n    var = cg.new_Pvariable(action_id, template_arg, comp)\n    if CONF_UPDATE_INTERVAL in config:\n        template_ = await cg.templatable(config[CONF_UPDATE_INTERVAL], args, int)\n        cg.add(var.set_update_interval(template_))\n    return var\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.component_suspend_action_to_code","title":"component_suspend_action_to_code  <code>async</code>","text":"<pre><code>component_suspend_action_to_code(\n    config, action_id, template_arg, args\n)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>@register_action(\n    \"component.suspend\",\n    SuspendComponentAction,\n    maybe_simple_id(\n        {\n            cv.Required(CONF_ID): cv.use_id(cg.PollingComponent),\n        }\n    ),\n)\nasync def component_suspend_action_to_code(config, action_id, template_arg, args):\n    comp = await cg.get_variable(config[CONF_ID])\n    return cg.new_Pvariable(action_id, template_arg, comp)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.component_update_action_to_code","title":"component_update_action_to_code  <code>async</code>","text":"<pre><code>component_update_action_to_code(\n    config, action_id, template_arg, args\n)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>@register_action(\n    \"component.update\",\n    UpdateComponentAction,\n    maybe_simple_id(\n        {\n            cv.Required(CONF_ID): cv.use_id(cg.PollingComponent),\n        }\n    ),\n)\nasync def component_update_action_to_code(config, action_id, template_arg, args):\n    comp = await cg.get_variable(config[CONF_ID])\n    return cg.new_Pvariable(action_id, template_arg, comp)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.delay_action_to_code","title":"delay_action_to_code  <code>async</code>","text":"<pre><code>delay_action_to_code(config, action_id, template_arg, args)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>@register_action(\n    \"delay\", DelayAction, cv.templatable(cv.positive_time_period_milliseconds)\n)\nasync def delay_action_to_code(config, action_id, template_arg, args):\n    var = cg.new_Pvariable(action_id, template_arg)\n    await cg.register_component(var, {})\n    template_ = await cg.templatable(config, args, cg.uint32)\n    cg.add(var.set_delay(template_))\n    return var\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.for_condition_to_code","title":"for_condition_to_code  <code>async</code>","text":"<pre><code>for_condition_to_code(\n    config, condition_id, template_arg, args\n)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>@register_condition(\n    \"for\",\n    ForCondition,\n    cv.Schema(\n        {\n            cv.Required(CONF_TIME): cv.templatable(\n                cv.positive_time_period_milliseconds\n            ),\n            cv.Required(CONF_CONDITION): validate_potentially_and_condition,\n        }\n    ).extend(cv.COMPONENT_SCHEMA),\n)\nasync def for_condition_to_code(config, condition_id, template_arg, args):\n    condition = await build_condition(\n        config[CONF_CONDITION], cg.TemplateArguments(), []\n    )\n    var = cg.new_Pvariable(condition_id, template_arg, condition)\n    await cg.register_component(var, config)\n    templ = await cg.templatable(config[CONF_TIME], args, cg.uint32)\n    cg.add(var.set_time(templ))\n    return var\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.if_action_to_code","title":"if_action_to_code  <code>async</code>","text":"<pre><code>if_action_to_code(config, action_id, template_arg, args)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>@register_action(\n    \"if\",\n    IfAction,\n    cv.All(\n        {\n            cv.Required(CONF_CONDITION): validate_potentially_and_condition,\n            cv.Optional(CONF_THEN): validate_action_list,\n            cv.Optional(CONF_ELSE): validate_action_list,\n        },\n        cv.has_at_least_one_key(CONF_THEN, CONF_ELSE),\n    ),\n)\nasync def if_action_to_code(config, action_id, template_arg, args):\n    conditions = await build_condition(config[CONF_CONDITION], template_arg, args)\n    var = cg.new_Pvariable(action_id, template_arg, conditions)\n    if CONF_THEN in config:\n        actions = await build_action_list(config[CONF_THEN], template_arg, args)\n        cg.add(var.add_then(actions))\n    if CONF_ELSE in config:\n        actions = await build_action_list(config[CONF_ELSE], template_arg, args)\n        cg.add(var.add_else(actions))\n    return var\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.lambda_action_to_code","title":"lambda_action_to_code  <code>async</code>","text":"<pre><code>lambda_action_to_code(\n    config, action_id, template_arg, args\n)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>@register_action(\"lambda\", LambdaAction, cv.lambda_)\nasync def lambda_action_to_code(config, action_id, template_arg, args):\n    lambda_ = await cg.process_lambda(config, args, return_type=cg.void)\n    return cg.new_Pvariable(action_id, template_arg, lambda_)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.lambda_condition_to_code","title":"lambda_condition_to_code  <code>async</code>","text":"<pre><code>lambda_condition_to_code(\n    config, condition_id, template_arg, args\n)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>@register_condition(\"lambda\", LambdaCondition, cv.returning_lambda)\nasync def lambda_condition_to_code(config, condition_id, template_arg, args):\n    lambda_ = await cg.process_lambda(config, args, return_type=bool)\n    return cg.new_Pvariable(condition_id, template_arg, lambda_)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.maybe_conf","title":"maybe_conf","text":"<pre><code>maybe_conf(conf, *validators)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>def maybe_conf(conf, *validators):\n    validator = cv.All(*validators)\n\n    @schema_extractor(\"maybe\")\n    def validate(value):\n        if value == SCHEMA_EXTRACT:\n            return (validator, conf)\n\n        if isinstance(value, dict):\n            return validator(value)\n        with cv.remove_prepend_path([conf]):\n            return validator({conf: value})\n\n    return validate\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.maybe_simple_id","title":"maybe_simple_id","text":"<pre><code>maybe_simple_id(*validators)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>def maybe_simple_id(*validators):\n    return maybe_conf(CONF_ID, *validators)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.not_condition_to_code","title":"not_condition_to_code  <code>async</code>","text":"<pre><code>not_condition_to_code(\n    config, condition_id, template_arg, args\n)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>@register_condition(\"not\", NotCondition, validate_potentially_and_condition)\nasync def not_condition_to_code(config, condition_id, template_arg, args):\n    condition = await build_condition(config, template_arg, args)\n    return cg.new_Pvariable(condition_id, template_arg, condition)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.or_condition_to_code","title":"or_condition_to_code  <code>async</code>","text":"<pre><code>or_condition_to_code(\n    config, condition_id, template_arg, args\n)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>@register_condition(\"or\", OrCondition, validate_condition_list)\nasync def or_condition_to_code(config, condition_id, template_arg, args):\n    conditions = await build_condition_list(config, template_arg, args)\n    return cg.new_Pvariable(condition_id, template_arg, conditions)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.register_action","title":"register_action","text":"<pre><code>register_action(name, action_type, schema)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>def register_action(name, action_type, schema):\n    return ACTION_REGISTRY.register(name, action_type, schema)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.register_condition","title":"register_condition","text":"<pre><code>register_condition(name, condition_type, schema)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>def register_condition(name, condition_type, schema):\n    return CONDITION_REGISTRY.register(name, condition_type, schema)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.repeat_action_to_code","title":"repeat_action_to_code  <code>async</code>","text":"<pre><code>repeat_action_to_code(\n    config, action_id, template_arg, args\n)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>@register_action(\n    \"repeat\",\n    RepeatAction,\n    cv.Schema(\n        {\n            cv.Required(CONF_COUNT): cv.templatable(cv.positive_not_null_int),\n            cv.Required(CONF_THEN): validate_action_list,\n        }\n    ),\n)\nasync def repeat_action_to_code(config, action_id, template_arg, args):\n    var = cg.new_Pvariable(action_id, template_arg)\n    count_template = await cg.templatable(config[CONF_COUNT], args, cg.uint32)\n    cg.add(var.set_count(count_template))\n    actions = await build_action_list(\n        config[CONF_THEN],\n        cg.TemplateArguments(cg.uint32, *template_arg.args),\n        [(cg.uint32, \"iteration\"), *args],\n    )\n    cg.add(var.add_then(actions))\n    return var\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.validate_automation","title":"validate_automation","text":"<pre><code>validate_automation(\n    extra_schema=None, extra_validators=None, single=False\n)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>def validate_automation(extra_schema=None, extra_validators=None, single=False):\n    if extra_schema is None:\n        extra_schema = {}\n    if isinstance(extra_schema, cv.Schema):\n        extra_schema = extra_schema.schema\n    schema = AUTOMATION_SCHEMA.extend(extra_schema)\n\n    def validator_(value):\n        if isinstance(value, list):\n            # List of items, there are two possible options here, either a sequence of\n            # actions (no then:) or a list of automations.\n            try:\n                # First try as a sequence of actions\n                # If that succeeds, return immediately\n                with cv.remove_prepend_path([CONF_THEN]):\n                    return [schema({CONF_THEN: value})]\n            except cv.Invalid as err:\n                # Next try as a sequence of automations\n                try:\n                    return cv.Schema([schema])(value)\n                except cv.Invalid as err2:\n                    if \"extra keys not allowed\" in str(err2) and len(err2.path) == 2:\n                        # pylint: disable=raise-missing-from\n                        raise err\n                    if \"Unable to find action\" in str(err):\n                        raise err2\n                    raise cv.MultipleInvalid([err, err2])\n        elif isinstance(value, dict):\n            if CONF_THEN in value:\n                return [schema(value)]\n            with cv.remove_prepend_path([CONF_THEN]):\n                return [schema({CONF_THEN: value})]\n        # This should only happen with invalid configs, but let's have a nice error message.\n        return [schema(value)]\n\n    @schema_extractor(\"automation\")\n    def validator(value):\n        if value == SCHEMA_EXTRACT:\n            return schema\n\n        value = validator_(value)\n        if extra_validators is not None:\n            value = cv.Schema([extra_validators])(value)\n        if single:\n            if len(value) != 1:\n                raise cv.Invalid(\"Cannot have more than 1 automation for templates\")\n            return value[0]\n        return value\n\n    return validator\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.validate_potentially_and_condition","title":"validate_potentially_and_condition","text":"<pre><code>validate_potentially_and_condition(value)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>def validate_potentially_and_condition(value):\n    if isinstance(value, list):\n        with cv.remove_prepend_path([\"and\"]):\n            return validate_condition({\"and\": value})\n    return validate_condition(value)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.wait_until_action_to_code","title":"wait_until_action_to_code  <code>async</code>","text":"<pre><code>wait_until_action_to_code(\n    config, action_id, template_arg, args\n)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>@register_action(\"wait_until\", WaitUntilAction, _validate_wait_until)\nasync def wait_until_action_to_code(config, action_id, template_arg, args):\n    conditions = await build_condition(config[CONF_CONDITION], template_arg, args)\n    var = cg.new_Pvariable(action_id, template_arg, conditions)\n    if CONF_TIMEOUT in config:\n        template_ = await cg.templatable(config[CONF_TIMEOUT], args, cg.uint32)\n        cg.add(var.set_timeout_value(template_))\n    await cg.register_component(var, {})\n    return var\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.while_action_to_code","title":"while_action_to_code  <code>async</code>","text":"<pre><code>while_action_to_code(config, action_id, template_arg, args)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>@register_action(\n    \"while\",\n    WhileAction,\n    cv.Schema(\n        {\n            cv.Required(CONF_CONDITION): validate_potentially_and_condition,\n            cv.Required(CONF_THEN): validate_action_list,\n        }\n    ),\n)\nasync def while_action_to_code(config, action_id, template_arg, args):\n    conditions = await build_condition(config[CONF_CONDITION], template_arg, args)\n    var = cg.new_Pvariable(action_id, template_arg, conditions)\n    actions = await build_action_list(config[CONF_THEN], template_arg, args)\n    cg.add(var.add_then(actions))\n    return var\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#automation.xor_condition_to_code","title":"xor_condition_to_code  <code>async</code>","text":"<pre><code>xor_condition_to_code(\n    config, condition_id, template_arg, args\n)\n</code></pre> Source code in <code>esphome\\automation.py</code> <pre><code>@register_condition(\"xor\", XorCondition, validate_condition_list)\nasync def xor_condition_to_code(config, condition_id, template_arg, args):\n    conditions = await build_condition_list(config, template_arg, args)\n    return cg.new_Pvariable(condition_id, template_arg, conditions)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#coroutine","title":"coroutine","text":"<p>ESPHome's coroutine system.</p> <p>The Problem: When running the code generationg, components can depend on variables being registered. For example, an i2c-based sensor would need the i2c bus component to first be declared before the codegen can emit code using that variable (or otherwise the C++ won't compile).</p> <p>ESPHome's codegen system solves this by using coroutine-like methods. When a component depends on a variable, it waits for it to be registered using <code>await cg.get_variable()</code>. If the variable hasn't been registered yet, control will be yielded back to another component until the variable is registered. This leads to a topological sort, solving the dependency problem.</p> <p>Importantly, ESPHome only uses the coroutine syntax, no actual asyncio event loop is running in the background. This is so that we can ensure the order of execution is constant for the same YAML configuration, thus main.cpp only has to be recompiled if the configuration actually changes.</p> <p>There are two syntaxes for ESPHome coroutines (\"old style\" vs \"new style\" coroutines).</p> <p>\"new style\" - This is very much like coroutines you might be used to:</p> <pre><code>async def my_coroutine(config):\n    var = await cg.get_variable(config[CONF_ID])\n    await some_other_coroutine(xyz)\n    return var\n</code></pre> <p>new style coroutines are <code>async def</code> methods that use <code>await</code> to await the result of another coroutine, and can return values using a <code>return</code> statement.</p> <p>\"old style\" - This was a hack for when ESPHome still had to run on python 2, but is still compatible</p> <pre><code>@coroutine\ndef my_coroutine(config):\n    var = yield cg.get_variable(config[CONF_ID])\n    yield some_other_coroutine(xyz)\n    yield var\n</code></pre> <p>Here everything is combined in <code>yield</code> expressions. You await other coroutines using <code>yield</code> and the last <code>yield</code> expression defines what is returned.</p>"},{"location":"references/python%20API%27s/validation_helpers/#coroutine.FakeAwaitable","title":"FakeAwaitable","text":"<pre><code>FakeAwaitable(gen: Generator[Any, Any, Any])\n</code></pre> <p>Convert a generator to an awaitable object.</p> <p>Needed for internals of <code>cg.get_variable</code>. There we can't use @coroutine because native coroutines await from types.coroutine() directly without yielding back control to the top (likely as a performance enhancement).</p> <p>If we instead wrap the generator in this FakeAwaitable, control is yielded back to the top (reason unknown).</p> Source code in <code>esphome\\coroutine.py</code> <pre><code>def __init__(self, gen: Generator[Any, Any, Any]) -&gt; None:\n    self._gen = gen\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#coroutine.FakeEventLoop","title":"FakeEventLoop","text":"<pre><code>FakeEventLoop()\n</code></pre> <p>Emulate an asyncio EventLoop to run some registered coroutine jobs in sequence.</p> Source code in <code>esphome\\coroutine.py</code> <pre><code>def __init__(self):\n    self._pending_tasks: list[_Task] = []\n    self._task_counter = 0\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#coroutine.FakeEventLoop.add_job","title":"add_job","text":"<pre><code>add_job(func, *args, **kwargs)\n</code></pre> <p>Add a job to the task queue,</p> <p>Optionally retrieves priority from the function object, and schedules according to that.</p> Source code in <code>esphome\\coroutine.py</code> <pre><code>def add_job(self, func, *args, **kwargs):\n    \"\"\"Add a job to the task queue,\n\n    Optionally retrieves priority from the function object, and schedules according to that.\n    \"\"\"\n    if inspect.iscoroutine(func):\n        raise ValueError(\"Can only add coroutine functions, not coroutine objects\")\n    if inspect.iscoroutinefunction(func):\n        coro = func\n        gen = coro(*args, **kwargs).__await__()\n    else:\n        coro = coroutine(func)\n        gen = coro(*args, **kwargs)\n    prio = getattr(coro, \"priority\", 0.0)\n    task = _Task(prio, self._task_counter, gen, func)\n    self._task_counter += 1\n    heapq.heappush(self._pending_tasks, task)\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#coroutine.FakeEventLoop.flush_tasks","title":"flush_tasks","text":"<pre><code>flush_tasks()\n</code></pre> <p>Run until all tasks have been completed.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>if a deadlock is detected.</p> Source code in <code>esphome\\coroutine.py</code> <pre><code>def flush_tasks(self):\n    \"\"\"Run until all tasks have been completed.\n\n    :raises RuntimeError: if a deadlock is detected.\n    \"\"\"\n    i = 0\n    while self._pending_tasks:\n        i += 1\n        if i &gt; 1000000:\n            # Detect deadlock/circular dependency by measuring how many times tasks have been\n            # executed. On the big tests/test1.yaml we only get to a fraction of this, so\n            # this shouldn't be a problem.\n            raise RuntimeError(\n                \"Circular dependency detected! \"\n                \"Please run with -v option to see what functions failed to \"\n                \"complete.\"\n            )\n\n        task: _Task = heapq.heappop(self._pending_tasks)\n        _LOGGER.debug(\n            \"Running %s in %s (num %s)\",\n            task.original_function.__qualname__,\n            task.original_function.__module__,\n            task.id_number,\n        )\n\n        try:\n            next(task.iterator)\n            # Decrease priority over time, so that if this task is blocked\n            # due to a dependency others will clear the dependency\n            # This could be improved with a less naive approach\n            new_task = task.with_priority(task.priority - 1)\n            heapq.heappush(self._pending_tasks, new_task)\n        except StopIteration:\n            _LOGGER.debug(\" -&gt; finished\")\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#coroutine.coroutine","title":"coroutine","text":"<pre><code>coroutine(\n    func: Callable[..., Any]\n) -&gt; Callable[..., Awaitable[Any]]\n</code></pre> <p>Decorator to apply to methods to convert them to ESPHome coroutines.</p> Source code in <code>esphome\\coroutine.py</code> <pre><code>def coroutine(func: Callable[..., Any]) -&gt; Callable[..., Awaitable[Any]]:\n    \"\"\"Decorator to apply to methods to convert them to ESPHome coroutines.\"\"\"\n    if getattr(func, \"_esphome_coroutine\", False):\n        # If func is already a coroutine, do not re-wrap it (performance)\n        return func\n    if inspect.isasyncgenfunction(func):\n        # Trade-off: In ESPHome, there's not really a use-case for async generators.\n        # and during the transition to new-style syntax it will happen that a `yield`\n        # is not replaced properly, so don't accept async generators.\n        raise ValueError(\n            f\"Async generator functions are not allowed. \"\n            f\"Please check whether you've replaced all yields with awaits/returns. \"\n            f\"See {func} in {func.__module__}\"\n        )\n    if inspect.iscoroutinefunction(func):\n        # A new-style async-def coroutine function, no conversion needed.\n        return func\n\n    if inspect.isgeneratorfunction(func):\n\n        @functools.wraps(func)\n        def coro(*args, **kwargs):\n            gen = func(*args, **kwargs)\n            ret = yield from _flatten_generator(gen)\n            return ret\n\n    else:\n        # A \"normal\" function with no `yield` statements, convert to generator\n        # that includes a yield just so it's also a generator function\n        @functools.wraps(func)\n        def coro(*args, **kwargs):\n            res = func(*args, **kwargs)\n            yield\n            return res\n\n    # Add coroutine internal python flag so that it can be awaited from new-style coroutines.\n    coro = types.coroutine(coro)\n    # pylint: disable=protected-access\n    coro._esphome_coroutine = True\n    return coro\n</code></pre>"},{"location":"references/python%20API%27s/validation_helpers/#coroutine.coroutine_with_priority","title":"coroutine_with_priority","text":"<pre><code>coroutine_with_priority(priority: float)\n</code></pre> <p>Decorator to apply to functions to convert them to ESPHome coroutines.</p> <p>Parameters:</p> Name Type Description Default <code>priority</code> <code>float</code> <p>priority with which to schedule the coroutine, higher priorities run first.</p> required Source code in <code>esphome\\coroutine.py</code> <pre><code>def coroutine_with_priority(priority: float):\n    \"\"\"Decorator to apply to functions to convert them to ESPHome coroutines.\n\n    :param priority: priority with which to schedule the coroutine, higher priorities run first.\n    \"\"\"\n\n    def decorator(func):\n        coro = coroutine(func)\n        coro.priority = priority\n        return coro\n\n    return decorator\n</code></pre>"},{"location":"references/python%20API%27s/voluptuous_schema/","title":"Voluptuous schema","text":""},{"location":"references/python%20API%27s/voluptuous_schema/#voluptuous_schema","title":"voluptuous_schema","text":""},{"location":"references/python%20API%27s/voluptuous_schema/#voluptuous_schema.ExtraKeysInvalid","title":"ExtraKeysInvalid","text":"<pre><code>ExtraKeysInvalid(*arg, **kwargs)\n</code></pre> <p>             Bases: <code>Invalid</code></p> Source code in <code>esphome\\voluptuous_schema.py</code> <pre><code>def __init__(self, *arg, **kwargs):\n    self.candidates = kwargs.pop(\"candidates\")\n    vol.Invalid.__init__(self, *arg, **kwargs)\n</code></pre>"},{"location":"references/python%20API%27s/voluptuous_schema/#voluptuous_schema.ExtraKeysInvalid.candidates","title":"candidates  <code>instance-attribute</code>","text":"<pre><code>candidates = pop('candidates')\n</code></pre>"},{"location":"references/python%20API%27s/voluptuous_schema/#voluptuous_schema.ensure_multiple_invalid","title":"ensure_multiple_invalid","text":"<pre><code>ensure_multiple_invalid(err)\n</code></pre> Source code in <code>esphome\\voluptuous_schema.py</code> <pre><code>def ensure_multiple_invalid(err):\n    if isinstance(err, vol.MultipleInvalid):\n        return err\n    return vol.MultipleInvalid(err)\n</code></pre>"}]}